
MIP_TESTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d1c  08006dd0  08006dd0  00007dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aec  08009aec  0000b080  2**0
                  CONTENTS
  4 .ARM          00000000  08009aec  08009aec  0000b080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aec  08009aec  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aec  08009aec  0000aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009af0  08009af0  0000aaf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009af4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  20000080  08009b74  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08009b74  0000b700  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be28  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df8  00000000  00000000  00016ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00018cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000835  00000000  00000000  00019740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010104  00000000  00000000  00019f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4d6  00000000  00000000  0002a079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005dfcf  00000000  00000000  0003954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009751e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  00097564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0009a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006db8 	.word	0x08006db8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08006db8 	.word	0x08006db8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_fdiv>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	464f      	mov	r7, r9
 8000238:	4646      	mov	r6, r8
 800023a:	46d6      	mov	lr, sl
 800023c:	0244      	lsls	r4, r0, #9
 800023e:	b5c0      	push	{r6, r7, lr}
 8000240:	0047      	lsls	r7, r0, #1
 8000242:	1c0e      	adds	r6, r1, #0
 8000244:	0a64      	lsrs	r4, r4, #9
 8000246:	0e3f      	lsrs	r7, r7, #24
 8000248:	0fc5      	lsrs	r5, r0, #31
 800024a:	2f00      	cmp	r7, #0
 800024c:	d03c      	beq.n	80002c8 <__aeabi_fdiv+0x94>
 800024e:	2fff      	cmp	r7, #255	@ 0xff
 8000250:	d042      	beq.n	80002d8 <__aeabi_fdiv+0xa4>
 8000252:	2300      	movs	r3, #0
 8000254:	2280      	movs	r2, #128	@ 0x80
 8000256:	4699      	mov	r9, r3
 8000258:	469a      	mov	sl, r3
 800025a:	00e4      	lsls	r4, r4, #3
 800025c:	04d2      	lsls	r2, r2, #19
 800025e:	4314      	orrs	r4, r2
 8000260:	3f7f      	subs	r7, #127	@ 0x7f
 8000262:	0273      	lsls	r3, r6, #9
 8000264:	0a5b      	lsrs	r3, r3, #9
 8000266:	4698      	mov	r8, r3
 8000268:	0073      	lsls	r3, r6, #1
 800026a:	0e1b      	lsrs	r3, r3, #24
 800026c:	0ff6      	lsrs	r6, r6, #31
 800026e:	2b00      	cmp	r3, #0
 8000270:	d01b      	beq.n	80002aa <__aeabi_fdiv+0x76>
 8000272:	2bff      	cmp	r3, #255	@ 0xff
 8000274:	d013      	beq.n	800029e <__aeabi_fdiv+0x6a>
 8000276:	4642      	mov	r2, r8
 8000278:	2180      	movs	r1, #128	@ 0x80
 800027a:	00d2      	lsls	r2, r2, #3
 800027c:	04c9      	lsls	r1, r1, #19
 800027e:	4311      	orrs	r1, r2
 8000280:	4688      	mov	r8, r1
 8000282:	2000      	movs	r0, #0
 8000284:	3b7f      	subs	r3, #127	@ 0x7f
 8000286:	0029      	movs	r1, r5
 8000288:	1aff      	subs	r7, r7, r3
 800028a:	464b      	mov	r3, r9
 800028c:	4071      	eors	r1, r6
 800028e:	b2c9      	uxtb	r1, r1
 8000290:	2b0f      	cmp	r3, #15
 8000292:	d900      	bls.n	8000296 <__aeabi_fdiv+0x62>
 8000294:	e0b5      	b.n	8000402 <__aeabi_fdiv+0x1ce>
 8000296:	4a74      	ldr	r2, [pc, #464]	@ (8000468 <__aeabi_fdiv+0x234>)
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	58d3      	ldr	r3, [r2, r3]
 800029c:	469f      	mov	pc, r3
 800029e:	4643      	mov	r3, r8
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d13f      	bne.n	8000324 <__aeabi_fdiv+0xf0>
 80002a4:	3fff      	subs	r7, #255	@ 0xff
 80002a6:	3302      	adds	r3, #2
 80002a8:	e003      	b.n	80002b2 <__aeabi_fdiv+0x7e>
 80002aa:	4643      	mov	r3, r8
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d12d      	bne.n	800030c <__aeabi_fdiv+0xd8>
 80002b0:	2301      	movs	r3, #1
 80002b2:	0029      	movs	r1, r5
 80002b4:	464a      	mov	r2, r9
 80002b6:	4071      	eors	r1, r6
 80002b8:	b2c9      	uxtb	r1, r1
 80002ba:	431a      	orrs	r2, r3
 80002bc:	2a0e      	cmp	r2, #14
 80002be:	d838      	bhi.n	8000332 <__aeabi_fdiv+0xfe>
 80002c0:	486a      	ldr	r0, [pc, #424]	@ (800046c <__aeabi_fdiv+0x238>)
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	5882      	ldr	r2, [r0, r2]
 80002c6:	4697      	mov	pc, r2
 80002c8:	2c00      	cmp	r4, #0
 80002ca:	d113      	bne.n	80002f4 <__aeabi_fdiv+0xc0>
 80002cc:	2304      	movs	r3, #4
 80002ce:	4699      	mov	r9, r3
 80002d0:	3b03      	subs	r3, #3
 80002d2:	2700      	movs	r7, #0
 80002d4:	469a      	mov	sl, r3
 80002d6:	e7c4      	b.n	8000262 <__aeabi_fdiv+0x2e>
 80002d8:	2c00      	cmp	r4, #0
 80002da:	d105      	bne.n	80002e8 <__aeabi_fdiv+0xb4>
 80002dc:	2308      	movs	r3, #8
 80002de:	4699      	mov	r9, r3
 80002e0:	3b06      	subs	r3, #6
 80002e2:	27ff      	movs	r7, #255	@ 0xff
 80002e4:	469a      	mov	sl, r3
 80002e6:	e7bc      	b.n	8000262 <__aeabi_fdiv+0x2e>
 80002e8:	230c      	movs	r3, #12
 80002ea:	4699      	mov	r9, r3
 80002ec:	3b09      	subs	r3, #9
 80002ee:	27ff      	movs	r7, #255	@ 0xff
 80002f0:	469a      	mov	sl, r3
 80002f2:	e7b6      	b.n	8000262 <__aeabi_fdiv+0x2e>
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 fcf1 	bl	8000cdc <__clzsi2>
 80002fa:	2776      	movs	r7, #118	@ 0x76
 80002fc:	1f43      	subs	r3, r0, #5
 80002fe:	409c      	lsls	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	427f      	negs	r7, r7
 8000304:	4699      	mov	r9, r3
 8000306:	469a      	mov	sl, r3
 8000308:	1a3f      	subs	r7, r7, r0
 800030a:	e7aa      	b.n	8000262 <__aeabi_fdiv+0x2e>
 800030c:	4640      	mov	r0, r8
 800030e:	f000 fce5 	bl	8000cdc <__clzsi2>
 8000312:	4642      	mov	r2, r8
 8000314:	1f43      	subs	r3, r0, #5
 8000316:	409a      	lsls	r2, r3
 8000318:	2376      	movs	r3, #118	@ 0x76
 800031a:	425b      	negs	r3, r3
 800031c:	1a1b      	subs	r3, r3, r0
 800031e:	4690      	mov	r8, r2
 8000320:	2000      	movs	r0, #0
 8000322:	e7b0      	b.n	8000286 <__aeabi_fdiv+0x52>
 8000324:	2303      	movs	r3, #3
 8000326:	464a      	mov	r2, r9
 8000328:	431a      	orrs	r2, r3
 800032a:	4691      	mov	r9, r2
 800032c:	2003      	movs	r0, #3
 800032e:	33fc      	adds	r3, #252	@ 0xfc
 8000330:	e7a9      	b.n	8000286 <__aeabi_fdiv+0x52>
 8000332:	000d      	movs	r5, r1
 8000334:	20ff      	movs	r0, #255	@ 0xff
 8000336:	2200      	movs	r2, #0
 8000338:	05c0      	lsls	r0, r0, #23
 800033a:	07ed      	lsls	r5, r5, #31
 800033c:	4310      	orrs	r0, r2
 800033e:	4328      	orrs	r0, r5
 8000340:	bce0      	pop	{r5, r6, r7}
 8000342:	46ba      	mov	sl, r7
 8000344:	46b1      	mov	r9, r6
 8000346:	46a8      	mov	r8, r5
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	000d      	movs	r5, r1
 800034c:	2000      	movs	r0, #0
 800034e:	2200      	movs	r2, #0
 8000350:	e7f2      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000352:	4653      	mov	r3, sl
 8000354:	2b02      	cmp	r3, #2
 8000356:	d0ed      	beq.n	8000334 <__aeabi_fdiv+0x100>
 8000358:	2b03      	cmp	r3, #3
 800035a:	d033      	beq.n	80003c4 <__aeabi_fdiv+0x190>
 800035c:	46a0      	mov	r8, r4
 800035e:	2b01      	cmp	r3, #1
 8000360:	d105      	bne.n	800036e <__aeabi_fdiv+0x13a>
 8000362:	2000      	movs	r0, #0
 8000364:	2200      	movs	r2, #0
 8000366:	e7e7      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000368:	0035      	movs	r5, r6
 800036a:	2803      	cmp	r0, #3
 800036c:	d07a      	beq.n	8000464 <__aeabi_fdiv+0x230>
 800036e:	003b      	movs	r3, r7
 8000370:	337f      	adds	r3, #127	@ 0x7f
 8000372:	2b00      	cmp	r3, #0
 8000374:	dd2d      	ble.n	80003d2 <__aeabi_fdiv+0x19e>
 8000376:	4642      	mov	r2, r8
 8000378:	0752      	lsls	r2, r2, #29
 800037a:	d007      	beq.n	800038c <__aeabi_fdiv+0x158>
 800037c:	220f      	movs	r2, #15
 800037e:	4641      	mov	r1, r8
 8000380:	400a      	ands	r2, r1
 8000382:	2a04      	cmp	r2, #4
 8000384:	d002      	beq.n	800038c <__aeabi_fdiv+0x158>
 8000386:	2204      	movs	r2, #4
 8000388:	4694      	mov	ip, r2
 800038a:	44e0      	add	r8, ip
 800038c:	4642      	mov	r2, r8
 800038e:	0112      	lsls	r2, r2, #4
 8000390:	d505      	bpl.n	800039e <__aeabi_fdiv+0x16a>
 8000392:	4642      	mov	r2, r8
 8000394:	4b36      	ldr	r3, [pc, #216]	@ (8000470 <__aeabi_fdiv+0x23c>)
 8000396:	401a      	ands	r2, r3
 8000398:	003b      	movs	r3, r7
 800039a:	4690      	mov	r8, r2
 800039c:	3380      	adds	r3, #128	@ 0x80
 800039e:	2bfe      	cmp	r3, #254	@ 0xfe
 80003a0:	dcc8      	bgt.n	8000334 <__aeabi_fdiv+0x100>
 80003a2:	4642      	mov	r2, r8
 80003a4:	0192      	lsls	r2, r2, #6
 80003a6:	0a52      	lsrs	r2, r2, #9
 80003a8:	b2d8      	uxtb	r0, r3
 80003aa:	e7c5      	b.n	8000338 <__aeabi_fdiv+0x104>
 80003ac:	2280      	movs	r2, #128	@ 0x80
 80003ae:	2500      	movs	r5, #0
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	03d2      	lsls	r2, r2, #15
 80003b4:	e7c0      	b.n	8000338 <__aeabi_fdiv+0x104>
 80003b6:	2280      	movs	r2, #128	@ 0x80
 80003b8:	03d2      	lsls	r2, r2, #15
 80003ba:	4214      	tst	r4, r2
 80003bc:	d002      	beq.n	80003c4 <__aeabi_fdiv+0x190>
 80003be:	4643      	mov	r3, r8
 80003c0:	4213      	tst	r3, r2
 80003c2:	d049      	beq.n	8000458 <__aeabi_fdiv+0x224>
 80003c4:	2280      	movs	r2, #128	@ 0x80
 80003c6:	03d2      	lsls	r2, r2, #15
 80003c8:	4322      	orrs	r2, r4
 80003ca:	0252      	lsls	r2, r2, #9
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	0a52      	lsrs	r2, r2, #9
 80003d0:	e7b2      	b.n	8000338 <__aeabi_fdiv+0x104>
 80003d2:	2201      	movs	r2, #1
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	2b1b      	cmp	r3, #27
 80003d8:	dcc3      	bgt.n	8000362 <__aeabi_fdiv+0x12e>
 80003da:	4642      	mov	r2, r8
 80003dc:	40da      	lsrs	r2, r3
 80003de:	4643      	mov	r3, r8
 80003e0:	379e      	adds	r7, #158	@ 0x9e
 80003e2:	40bb      	lsls	r3, r7
 80003e4:	1e59      	subs	r1, r3, #1
 80003e6:	418b      	sbcs	r3, r1
 80003e8:	431a      	orrs	r2, r3
 80003ea:	0753      	lsls	r3, r2, #29
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fdiv+0x1c4>
 80003ee:	230f      	movs	r3, #15
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fdiv+0x1c4>
 80003f6:	3204      	adds	r2, #4
 80003f8:	0153      	lsls	r3, r2, #5
 80003fa:	d529      	bpl.n	8000450 <__aeabi_fdiv+0x21c>
 80003fc:	2001      	movs	r0, #1
 80003fe:	2200      	movs	r2, #0
 8000400:	e79a      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000402:	4642      	mov	r2, r8
 8000404:	0163      	lsls	r3, r4, #5
 8000406:	0155      	lsls	r5, r2, #5
 8000408:	42ab      	cmp	r3, r5
 800040a:	d215      	bcs.n	8000438 <__aeabi_fdiv+0x204>
 800040c:	201b      	movs	r0, #27
 800040e:	2200      	movs	r2, #0
 8000410:	3f01      	subs	r7, #1
 8000412:	2601      	movs	r6, #1
 8000414:	001c      	movs	r4, r3
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	2c00      	cmp	r4, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fdiv+0x1ee>
 800041e:	429d      	cmp	r5, r3
 8000420:	d801      	bhi.n	8000426 <__aeabi_fdiv+0x1f2>
 8000422:	1b5b      	subs	r3, r3, r5
 8000424:	4332      	orrs	r2, r6
 8000426:	3801      	subs	r0, #1
 8000428:	2800      	cmp	r0, #0
 800042a:	d1f3      	bne.n	8000414 <__aeabi_fdiv+0x1e0>
 800042c:	1e58      	subs	r0, r3, #1
 800042e:	4183      	sbcs	r3, r0
 8000430:	4313      	orrs	r3, r2
 8000432:	4698      	mov	r8, r3
 8000434:	000d      	movs	r5, r1
 8000436:	e79a      	b.n	800036e <__aeabi_fdiv+0x13a>
 8000438:	201a      	movs	r0, #26
 800043a:	2201      	movs	r2, #1
 800043c:	1b5b      	subs	r3, r3, r5
 800043e:	e7e8      	b.n	8000412 <__aeabi_fdiv+0x1de>
 8000440:	3b02      	subs	r3, #2
 8000442:	425a      	negs	r2, r3
 8000444:	4153      	adcs	r3, r2
 8000446:	425b      	negs	r3, r3
 8000448:	0035      	movs	r5, r6
 800044a:	2200      	movs	r2, #0
 800044c:	b2d8      	uxtb	r0, r3
 800044e:	e773      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000450:	0192      	lsls	r2, r2, #6
 8000452:	2000      	movs	r0, #0
 8000454:	0a52      	lsrs	r2, r2, #9
 8000456:	e76f      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000458:	431a      	orrs	r2, r3
 800045a:	0252      	lsls	r2, r2, #9
 800045c:	0035      	movs	r5, r6
 800045e:	20ff      	movs	r0, #255	@ 0xff
 8000460:	0a52      	lsrs	r2, r2, #9
 8000462:	e769      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000464:	4644      	mov	r4, r8
 8000466:	e7ad      	b.n	80003c4 <__aeabi_fdiv+0x190>
 8000468:	080070f0 	.word	0x080070f0
 800046c:	08007130 	.word	0x08007130
 8000470:	f7ffffff 	.word	0xf7ffffff

08000474 <__aeabi_i2f>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	2800      	cmp	r0, #0
 8000478:	d013      	beq.n	80004a2 <__aeabi_i2f+0x2e>
 800047a:	17c3      	asrs	r3, r0, #31
 800047c:	18c5      	adds	r5, r0, r3
 800047e:	405d      	eors	r5, r3
 8000480:	0fc4      	lsrs	r4, r0, #31
 8000482:	0028      	movs	r0, r5
 8000484:	f000 fc2a 	bl	8000cdc <__clzsi2>
 8000488:	239e      	movs	r3, #158	@ 0x9e
 800048a:	0001      	movs	r1, r0
 800048c:	1a1b      	subs	r3, r3, r0
 800048e:	2b96      	cmp	r3, #150	@ 0x96
 8000490:	dc0f      	bgt.n	80004b2 <__aeabi_i2f+0x3e>
 8000492:	2808      	cmp	r0, #8
 8000494:	d034      	beq.n	8000500 <__aeabi_i2f+0x8c>
 8000496:	3908      	subs	r1, #8
 8000498:	408d      	lsls	r5, r1
 800049a:	026d      	lsls	r5, r5, #9
 800049c:	0a6d      	lsrs	r5, r5, #9
 800049e:	b2d8      	uxtb	r0, r3
 80004a0:	e002      	b.n	80004a8 <__aeabi_i2f+0x34>
 80004a2:	2400      	movs	r4, #0
 80004a4:	2000      	movs	r0, #0
 80004a6:	2500      	movs	r5, #0
 80004a8:	05c0      	lsls	r0, r0, #23
 80004aa:	4328      	orrs	r0, r5
 80004ac:	07e4      	lsls	r4, r4, #31
 80004ae:	4320      	orrs	r0, r4
 80004b0:	bd70      	pop	{r4, r5, r6, pc}
 80004b2:	2b99      	cmp	r3, #153	@ 0x99
 80004b4:	dc16      	bgt.n	80004e4 <__aeabi_i2f+0x70>
 80004b6:	1f42      	subs	r2, r0, #5
 80004b8:	2805      	cmp	r0, #5
 80004ba:	d000      	beq.n	80004be <__aeabi_i2f+0x4a>
 80004bc:	4095      	lsls	r5, r2
 80004be:	002a      	movs	r2, r5
 80004c0:	4811      	ldr	r0, [pc, #68]	@ (8000508 <__aeabi_i2f+0x94>)
 80004c2:	4002      	ands	r2, r0
 80004c4:	076e      	lsls	r6, r5, #29
 80004c6:	d009      	beq.n	80004dc <__aeabi_i2f+0x68>
 80004c8:	260f      	movs	r6, #15
 80004ca:	4035      	ands	r5, r6
 80004cc:	2d04      	cmp	r5, #4
 80004ce:	d005      	beq.n	80004dc <__aeabi_i2f+0x68>
 80004d0:	3204      	adds	r2, #4
 80004d2:	0155      	lsls	r5, r2, #5
 80004d4:	d502      	bpl.n	80004dc <__aeabi_i2f+0x68>
 80004d6:	239f      	movs	r3, #159	@ 0x9f
 80004d8:	4002      	ands	r2, r0
 80004da:	1a5b      	subs	r3, r3, r1
 80004dc:	0192      	lsls	r2, r2, #6
 80004de:	0a55      	lsrs	r5, r2, #9
 80004e0:	b2d8      	uxtb	r0, r3
 80004e2:	e7e1      	b.n	80004a8 <__aeabi_i2f+0x34>
 80004e4:	2205      	movs	r2, #5
 80004e6:	1a12      	subs	r2, r2, r0
 80004e8:	0028      	movs	r0, r5
 80004ea:	40d0      	lsrs	r0, r2
 80004ec:	0002      	movs	r2, r0
 80004ee:	0008      	movs	r0, r1
 80004f0:	301b      	adds	r0, #27
 80004f2:	4085      	lsls	r5, r0
 80004f4:	0028      	movs	r0, r5
 80004f6:	1e45      	subs	r5, r0, #1
 80004f8:	41a8      	sbcs	r0, r5
 80004fa:	4302      	orrs	r2, r0
 80004fc:	0015      	movs	r5, r2
 80004fe:	e7de      	b.n	80004be <__aeabi_i2f+0x4a>
 8000500:	026d      	lsls	r5, r5, #9
 8000502:	2096      	movs	r0, #150	@ 0x96
 8000504:	0a6d      	lsrs	r5, r5, #9
 8000506:	e7cf      	b.n	80004a8 <__aeabi_i2f+0x34>
 8000508:	fbffffff 	.word	0xfbffffff

0800050c <__aeabi_dadd>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	4657      	mov	r7, sl
 8000510:	464e      	mov	r6, r9
 8000512:	4645      	mov	r5, r8
 8000514:	46de      	mov	lr, fp
 8000516:	b5e0      	push	{r5, r6, r7, lr}
 8000518:	b083      	sub	sp, #12
 800051a:	9000      	str	r0, [sp, #0]
 800051c:	9101      	str	r1, [sp, #4]
 800051e:	030c      	lsls	r4, r1, #12
 8000520:	004f      	lsls	r7, r1, #1
 8000522:	0fce      	lsrs	r6, r1, #31
 8000524:	0a61      	lsrs	r1, r4, #9
 8000526:	9c00      	ldr	r4, [sp, #0]
 8000528:	031d      	lsls	r5, r3, #12
 800052a:	0f64      	lsrs	r4, r4, #29
 800052c:	430c      	orrs	r4, r1
 800052e:	9900      	ldr	r1, [sp, #0]
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	00c8      	lsls	r0, r1, #3
 8000536:	0059      	lsls	r1, r3, #1
 8000538:	0d4b      	lsrs	r3, r1, #21
 800053a:	4699      	mov	r9, r3
 800053c:	9a00      	ldr	r2, [sp, #0]
 800053e:	9b01      	ldr	r3, [sp, #4]
 8000540:	0a6d      	lsrs	r5, r5, #9
 8000542:	0fd9      	lsrs	r1, r3, #31
 8000544:	0f53      	lsrs	r3, r2, #29
 8000546:	432b      	orrs	r3, r5
 8000548:	469a      	mov	sl, r3
 800054a:	9b00      	ldr	r3, [sp, #0]
 800054c:	0d7f      	lsrs	r7, r7, #21
 800054e:	00da      	lsls	r2, r3, #3
 8000550:	4694      	mov	ip, r2
 8000552:	464a      	mov	r2, r9
 8000554:	46b0      	mov	r8, r6
 8000556:	1aba      	subs	r2, r7, r2
 8000558:	428e      	cmp	r6, r1
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x52>
 800055c:	e0b0      	b.n	80006c0 <__aeabi_dadd+0x1b4>
 800055e:	2a00      	cmp	r2, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_dadd+0x58>
 8000562:	e078      	b.n	8000656 <__aeabi_dadd+0x14a>
 8000564:	4649      	mov	r1, r9
 8000566:	2900      	cmp	r1, #0
 8000568:	d100      	bne.n	800056c <__aeabi_dadd+0x60>
 800056a:	e0e9      	b.n	8000740 <__aeabi_dadd+0x234>
 800056c:	49c9      	ldr	r1, [pc, #804]	@ (8000894 <__aeabi_dadd+0x388>)
 800056e:	428f      	cmp	r7, r1
 8000570:	d100      	bne.n	8000574 <__aeabi_dadd+0x68>
 8000572:	e195      	b.n	80008a0 <__aeabi_dadd+0x394>
 8000574:	2501      	movs	r5, #1
 8000576:	2a38      	cmp	r2, #56	@ 0x38
 8000578:	dc16      	bgt.n	80005a8 <__aeabi_dadd+0x9c>
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	4653      	mov	r3, sl
 800057e:	0409      	lsls	r1, r1, #16
 8000580:	430b      	orrs	r3, r1
 8000582:	469a      	mov	sl, r3
 8000584:	2a1f      	cmp	r2, #31
 8000586:	dd00      	ble.n	800058a <__aeabi_dadd+0x7e>
 8000588:	e1e7      	b.n	800095a <__aeabi_dadd+0x44e>
 800058a:	2120      	movs	r1, #32
 800058c:	4655      	mov	r5, sl
 800058e:	1a8b      	subs	r3, r1, r2
 8000590:	4661      	mov	r1, ip
 8000592:	409d      	lsls	r5, r3
 8000594:	40d1      	lsrs	r1, r2
 8000596:	430d      	orrs	r5, r1
 8000598:	4661      	mov	r1, ip
 800059a:	4099      	lsls	r1, r3
 800059c:	1e4b      	subs	r3, r1, #1
 800059e:	4199      	sbcs	r1, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	40d3      	lsrs	r3, r2
 80005a4:	430d      	orrs	r5, r1
 80005a6:	1ae4      	subs	r4, r4, r3
 80005a8:	1b45      	subs	r5, r0, r5
 80005aa:	42a8      	cmp	r0, r5
 80005ac:	4180      	sbcs	r0, r0
 80005ae:	4240      	negs	r0, r0
 80005b0:	1a24      	subs	r4, r4, r0
 80005b2:	0223      	lsls	r3, r4, #8
 80005b4:	d400      	bmi.n	80005b8 <__aeabi_dadd+0xac>
 80005b6:	e10f      	b.n	80007d8 <__aeabi_dadd+0x2cc>
 80005b8:	0264      	lsls	r4, r4, #9
 80005ba:	0a64      	lsrs	r4, r4, #9
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_dadd+0xb6>
 80005c0:	e139      	b.n	8000836 <__aeabi_dadd+0x32a>
 80005c2:	0020      	movs	r0, r4
 80005c4:	f000 fb8a 	bl	8000cdc <__clzsi2>
 80005c8:	0003      	movs	r3, r0
 80005ca:	3b08      	subs	r3, #8
 80005cc:	2120      	movs	r1, #32
 80005ce:	0028      	movs	r0, r5
 80005d0:	1aca      	subs	r2, r1, r3
 80005d2:	40d0      	lsrs	r0, r2
 80005d4:	409c      	lsls	r4, r3
 80005d6:	0002      	movs	r2, r0
 80005d8:	409d      	lsls	r5, r3
 80005da:	4322      	orrs	r2, r4
 80005dc:	429f      	cmp	r7, r3
 80005de:	dd00      	ble.n	80005e2 <__aeabi_dadd+0xd6>
 80005e0:	e173      	b.n	80008ca <__aeabi_dadd+0x3be>
 80005e2:	1bd8      	subs	r0, r3, r7
 80005e4:	3001      	adds	r0, #1
 80005e6:	1a09      	subs	r1, r1, r0
 80005e8:	002c      	movs	r4, r5
 80005ea:	408d      	lsls	r5, r1
 80005ec:	40c4      	lsrs	r4, r0
 80005ee:	1e6b      	subs	r3, r5, #1
 80005f0:	419d      	sbcs	r5, r3
 80005f2:	0013      	movs	r3, r2
 80005f4:	40c2      	lsrs	r2, r0
 80005f6:	408b      	lsls	r3, r1
 80005f8:	4325      	orrs	r5, r4
 80005fa:	2700      	movs	r7, #0
 80005fc:	0014      	movs	r4, r2
 80005fe:	431d      	orrs	r5, r3
 8000600:	076b      	lsls	r3, r5, #29
 8000602:	d009      	beq.n	8000618 <__aeabi_dadd+0x10c>
 8000604:	230f      	movs	r3, #15
 8000606:	402b      	ands	r3, r5
 8000608:	2b04      	cmp	r3, #4
 800060a:	d005      	beq.n	8000618 <__aeabi_dadd+0x10c>
 800060c:	1d2b      	adds	r3, r5, #4
 800060e:	42ab      	cmp	r3, r5
 8000610:	41ad      	sbcs	r5, r5
 8000612:	426d      	negs	r5, r5
 8000614:	1964      	adds	r4, r4, r5
 8000616:	001d      	movs	r5, r3
 8000618:	0223      	lsls	r3, r4, #8
 800061a:	d400      	bmi.n	800061e <__aeabi_dadd+0x112>
 800061c:	e12d      	b.n	800087a <__aeabi_dadd+0x36e>
 800061e:	4a9d      	ldr	r2, [pc, #628]	@ (8000894 <__aeabi_dadd+0x388>)
 8000620:	3701      	adds	r7, #1
 8000622:	4297      	cmp	r7, r2
 8000624:	d100      	bne.n	8000628 <__aeabi_dadd+0x11c>
 8000626:	e0d3      	b.n	80007d0 <__aeabi_dadd+0x2c4>
 8000628:	4646      	mov	r6, r8
 800062a:	499b      	ldr	r1, [pc, #620]	@ (8000898 <__aeabi_dadd+0x38c>)
 800062c:	08ed      	lsrs	r5, r5, #3
 800062e:	4021      	ands	r1, r4
 8000630:	074a      	lsls	r2, r1, #29
 8000632:	432a      	orrs	r2, r5
 8000634:	057c      	lsls	r4, r7, #21
 8000636:	024d      	lsls	r5, r1, #9
 8000638:	0b2d      	lsrs	r5, r5, #12
 800063a:	0d64      	lsrs	r4, r4, #21
 800063c:	0524      	lsls	r4, r4, #20
 800063e:	432c      	orrs	r4, r5
 8000640:	07f6      	lsls	r6, r6, #31
 8000642:	4334      	orrs	r4, r6
 8000644:	0010      	movs	r0, r2
 8000646:	0021      	movs	r1, r4
 8000648:	b003      	add	sp, #12
 800064a:	bcf0      	pop	{r4, r5, r6, r7}
 800064c:	46bb      	mov	fp, r7
 800064e:	46b2      	mov	sl, r6
 8000650:	46a9      	mov	r9, r5
 8000652:	46a0      	mov	r8, r4
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000656:	2a00      	cmp	r2, #0
 8000658:	d100      	bne.n	800065c <__aeabi_dadd+0x150>
 800065a:	e084      	b.n	8000766 <__aeabi_dadd+0x25a>
 800065c:	464a      	mov	r2, r9
 800065e:	1bd2      	subs	r2, r2, r7
 8000660:	2f00      	cmp	r7, #0
 8000662:	d000      	beq.n	8000666 <__aeabi_dadd+0x15a>
 8000664:	e16d      	b.n	8000942 <__aeabi_dadd+0x436>
 8000666:	0025      	movs	r5, r4
 8000668:	4305      	orrs	r5, r0
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x162>
 800066c:	e127      	b.n	80008be <__aeabi_dadd+0x3b2>
 800066e:	1e56      	subs	r6, r2, #1
 8000670:	2a01      	cmp	r2, #1
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x16a>
 8000674:	e23b      	b.n	8000aee <__aeabi_dadd+0x5e2>
 8000676:	4d87      	ldr	r5, [pc, #540]	@ (8000894 <__aeabi_dadd+0x388>)
 8000678:	42aa      	cmp	r2, r5
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x172>
 800067c:	e26a      	b.n	8000b54 <__aeabi_dadd+0x648>
 800067e:	2501      	movs	r5, #1
 8000680:	2e38      	cmp	r6, #56	@ 0x38
 8000682:	dc12      	bgt.n	80006aa <__aeabi_dadd+0x19e>
 8000684:	0032      	movs	r2, r6
 8000686:	2a1f      	cmp	r2, #31
 8000688:	dd00      	ble.n	800068c <__aeabi_dadd+0x180>
 800068a:	e1f8      	b.n	8000a7e <__aeabi_dadd+0x572>
 800068c:	2620      	movs	r6, #32
 800068e:	0025      	movs	r5, r4
 8000690:	1ab6      	subs	r6, r6, r2
 8000692:	0007      	movs	r7, r0
 8000694:	4653      	mov	r3, sl
 8000696:	40b0      	lsls	r0, r6
 8000698:	40d4      	lsrs	r4, r2
 800069a:	40b5      	lsls	r5, r6
 800069c:	40d7      	lsrs	r7, r2
 800069e:	1e46      	subs	r6, r0, #1
 80006a0:	41b0      	sbcs	r0, r6
 80006a2:	1b1b      	subs	r3, r3, r4
 80006a4:	469a      	mov	sl, r3
 80006a6:	433d      	orrs	r5, r7
 80006a8:	4305      	orrs	r5, r0
 80006aa:	4662      	mov	r2, ip
 80006ac:	1b55      	subs	r5, r2, r5
 80006ae:	45ac      	cmp	ip, r5
 80006b0:	4192      	sbcs	r2, r2
 80006b2:	4653      	mov	r3, sl
 80006b4:	4252      	negs	r2, r2
 80006b6:	000e      	movs	r6, r1
 80006b8:	464f      	mov	r7, r9
 80006ba:	4688      	mov	r8, r1
 80006bc:	1a9c      	subs	r4, r3, r2
 80006be:	e778      	b.n	80005b2 <__aeabi_dadd+0xa6>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x1ba>
 80006c4:	e08e      	b.n	80007e4 <__aeabi_dadd+0x2d8>
 80006c6:	4649      	mov	r1, r9
 80006c8:	2900      	cmp	r1, #0
 80006ca:	d175      	bne.n	80007b8 <__aeabi_dadd+0x2ac>
 80006cc:	4661      	mov	r1, ip
 80006ce:	4653      	mov	r3, sl
 80006d0:	4319      	orrs	r1, r3
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x1ca>
 80006d4:	e0f6      	b.n	80008c4 <__aeabi_dadd+0x3b8>
 80006d6:	1e51      	subs	r1, r2, #1
 80006d8:	2a01      	cmp	r2, #1
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x1d2>
 80006dc:	e191      	b.n	8000a02 <__aeabi_dadd+0x4f6>
 80006de:	4d6d      	ldr	r5, [pc, #436]	@ (8000894 <__aeabi_dadd+0x388>)
 80006e0:	42aa      	cmp	r2, r5
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x1da>
 80006e4:	e0dc      	b.n	80008a0 <__aeabi_dadd+0x394>
 80006e6:	2501      	movs	r5, #1
 80006e8:	2938      	cmp	r1, #56	@ 0x38
 80006ea:	dc14      	bgt.n	8000716 <__aeabi_dadd+0x20a>
 80006ec:	000a      	movs	r2, r1
 80006ee:	2a1f      	cmp	r2, #31
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_dadd+0x1e8>
 80006f2:	e1a2      	b.n	8000a3a <__aeabi_dadd+0x52e>
 80006f4:	2120      	movs	r1, #32
 80006f6:	4653      	mov	r3, sl
 80006f8:	1a89      	subs	r1, r1, r2
 80006fa:	408b      	lsls	r3, r1
 80006fc:	001d      	movs	r5, r3
 80006fe:	4663      	mov	r3, ip
 8000700:	40d3      	lsrs	r3, r2
 8000702:	431d      	orrs	r5, r3
 8000704:	4663      	mov	r3, ip
 8000706:	408b      	lsls	r3, r1
 8000708:	0019      	movs	r1, r3
 800070a:	1e4b      	subs	r3, r1, #1
 800070c:	4199      	sbcs	r1, r3
 800070e:	4653      	mov	r3, sl
 8000710:	40d3      	lsrs	r3, r2
 8000712:	430d      	orrs	r5, r1
 8000714:	18e4      	adds	r4, r4, r3
 8000716:	182d      	adds	r5, r5, r0
 8000718:	4285      	cmp	r5, r0
 800071a:	4180      	sbcs	r0, r0
 800071c:	4240      	negs	r0, r0
 800071e:	1824      	adds	r4, r4, r0
 8000720:	0223      	lsls	r3, r4, #8
 8000722:	d559      	bpl.n	80007d8 <__aeabi_dadd+0x2cc>
 8000724:	4b5b      	ldr	r3, [pc, #364]	@ (8000894 <__aeabi_dadd+0x388>)
 8000726:	3701      	adds	r7, #1
 8000728:	429f      	cmp	r7, r3
 800072a:	d051      	beq.n	80007d0 <__aeabi_dadd+0x2c4>
 800072c:	2101      	movs	r1, #1
 800072e:	4b5a      	ldr	r3, [pc, #360]	@ (8000898 <__aeabi_dadd+0x38c>)
 8000730:	086a      	lsrs	r2, r5, #1
 8000732:	401c      	ands	r4, r3
 8000734:	4029      	ands	r1, r5
 8000736:	430a      	orrs	r2, r1
 8000738:	07e5      	lsls	r5, r4, #31
 800073a:	4315      	orrs	r5, r2
 800073c:	0864      	lsrs	r4, r4, #1
 800073e:	e75f      	b.n	8000600 <__aeabi_dadd+0xf4>
 8000740:	4661      	mov	r1, ip
 8000742:	4653      	mov	r3, sl
 8000744:	4319      	orrs	r1, r3
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x23e>
 8000748:	e0bc      	b.n	80008c4 <__aeabi_dadd+0x3b8>
 800074a:	1e51      	subs	r1, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x246>
 8000750:	e164      	b.n	8000a1c <__aeabi_dadd+0x510>
 8000752:	4d50      	ldr	r5, [pc, #320]	@ (8000894 <__aeabi_dadd+0x388>)
 8000754:	42aa      	cmp	r2, r5
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x24e>
 8000758:	e16a      	b.n	8000a30 <__aeabi_dadd+0x524>
 800075a:	2501      	movs	r5, #1
 800075c:	2938      	cmp	r1, #56	@ 0x38
 800075e:	dd00      	ble.n	8000762 <__aeabi_dadd+0x256>
 8000760:	e722      	b.n	80005a8 <__aeabi_dadd+0x9c>
 8000762:	000a      	movs	r2, r1
 8000764:	e70e      	b.n	8000584 <__aeabi_dadd+0x78>
 8000766:	4a4d      	ldr	r2, [pc, #308]	@ (800089c <__aeabi_dadd+0x390>)
 8000768:	1c7d      	adds	r5, r7, #1
 800076a:	4215      	tst	r5, r2
 800076c:	d000      	beq.n	8000770 <__aeabi_dadd+0x264>
 800076e:	e0d0      	b.n	8000912 <__aeabi_dadd+0x406>
 8000770:	0025      	movs	r5, r4
 8000772:	4662      	mov	r2, ip
 8000774:	4653      	mov	r3, sl
 8000776:	4305      	orrs	r5, r0
 8000778:	431a      	orrs	r2, r3
 800077a:	2f00      	cmp	r7, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x274>
 800077e:	e137      	b.n	80009f0 <__aeabi_dadd+0x4e4>
 8000780:	2d00      	cmp	r5, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x27a>
 8000784:	e1a8      	b.n	8000ad8 <__aeabi_dadd+0x5cc>
 8000786:	2a00      	cmp	r2, #0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x280>
 800078a:	e16a      	b.n	8000a62 <__aeabi_dadd+0x556>
 800078c:	4663      	mov	r3, ip
 800078e:	1ac5      	subs	r5, r0, r3
 8000790:	4653      	mov	r3, sl
 8000792:	1ae2      	subs	r2, r4, r3
 8000794:	42a8      	cmp	r0, r5
 8000796:	419b      	sbcs	r3, r3
 8000798:	425b      	negs	r3, r3
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	021a      	lsls	r2, r3, #8
 800079e:	d400      	bmi.n	80007a2 <__aeabi_dadd+0x296>
 80007a0:	e203      	b.n	8000baa <__aeabi_dadd+0x69e>
 80007a2:	4663      	mov	r3, ip
 80007a4:	1a1d      	subs	r5, r3, r0
 80007a6:	45ac      	cmp	ip, r5
 80007a8:	4192      	sbcs	r2, r2
 80007aa:	4653      	mov	r3, sl
 80007ac:	4252      	negs	r2, r2
 80007ae:	1b1c      	subs	r4, r3, r4
 80007b0:	000e      	movs	r6, r1
 80007b2:	4688      	mov	r8, r1
 80007b4:	1aa4      	subs	r4, r4, r2
 80007b6:	e723      	b.n	8000600 <__aeabi_dadd+0xf4>
 80007b8:	4936      	ldr	r1, [pc, #216]	@ (8000894 <__aeabi_dadd+0x388>)
 80007ba:	428f      	cmp	r7, r1
 80007bc:	d070      	beq.n	80008a0 <__aeabi_dadd+0x394>
 80007be:	2501      	movs	r5, #1
 80007c0:	2a38      	cmp	r2, #56	@ 0x38
 80007c2:	dca8      	bgt.n	8000716 <__aeabi_dadd+0x20a>
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	4653      	mov	r3, sl
 80007c8:	0409      	lsls	r1, r1, #16
 80007ca:	430b      	orrs	r3, r1
 80007cc:	469a      	mov	sl, r3
 80007ce:	e78e      	b.n	80006ee <__aeabi_dadd+0x1e2>
 80007d0:	003c      	movs	r4, r7
 80007d2:	2500      	movs	r5, #0
 80007d4:	2200      	movs	r2, #0
 80007d6:	e731      	b.n	800063c <__aeabi_dadd+0x130>
 80007d8:	2307      	movs	r3, #7
 80007da:	402b      	ands	r3, r5
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x2d6>
 80007e0:	e710      	b.n	8000604 <__aeabi_dadd+0xf8>
 80007e2:	e093      	b.n	800090c <__aeabi_dadd+0x400>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d074      	beq.n	80008d2 <__aeabi_dadd+0x3c6>
 80007e8:	464a      	mov	r2, r9
 80007ea:	1bd2      	subs	r2, r2, r7
 80007ec:	2f00      	cmp	r7, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x2e6>
 80007f0:	e0c7      	b.n	8000982 <__aeabi_dadd+0x476>
 80007f2:	4928      	ldr	r1, [pc, #160]	@ (8000894 <__aeabi_dadd+0x388>)
 80007f4:	4589      	cmp	r9, r1
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x2ee>
 80007f8:	e185      	b.n	8000b06 <__aeabi_dadd+0x5fa>
 80007fa:	2501      	movs	r5, #1
 80007fc:	2a38      	cmp	r2, #56	@ 0x38
 80007fe:	dc12      	bgt.n	8000826 <__aeabi_dadd+0x31a>
 8000800:	2180      	movs	r1, #128	@ 0x80
 8000802:	0409      	lsls	r1, r1, #16
 8000804:	430c      	orrs	r4, r1
 8000806:	2a1f      	cmp	r2, #31
 8000808:	dd00      	ble.n	800080c <__aeabi_dadd+0x300>
 800080a:	e1ab      	b.n	8000b64 <__aeabi_dadd+0x658>
 800080c:	2120      	movs	r1, #32
 800080e:	0025      	movs	r5, r4
 8000810:	1a89      	subs	r1, r1, r2
 8000812:	0007      	movs	r7, r0
 8000814:	4088      	lsls	r0, r1
 8000816:	408d      	lsls	r5, r1
 8000818:	40d7      	lsrs	r7, r2
 800081a:	1e41      	subs	r1, r0, #1
 800081c:	4188      	sbcs	r0, r1
 800081e:	40d4      	lsrs	r4, r2
 8000820:	433d      	orrs	r5, r7
 8000822:	4305      	orrs	r5, r0
 8000824:	44a2      	add	sl, r4
 8000826:	4465      	add	r5, ip
 8000828:	4565      	cmp	r5, ip
 800082a:	4192      	sbcs	r2, r2
 800082c:	4252      	negs	r2, r2
 800082e:	4452      	add	r2, sl
 8000830:	0014      	movs	r4, r2
 8000832:	464f      	mov	r7, r9
 8000834:	e774      	b.n	8000720 <__aeabi_dadd+0x214>
 8000836:	0028      	movs	r0, r5
 8000838:	f000 fa50 	bl	8000cdc <__clzsi2>
 800083c:	0003      	movs	r3, r0
 800083e:	3318      	adds	r3, #24
 8000840:	2b1f      	cmp	r3, #31
 8000842:	dc00      	bgt.n	8000846 <__aeabi_dadd+0x33a>
 8000844:	e6c2      	b.n	80005cc <__aeabi_dadd+0xc0>
 8000846:	002a      	movs	r2, r5
 8000848:	3808      	subs	r0, #8
 800084a:	4082      	lsls	r2, r0
 800084c:	429f      	cmp	r7, r3
 800084e:	dd00      	ble.n	8000852 <__aeabi_dadd+0x346>
 8000850:	e0a9      	b.n	80009a6 <__aeabi_dadd+0x49a>
 8000852:	1bdb      	subs	r3, r3, r7
 8000854:	1c58      	adds	r0, r3, #1
 8000856:	281f      	cmp	r0, #31
 8000858:	dc00      	bgt.n	800085c <__aeabi_dadd+0x350>
 800085a:	e1ac      	b.n	8000bb6 <__aeabi_dadd+0x6aa>
 800085c:	0015      	movs	r5, r2
 800085e:	3b1f      	subs	r3, #31
 8000860:	40dd      	lsrs	r5, r3
 8000862:	2820      	cmp	r0, #32
 8000864:	d005      	beq.n	8000872 <__aeabi_dadd+0x366>
 8000866:	2340      	movs	r3, #64	@ 0x40
 8000868:	1a1b      	subs	r3, r3, r0
 800086a:	409a      	lsls	r2, r3
 800086c:	1e53      	subs	r3, r2, #1
 800086e:	419a      	sbcs	r2, r3
 8000870:	4315      	orrs	r5, r2
 8000872:	2307      	movs	r3, #7
 8000874:	2700      	movs	r7, #0
 8000876:	402b      	ands	r3, r5
 8000878:	e7b0      	b.n	80007dc <__aeabi_dadd+0x2d0>
 800087a:	08ed      	lsrs	r5, r5, #3
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <__aeabi_dadd+0x388>)
 800087e:	0762      	lsls	r2, r4, #29
 8000880:	432a      	orrs	r2, r5
 8000882:	08e4      	lsrs	r4, r4, #3
 8000884:	429f      	cmp	r7, r3
 8000886:	d00f      	beq.n	80008a8 <__aeabi_dadd+0x39c>
 8000888:	0324      	lsls	r4, r4, #12
 800088a:	0b25      	lsrs	r5, r4, #12
 800088c:	057c      	lsls	r4, r7, #21
 800088e:	0d64      	lsrs	r4, r4, #21
 8000890:	e6d4      	b.n	800063c <__aeabi_dadd+0x130>
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	000007ff 	.word	0x000007ff
 8000898:	ff7fffff 	.word	0xff7fffff
 800089c:	000007fe 	.word	0x000007fe
 80008a0:	08c0      	lsrs	r0, r0, #3
 80008a2:	0762      	lsls	r2, r4, #29
 80008a4:	4302      	orrs	r2, r0
 80008a6:	08e4      	lsrs	r4, r4, #3
 80008a8:	0013      	movs	r3, r2
 80008aa:	4323      	orrs	r3, r4
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x3a4>
 80008ae:	e186      	b.n	8000bbe <__aeabi_dadd+0x6b2>
 80008b0:	2580      	movs	r5, #128	@ 0x80
 80008b2:	032d      	lsls	r5, r5, #12
 80008b4:	4325      	orrs	r5, r4
 80008b6:	032d      	lsls	r5, r5, #12
 80008b8:	4cc3      	ldr	r4, [pc, #780]	@ (8000bc8 <__aeabi_dadd+0x6bc>)
 80008ba:	0b2d      	lsrs	r5, r5, #12
 80008bc:	e6be      	b.n	800063c <__aeabi_dadd+0x130>
 80008be:	4660      	mov	r0, ip
 80008c0:	4654      	mov	r4, sl
 80008c2:	000e      	movs	r6, r1
 80008c4:	0017      	movs	r7, r2
 80008c6:	08c5      	lsrs	r5, r0, #3
 80008c8:	e7d8      	b.n	800087c <__aeabi_dadd+0x370>
 80008ca:	4cc0      	ldr	r4, [pc, #768]	@ (8000bcc <__aeabi_dadd+0x6c0>)
 80008cc:	1aff      	subs	r7, r7, r3
 80008ce:	4014      	ands	r4, r2
 80008d0:	e696      	b.n	8000600 <__aeabi_dadd+0xf4>
 80008d2:	4abf      	ldr	r2, [pc, #764]	@ (8000bd0 <__aeabi_dadd+0x6c4>)
 80008d4:	1c79      	adds	r1, r7, #1
 80008d6:	4211      	tst	r1, r2
 80008d8:	d16b      	bne.n	80009b2 <__aeabi_dadd+0x4a6>
 80008da:	0022      	movs	r2, r4
 80008dc:	4302      	orrs	r2, r0
 80008de:	2f00      	cmp	r7, #0
 80008e0:	d000      	beq.n	80008e4 <__aeabi_dadd+0x3d8>
 80008e2:	e0db      	b.n	8000a9c <__aeabi_dadd+0x590>
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x3de>
 80008e8:	e12d      	b.n	8000b46 <__aeabi_dadd+0x63a>
 80008ea:	4662      	mov	r2, ip
 80008ec:	4653      	mov	r3, sl
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x3e8>
 80008f2:	e0b6      	b.n	8000a62 <__aeabi_dadd+0x556>
 80008f4:	4663      	mov	r3, ip
 80008f6:	18c5      	adds	r5, r0, r3
 80008f8:	4285      	cmp	r5, r0
 80008fa:	4180      	sbcs	r0, r0
 80008fc:	4454      	add	r4, sl
 80008fe:	4240      	negs	r0, r0
 8000900:	1824      	adds	r4, r4, r0
 8000902:	0223      	lsls	r3, r4, #8
 8000904:	d502      	bpl.n	800090c <__aeabi_dadd+0x400>
 8000906:	000f      	movs	r7, r1
 8000908:	4bb0      	ldr	r3, [pc, #704]	@ (8000bcc <__aeabi_dadd+0x6c0>)
 800090a:	401c      	ands	r4, r3
 800090c:	003a      	movs	r2, r7
 800090e:	0028      	movs	r0, r5
 8000910:	e7d8      	b.n	80008c4 <__aeabi_dadd+0x3b8>
 8000912:	4662      	mov	r2, ip
 8000914:	1a85      	subs	r5, r0, r2
 8000916:	42a8      	cmp	r0, r5
 8000918:	4192      	sbcs	r2, r2
 800091a:	4653      	mov	r3, sl
 800091c:	4252      	negs	r2, r2
 800091e:	4691      	mov	r9, r2
 8000920:	1ae3      	subs	r3, r4, r3
 8000922:	001a      	movs	r2, r3
 8000924:	464b      	mov	r3, r9
 8000926:	1ad2      	subs	r2, r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	4691      	mov	r9, r2
 800092c:	021a      	lsls	r2, r3, #8
 800092e:	d454      	bmi.n	80009da <__aeabi_dadd+0x4ce>
 8000930:	464a      	mov	r2, r9
 8000932:	464c      	mov	r4, r9
 8000934:	432a      	orrs	r2, r5
 8000936:	d000      	beq.n	800093a <__aeabi_dadd+0x42e>
 8000938:	e640      	b.n	80005bc <__aeabi_dadd+0xb0>
 800093a:	2600      	movs	r6, #0
 800093c:	2400      	movs	r4, #0
 800093e:	2500      	movs	r5, #0
 8000940:	e67c      	b.n	800063c <__aeabi_dadd+0x130>
 8000942:	4da1      	ldr	r5, [pc, #644]	@ (8000bc8 <__aeabi_dadd+0x6bc>)
 8000944:	45a9      	cmp	r9, r5
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x43e>
 8000948:	e090      	b.n	8000a6c <__aeabi_dadd+0x560>
 800094a:	2501      	movs	r5, #1
 800094c:	2a38      	cmp	r2, #56	@ 0x38
 800094e:	dd00      	ble.n	8000952 <__aeabi_dadd+0x446>
 8000950:	e6ab      	b.n	80006aa <__aeabi_dadd+0x19e>
 8000952:	2580      	movs	r5, #128	@ 0x80
 8000954:	042d      	lsls	r5, r5, #16
 8000956:	432c      	orrs	r4, r5
 8000958:	e695      	b.n	8000686 <__aeabi_dadd+0x17a>
 800095a:	0011      	movs	r1, r2
 800095c:	4655      	mov	r5, sl
 800095e:	3920      	subs	r1, #32
 8000960:	40cd      	lsrs	r5, r1
 8000962:	46a9      	mov	r9, r5
 8000964:	2a20      	cmp	r2, #32
 8000966:	d006      	beq.n	8000976 <__aeabi_dadd+0x46a>
 8000968:	2140      	movs	r1, #64	@ 0x40
 800096a:	4653      	mov	r3, sl
 800096c:	1a8a      	subs	r2, r1, r2
 800096e:	4093      	lsls	r3, r2
 8000970:	4662      	mov	r2, ip
 8000972:	431a      	orrs	r2, r3
 8000974:	4694      	mov	ip, r2
 8000976:	4665      	mov	r5, ip
 8000978:	1e6b      	subs	r3, r5, #1
 800097a:	419d      	sbcs	r5, r3
 800097c:	464b      	mov	r3, r9
 800097e:	431d      	orrs	r5, r3
 8000980:	e612      	b.n	80005a8 <__aeabi_dadd+0x9c>
 8000982:	0021      	movs	r1, r4
 8000984:	4301      	orrs	r1, r0
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x47e>
 8000988:	e0c4      	b.n	8000b14 <__aeabi_dadd+0x608>
 800098a:	1e51      	subs	r1, r2, #1
 800098c:	2a01      	cmp	r2, #1
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x486>
 8000990:	e0fb      	b.n	8000b8a <__aeabi_dadd+0x67e>
 8000992:	4d8d      	ldr	r5, [pc, #564]	@ (8000bc8 <__aeabi_dadd+0x6bc>)
 8000994:	42aa      	cmp	r2, r5
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x48e>
 8000998:	e0b5      	b.n	8000b06 <__aeabi_dadd+0x5fa>
 800099a:	2501      	movs	r5, #1
 800099c:	2938      	cmp	r1, #56	@ 0x38
 800099e:	dd00      	ble.n	80009a2 <__aeabi_dadd+0x496>
 80009a0:	e741      	b.n	8000826 <__aeabi_dadd+0x31a>
 80009a2:	000a      	movs	r2, r1
 80009a4:	e72f      	b.n	8000806 <__aeabi_dadd+0x2fa>
 80009a6:	4c89      	ldr	r4, [pc, #548]	@ (8000bcc <__aeabi_dadd+0x6c0>)
 80009a8:	1aff      	subs	r7, r7, r3
 80009aa:	4014      	ands	r4, r2
 80009ac:	0762      	lsls	r2, r4, #29
 80009ae:	08e4      	lsrs	r4, r4, #3
 80009b0:	e76a      	b.n	8000888 <__aeabi_dadd+0x37c>
 80009b2:	4a85      	ldr	r2, [pc, #532]	@ (8000bc8 <__aeabi_dadd+0x6bc>)
 80009b4:	4291      	cmp	r1, r2
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x4ae>
 80009b8:	e0e3      	b.n	8000b82 <__aeabi_dadd+0x676>
 80009ba:	4663      	mov	r3, ip
 80009bc:	18c2      	adds	r2, r0, r3
 80009be:	4282      	cmp	r2, r0
 80009c0:	4180      	sbcs	r0, r0
 80009c2:	0023      	movs	r3, r4
 80009c4:	4240      	negs	r0, r0
 80009c6:	4453      	add	r3, sl
 80009c8:	181b      	adds	r3, r3, r0
 80009ca:	07dd      	lsls	r5, r3, #31
 80009cc:	085c      	lsrs	r4, r3, #1
 80009ce:	2307      	movs	r3, #7
 80009d0:	0852      	lsrs	r2, r2, #1
 80009d2:	4315      	orrs	r5, r2
 80009d4:	000f      	movs	r7, r1
 80009d6:	402b      	ands	r3, r5
 80009d8:	e700      	b.n	80007dc <__aeabi_dadd+0x2d0>
 80009da:	4663      	mov	r3, ip
 80009dc:	1a1d      	subs	r5, r3, r0
 80009de:	45ac      	cmp	ip, r5
 80009e0:	4192      	sbcs	r2, r2
 80009e2:	4653      	mov	r3, sl
 80009e4:	4252      	negs	r2, r2
 80009e6:	1b1c      	subs	r4, r3, r4
 80009e8:	000e      	movs	r6, r1
 80009ea:	4688      	mov	r8, r1
 80009ec:	1aa4      	subs	r4, r4, r2
 80009ee:	e5e5      	b.n	80005bc <__aeabi_dadd+0xb0>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dadd+0x4ea>
 80009f4:	e091      	b.n	8000b1a <__aeabi_dadd+0x60e>
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d138      	bne.n	8000a6c <__aeabi_dadd+0x560>
 80009fa:	2480      	movs	r4, #128	@ 0x80
 80009fc:	2600      	movs	r6, #0
 80009fe:	0324      	lsls	r4, r4, #12
 8000a00:	e756      	b.n	80008b0 <__aeabi_dadd+0x3a4>
 8000a02:	4663      	mov	r3, ip
 8000a04:	18c5      	adds	r5, r0, r3
 8000a06:	4285      	cmp	r5, r0
 8000a08:	4180      	sbcs	r0, r0
 8000a0a:	4454      	add	r4, sl
 8000a0c:	4240      	negs	r0, r0
 8000a0e:	1824      	adds	r4, r4, r0
 8000a10:	2701      	movs	r7, #1
 8000a12:	0223      	lsls	r3, r4, #8
 8000a14:	d400      	bmi.n	8000a18 <__aeabi_dadd+0x50c>
 8000a16:	e6df      	b.n	80007d8 <__aeabi_dadd+0x2cc>
 8000a18:	2702      	movs	r7, #2
 8000a1a:	e687      	b.n	800072c <__aeabi_dadd+0x220>
 8000a1c:	4663      	mov	r3, ip
 8000a1e:	1ac5      	subs	r5, r0, r3
 8000a20:	42a8      	cmp	r0, r5
 8000a22:	4180      	sbcs	r0, r0
 8000a24:	4653      	mov	r3, sl
 8000a26:	4240      	negs	r0, r0
 8000a28:	1ae4      	subs	r4, r4, r3
 8000a2a:	2701      	movs	r7, #1
 8000a2c:	1a24      	subs	r4, r4, r0
 8000a2e:	e5c0      	b.n	80005b2 <__aeabi_dadd+0xa6>
 8000a30:	0762      	lsls	r2, r4, #29
 8000a32:	08c0      	lsrs	r0, r0, #3
 8000a34:	4302      	orrs	r2, r0
 8000a36:	08e4      	lsrs	r4, r4, #3
 8000a38:	e736      	b.n	80008a8 <__aeabi_dadd+0x39c>
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	3920      	subs	r1, #32
 8000a40:	40cb      	lsrs	r3, r1
 8000a42:	4699      	mov	r9, r3
 8000a44:	2a20      	cmp	r2, #32
 8000a46:	d006      	beq.n	8000a56 <__aeabi_dadd+0x54a>
 8000a48:	2140      	movs	r1, #64	@ 0x40
 8000a4a:	4653      	mov	r3, sl
 8000a4c:	1a8a      	subs	r2, r1, r2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	4662      	mov	r2, ip
 8000a52:	431a      	orrs	r2, r3
 8000a54:	4694      	mov	ip, r2
 8000a56:	4665      	mov	r5, ip
 8000a58:	1e6b      	subs	r3, r5, #1
 8000a5a:	419d      	sbcs	r5, r3
 8000a5c:	464b      	mov	r3, r9
 8000a5e:	431d      	orrs	r5, r3
 8000a60:	e659      	b.n	8000716 <__aeabi_dadd+0x20a>
 8000a62:	0762      	lsls	r2, r4, #29
 8000a64:	08c0      	lsrs	r0, r0, #3
 8000a66:	4302      	orrs	r2, r0
 8000a68:	08e4      	lsrs	r4, r4, #3
 8000a6a:	e70d      	b.n	8000888 <__aeabi_dadd+0x37c>
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	075a      	lsls	r2, r3, #29
 8000a70:	4663      	mov	r3, ip
 8000a72:	08d8      	lsrs	r0, r3, #3
 8000a74:	4653      	mov	r3, sl
 8000a76:	000e      	movs	r6, r1
 8000a78:	4302      	orrs	r2, r0
 8000a7a:	08dc      	lsrs	r4, r3, #3
 8000a7c:	e714      	b.n	80008a8 <__aeabi_dadd+0x39c>
 8000a7e:	0015      	movs	r5, r2
 8000a80:	0026      	movs	r6, r4
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ee      	lsrs	r6, r5
 8000a86:	2a20      	cmp	r2, #32
 8000a88:	d003      	beq.n	8000a92 <__aeabi_dadd+0x586>
 8000a8a:	2540      	movs	r5, #64	@ 0x40
 8000a8c:	1aaa      	subs	r2, r5, r2
 8000a8e:	4094      	lsls	r4, r2
 8000a90:	4320      	orrs	r0, r4
 8000a92:	1e42      	subs	r2, r0, #1
 8000a94:	4190      	sbcs	r0, r2
 8000a96:	0005      	movs	r5, r0
 8000a98:	4335      	orrs	r5, r6
 8000a9a:	e606      	b.n	80006aa <__aeabi_dadd+0x19e>
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d07c      	beq.n	8000b9a <__aeabi_dadd+0x68e>
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	08c0      	lsrs	r0, r0, #3
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dadd+0x5a0>
 8000aaa:	e6fa      	b.n	80008a2 <__aeabi_dadd+0x396>
 8000aac:	0762      	lsls	r2, r4, #29
 8000aae:	4310      	orrs	r0, r2
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	08e4      	lsrs	r4, r4, #3
 8000ab4:	0312      	lsls	r2, r2, #12
 8000ab6:	4214      	tst	r4, r2
 8000ab8:	d008      	beq.n	8000acc <__aeabi_dadd+0x5c0>
 8000aba:	08d9      	lsrs	r1, r3, #3
 8000abc:	4211      	tst	r1, r2
 8000abe:	d105      	bne.n	8000acc <__aeabi_dadd+0x5c0>
 8000ac0:	4663      	mov	r3, ip
 8000ac2:	08d8      	lsrs	r0, r3, #3
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	075b      	lsls	r3, r3, #29
 8000aca:	4318      	orrs	r0, r3
 8000acc:	0f42      	lsrs	r2, r0, #29
 8000ace:	00c0      	lsls	r0, r0, #3
 8000ad0:	08c0      	lsrs	r0, r0, #3
 8000ad2:	0752      	lsls	r2, r2, #29
 8000ad4:	4302      	orrs	r2, r0
 8000ad6:	e6e7      	b.n	80008a8 <__aeabi_dadd+0x39c>
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x5d2>
 8000adc:	e72d      	b.n	800093a <__aeabi_dadd+0x42e>
 8000ade:	4663      	mov	r3, ip
 8000ae0:	08d8      	lsrs	r0, r3, #3
 8000ae2:	4653      	mov	r3, sl
 8000ae4:	075a      	lsls	r2, r3, #29
 8000ae6:	000e      	movs	r6, r1
 8000ae8:	4302      	orrs	r2, r0
 8000aea:	08dc      	lsrs	r4, r3, #3
 8000aec:	e6cc      	b.n	8000888 <__aeabi_dadd+0x37c>
 8000aee:	4663      	mov	r3, ip
 8000af0:	1a1d      	subs	r5, r3, r0
 8000af2:	45ac      	cmp	ip, r5
 8000af4:	4192      	sbcs	r2, r2
 8000af6:	4653      	mov	r3, sl
 8000af8:	4252      	negs	r2, r2
 8000afa:	1b1c      	subs	r4, r3, r4
 8000afc:	000e      	movs	r6, r1
 8000afe:	4688      	mov	r8, r1
 8000b00:	1aa4      	subs	r4, r4, r2
 8000b02:	3701      	adds	r7, #1
 8000b04:	e555      	b.n	80005b2 <__aeabi_dadd+0xa6>
 8000b06:	4663      	mov	r3, ip
 8000b08:	08d9      	lsrs	r1, r3, #3
 8000b0a:	4653      	mov	r3, sl
 8000b0c:	075a      	lsls	r2, r3, #29
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	08dc      	lsrs	r4, r3, #3
 8000b12:	e6c9      	b.n	80008a8 <__aeabi_dadd+0x39c>
 8000b14:	4660      	mov	r0, ip
 8000b16:	4654      	mov	r4, sl
 8000b18:	e6d4      	b.n	80008c4 <__aeabi_dadd+0x3b8>
 8000b1a:	08c0      	lsrs	r0, r0, #3
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x616>
 8000b20:	e6bf      	b.n	80008a2 <__aeabi_dadd+0x396>
 8000b22:	0762      	lsls	r2, r4, #29
 8000b24:	4310      	orrs	r0, r2
 8000b26:	2280      	movs	r2, #128	@ 0x80
 8000b28:	08e4      	lsrs	r4, r4, #3
 8000b2a:	0312      	lsls	r2, r2, #12
 8000b2c:	4214      	tst	r4, r2
 8000b2e:	d0cd      	beq.n	8000acc <__aeabi_dadd+0x5c0>
 8000b30:	08dd      	lsrs	r5, r3, #3
 8000b32:	4215      	tst	r5, r2
 8000b34:	d1ca      	bne.n	8000acc <__aeabi_dadd+0x5c0>
 8000b36:	4663      	mov	r3, ip
 8000b38:	08d8      	lsrs	r0, r3, #3
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	075b      	lsls	r3, r3, #29
 8000b3e:	000e      	movs	r6, r1
 8000b40:	002c      	movs	r4, r5
 8000b42:	4318      	orrs	r0, r3
 8000b44:	e7c2      	b.n	8000acc <__aeabi_dadd+0x5c0>
 8000b46:	4663      	mov	r3, ip
 8000b48:	08d9      	lsrs	r1, r3, #3
 8000b4a:	4653      	mov	r3, sl
 8000b4c:	075a      	lsls	r2, r3, #29
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	08dc      	lsrs	r4, r3, #3
 8000b52:	e699      	b.n	8000888 <__aeabi_dadd+0x37c>
 8000b54:	4663      	mov	r3, ip
 8000b56:	08d8      	lsrs	r0, r3, #3
 8000b58:	4653      	mov	r3, sl
 8000b5a:	075a      	lsls	r2, r3, #29
 8000b5c:	000e      	movs	r6, r1
 8000b5e:	4302      	orrs	r2, r0
 8000b60:	08dc      	lsrs	r4, r3, #3
 8000b62:	e6a1      	b.n	80008a8 <__aeabi_dadd+0x39c>
 8000b64:	0011      	movs	r1, r2
 8000b66:	0027      	movs	r7, r4
 8000b68:	3920      	subs	r1, #32
 8000b6a:	40cf      	lsrs	r7, r1
 8000b6c:	2a20      	cmp	r2, #32
 8000b6e:	d003      	beq.n	8000b78 <__aeabi_dadd+0x66c>
 8000b70:	2140      	movs	r1, #64	@ 0x40
 8000b72:	1a8a      	subs	r2, r1, r2
 8000b74:	4094      	lsls	r4, r2
 8000b76:	4320      	orrs	r0, r4
 8000b78:	1e42      	subs	r2, r0, #1
 8000b7a:	4190      	sbcs	r0, r2
 8000b7c:	0005      	movs	r5, r0
 8000b7e:	433d      	orrs	r5, r7
 8000b80:	e651      	b.n	8000826 <__aeabi_dadd+0x31a>
 8000b82:	000c      	movs	r4, r1
 8000b84:	2500      	movs	r5, #0
 8000b86:	2200      	movs	r2, #0
 8000b88:	e558      	b.n	800063c <__aeabi_dadd+0x130>
 8000b8a:	4460      	add	r0, ip
 8000b8c:	4560      	cmp	r0, ip
 8000b8e:	4192      	sbcs	r2, r2
 8000b90:	4454      	add	r4, sl
 8000b92:	4252      	negs	r2, r2
 8000b94:	0005      	movs	r5, r0
 8000b96:	18a4      	adds	r4, r4, r2
 8000b98:	e73a      	b.n	8000a10 <__aeabi_dadd+0x504>
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	075a      	lsls	r2, r3, #29
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	08d9      	lsrs	r1, r3, #3
 8000ba2:	4653      	mov	r3, sl
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	08dc      	lsrs	r4, r3, #3
 8000ba8:	e67e      	b.n	80008a8 <__aeabi_dadd+0x39c>
 8000baa:	001a      	movs	r2, r3
 8000bac:	001c      	movs	r4, r3
 8000bae:	432a      	orrs	r2, r5
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_dadd+0x6a8>
 8000bb2:	e6ab      	b.n	800090c <__aeabi_dadd+0x400>
 8000bb4:	e6c1      	b.n	800093a <__aeabi_dadd+0x42e>
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	2500      	movs	r5, #0
 8000bba:	1a09      	subs	r1, r1, r0
 8000bbc:	e519      	b.n	80005f2 <__aeabi_dadd+0xe6>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	4c01      	ldr	r4, [pc, #4]	@ (8000bc8 <__aeabi_dadd+0x6bc>)
 8000bc4:	e53a      	b.n	800063c <__aeabi_dadd+0x130>
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	000007ff 	.word	0x000007ff
 8000bcc:	ff7fffff 	.word	0xff7fffff
 8000bd0:	000007fe 	.word	0x000007fe

08000bd4 <__aeabi_d2iz>:
 8000bd4:	000b      	movs	r3, r1
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4d16      	ldr	r5, [pc, #88]	@ (8000c34 <__aeabi_d2iz+0x60>)
 8000bdc:	030c      	lsls	r4, r1, #12
 8000bde:	b082      	sub	sp, #8
 8000be0:	0049      	lsls	r1, r1, #1
 8000be2:	2000      	movs	r0, #0
 8000be4:	9200      	str	r2, [sp, #0]
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	0b24      	lsrs	r4, r4, #12
 8000bea:	0d49      	lsrs	r1, r1, #21
 8000bec:	0fde      	lsrs	r6, r3, #31
 8000bee:	42a9      	cmp	r1, r5
 8000bf0:	dd04      	ble.n	8000bfc <__aeabi_d2iz+0x28>
 8000bf2:	4811      	ldr	r0, [pc, #68]	@ (8000c38 <__aeabi_d2iz+0x64>)
 8000bf4:	4281      	cmp	r1, r0
 8000bf6:	dd03      	ble.n	8000c00 <__aeabi_d2iz+0x2c>
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <__aeabi_d2iz+0x68>)
 8000bfa:	18f0      	adds	r0, r6, r3
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	2080      	movs	r0, #128	@ 0x80
 8000c02:	0340      	lsls	r0, r0, #13
 8000c04:	4320      	orrs	r0, r4
 8000c06:	4c0e      	ldr	r4, [pc, #56]	@ (8000c40 <__aeabi_d2iz+0x6c>)
 8000c08:	1a64      	subs	r4, r4, r1
 8000c0a:	2c1f      	cmp	r4, #31
 8000c0c:	dd08      	ble.n	8000c20 <__aeabi_d2iz+0x4c>
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <__aeabi_d2iz+0x70>)
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	0003      	movs	r3, r0
 8000c16:	4258      	negs	r0, r3
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d1ef      	bne.n	8000bfc <__aeabi_d2iz+0x28>
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	e7ed      	b.n	8000bfc <__aeabi_d2iz+0x28>
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <__aeabi_d2iz+0x74>)
 8000c22:	9a00      	ldr	r2, [sp, #0]
 8000c24:	469c      	mov	ip, r3
 8000c26:	0003      	movs	r3, r0
 8000c28:	4461      	add	r1, ip
 8000c2a:	408b      	lsls	r3, r1
 8000c2c:	40e2      	lsrs	r2, r4
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	e7f1      	b.n	8000c16 <__aeabi_d2iz+0x42>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	000003fe 	.word	0x000003fe
 8000c38:	0000041d 	.word	0x0000041d
 8000c3c:	7fffffff 	.word	0x7fffffff
 8000c40:	00000433 	.word	0x00000433
 8000c44:	00000413 	.word	0x00000413
 8000c48:	fffffbed 	.word	0xfffffbed

08000c4c <__aeabi_f2d>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	0043      	lsls	r3, r0, #1
 8000c52:	0fc4      	lsrs	r4, r0, #31
 8000c54:	20fe      	movs	r0, #254	@ 0xfe
 8000c56:	0e1b      	lsrs	r3, r3, #24
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	0a55      	lsrs	r5, r2, #9
 8000c5c:	4208      	tst	r0, r1
 8000c5e:	d00c      	beq.n	8000c7a <__aeabi_f2d+0x2e>
 8000c60:	21e0      	movs	r1, #224	@ 0xe0
 8000c62:	0089      	lsls	r1, r1, #2
 8000c64:	468c      	mov	ip, r1
 8000c66:	076d      	lsls	r5, r5, #29
 8000c68:	0b12      	lsrs	r2, r2, #12
 8000c6a:	4463      	add	r3, ip
 8000c6c:	051b      	lsls	r3, r3, #20
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	07e4      	lsls	r4, r4, #31
 8000c72:	4323      	orrs	r3, r4
 8000c74:	0028      	movs	r0, r5
 8000c76:	0019      	movs	r1, r3
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d114      	bne.n	8000ca8 <__aeabi_f2d+0x5c>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d01b      	beq.n	8000cba <__aeabi_f2d+0x6e>
 8000c82:	0028      	movs	r0, r5
 8000c84:	f000 f82a 	bl	8000cdc <__clzsi2>
 8000c88:	280a      	cmp	r0, #10
 8000c8a:	dc1c      	bgt.n	8000cc6 <__aeabi_f2d+0x7a>
 8000c8c:	230b      	movs	r3, #11
 8000c8e:	002a      	movs	r2, r5
 8000c90:	1a1b      	subs	r3, r3, r0
 8000c92:	40da      	lsrs	r2, r3
 8000c94:	0003      	movs	r3, r0
 8000c96:	3315      	adds	r3, #21
 8000c98:	409d      	lsls	r5, r3
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <__aeabi_f2d+0x88>)
 8000c9c:	0312      	lsls	r2, r2, #12
 8000c9e:	1a1b      	subs	r3, r3, r0
 8000ca0:	055b      	lsls	r3, r3, #21
 8000ca2:	0b12      	lsrs	r2, r2, #12
 8000ca4:	0d5b      	lsrs	r3, r3, #21
 8000ca6:	e7e1      	b.n	8000c6c <__aeabi_f2d+0x20>
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d009      	beq.n	8000cc0 <__aeabi_f2d+0x74>
 8000cac:	0b13      	lsrs	r3, r2, #12
 8000cae:	2280      	movs	r2, #128	@ 0x80
 8000cb0:	0312      	lsls	r2, r2, #12
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	076d      	lsls	r5, r5, #29
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <__aeabi_f2d+0x8c>)
 8000cb8:	e7d8      	b.n	8000c6c <__aeabi_f2d+0x20>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	e7d5      	b.n	8000c6c <__aeabi_f2d+0x20>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <__aeabi_f2d+0x8c>)
 8000cc4:	e7d2      	b.n	8000c6c <__aeabi_f2d+0x20>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	002a      	movs	r2, r5
 8000cca:	3b0b      	subs	r3, #11
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	2500      	movs	r5, #0
 8000cd0:	e7e3      	b.n	8000c9a <__aeabi_f2d+0x4e>
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	00000389 	.word	0x00000389
 8000cd8:	000007ff 	.word	0x000007ff

08000cdc <__clzsi2>:
 8000cdc:	211c      	movs	r1, #28
 8000cde:	2301      	movs	r3, #1
 8000ce0:	041b      	lsls	r3, r3, #16
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d301      	bcc.n	8000cea <__clzsi2+0xe>
 8000ce6:	0c00      	lsrs	r0, r0, #16
 8000ce8:	3910      	subs	r1, #16
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	4298      	cmp	r0, r3
 8000cee:	d301      	bcc.n	8000cf4 <__clzsi2+0x18>
 8000cf0:	0a00      	lsrs	r0, r0, #8
 8000cf2:	3908      	subs	r1, #8
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	4298      	cmp	r0, r3
 8000cf8:	d301      	bcc.n	8000cfe <__clzsi2+0x22>
 8000cfa:	0900      	lsrs	r0, r0, #4
 8000cfc:	3904      	subs	r1, #4
 8000cfe:	a202      	add	r2, pc, #8	@ (adr r2, 8000d08 <__clzsi2+0x2c>)
 8000d00:	5c10      	ldrb	r0, [r2, r0]
 8000d02:	1840      	adds	r0, r0, r1
 8000d04:	4770      	bx	lr
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	02020304 	.word	0x02020304
 8000d0c:	01010101 	.word	0x01010101
	...

08000d18 <lcdPrint.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
void lcdPrint(uint8_t x, uint8_t y, char message[], uint8_t fontsize){
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0004      	movs	r4, r0
 8000d20:	0008      	movs	r0, r1
 8000d22:	60ba      	str	r2, [r7, #8]
 8000d24:	0019      	movs	r1, r3
 8000d26:	250f      	movs	r5, #15
 8000d28:	197b      	adds	r3, r7, r5
 8000d2a:	1c22      	adds	r2, r4, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	240e      	movs	r4, #14
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	1c02      	adds	r2, r0, #0
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	260d      	movs	r6, #13
 8000d38:	19bb      	adds	r3, r7, r6
 8000d3a:	1c0a      	adds	r2, r1, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	4663      	mov	r3, ip
 8000d40:	607b      	str	r3, [r7, #4]
	SSD1306_GotoXY(X0 + x, y);
 8000d42:	197b      	adds	r3, r7, r5
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3302      	adds	r3, #2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	0019      	movs	r1, r3
 8000d54:	0010      	movs	r0, r2
 8000d56:	f002 fb75 	bl	8003444 <SSD1306_GotoXY>
	if 		(fontsize == 1) {SSD1306_Puts(message , &Font_7x10, 1);}
 8000d5a:	19bb      	adds	r3, r7, r6
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d106      	bne.n	8000d70 <lcdPrint.0+0x58>
 8000d62:	4923      	ldr	r1, [pc, #140]	@ (8000df0 <lcdPrint.0+0xd8>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2201      	movs	r2, #1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f002 fc05 	bl	8003578 <SSD1306_Puts>
	else if (fontsize == 2) {SSD1306_Puts(message , &Font_11x18, 1);}
	else if (fontsize == 3) {SSD1306_Puts(message , &Font_16x26, 1);}
	else if	(fontsize == 10) {SSD1306_Puts(message , &Font_7x10, 0);}
	else if (fontsize == 20) {SSD1306_Puts(message , &Font_11x18, 0);}
	else if (fontsize == 30) {SSD1306_Puts(message , &Font_16x26, 0);}
}
 8000d6e:	e03a      	b.n	8000de6 <lcdPrint.0+0xce>
	else if (fontsize == 2) {SSD1306_Puts(message , &Font_11x18, 1);}
 8000d70:	230d      	movs	r3, #13
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d106      	bne.n	8000d88 <lcdPrint.0+0x70>
 8000d7a:	491e      	ldr	r1, [pc, #120]	@ (8000df4 <lcdPrint.0+0xdc>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	0018      	movs	r0, r3
 8000d82:	f002 fbf9 	bl	8003578 <SSD1306_Puts>
}
 8000d86:	e02e      	b.n	8000de6 <lcdPrint.0+0xce>
	else if (fontsize == 3) {SSD1306_Puts(message , &Font_16x26, 1);}
 8000d88:	230d      	movs	r3, #13
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d106      	bne.n	8000da0 <lcdPrint.0+0x88>
 8000d92:	4919      	ldr	r1, [pc, #100]	@ (8000df8 <lcdPrint.0+0xe0>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2201      	movs	r2, #1
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 fbed 	bl	8003578 <SSD1306_Puts>
}
 8000d9e:	e022      	b.n	8000de6 <lcdPrint.0+0xce>
	else if	(fontsize == 10) {SSD1306_Puts(message , &Font_7x10, 0);}
 8000da0:	230d      	movs	r3, #13
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d106      	bne.n	8000db8 <lcdPrint.0+0xa0>
 8000daa:	4911      	ldr	r1, [pc, #68]	@ (8000df0 <lcdPrint.0+0xd8>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2200      	movs	r2, #0
 8000db0:	0018      	movs	r0, r3
 8000db2:	f002 fbe1 	bl	8003578 <SSD1306_Puts>
}
 8000db6:	e016      	b.n	8000de6 <lcdPrint.0+0xce>
	else if (fontsize == 20) {SSD1306_Puts(message , &Font_11x18, 0);}
 8000db8:	230d      	movs	r3, #13
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b14      	cmp	r3, #20
 8000dc0:	d106      	bne.n	8000dd0 <lcdPrint.0+0xb8>
 8000dc2:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <lcdPrint.0+0xdc>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 fbd5 	bl	8003578 <SSD1306_Puts>
}
 8000dce:	e00a      	b.n	8000de6 <lcdPrint.0+0xce>
	else if (fontsize == 30) {SSD1306_Puts(message , &Font_16x26, 0);}
 8000dd0:	230d      	movs	r3, #13
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b1e      	cmp	r3, #30
 8000dd8:	d105      	bne.n	8000de6 <lcdPrint.0+0xce>
 8000dda:	4907      	ldr	r1, [pc, #28]	@ (8000df8 <lcdPrint.0+0xe0>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	2200      	movs	r2, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 fbc9 	bl	8003578 <SSD1306_Puts>
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b005      	add	sp, #20
 8000dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000010 	.word	0x20000010

08000dfc <main>:
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
int main(void)
 8000e02:	2318      	movs	r3, #24
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  	HAL_Init();
 8000e08:	f002 ff5c 	bl	8003cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  	SystemClock_Config();
 8000e0c:	f002 f81a 	bl	8002e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  	MX_GPIO_Init();
 8000e10:	f002 f8ee 	bl	8002ff0 <MX_GPIO_Init>
  	MX_I2C1_Init();
 8000e14:	f002 f87c 	bl	8002f10 <MX_I2C1_Init>
  	MX_USART2_UART_Init();
 8000e18:	f002 f8ba 	bl	8002f90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(1000);
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	48cb      	ldr	r0, [pc, #812]	@ (8001150 <main+0x354>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	0019      	movs	r1, r3
 8000e26:	f003 fa16 	bl	8004256 <HAL_GPIO_WritePin>
	SSD1306_Init();
 8000e2a:	f002 f97b 	bl	8003124 <SSD1306_Init>
	lcdPrint(35, 0, "BOBER", 2);
 8000e2e:	4ac9      	ldr	r2, [pc, #804]	@ (8001154 <main+0x358>)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	469c      	mov	ip, r3
 8000e34:	2302      	movs	r3, #2
 8000e36:	2100      	movs	r1, #0
 8000e38:	2023      	movs	r0, #35	@ 0x23
 8000e3a:	f7ff ff6d 	bl	8000d18 <lcdPrint.0>
	lcdPrint(35, 19, "KURWA", 2);
 8000e3e:	4ac6      	ldr	r2, [pc, #792]	@ (8001158 <main+0x35c>)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	469c      	mov	ip, r3
 8000e44:	2302      	movs	r3, #2
 8000e46:	2113      	movs	r1, #19
 8000e48:	2023      	movs	r0, #35	@ 0x23
 8000e4a:	f7ff ff65 	bl	8000d18 <lcdPrint.0>
	lcdPrint(9, 38, "TESTER v13", 2);
 8000e4e:	4ac3      	ldr	r2, [pc, #780]	@ (800115c <main+0x360>)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	469c      	mov	ip, r3
 8000e54:	2302      	movs	r3, #2
 8000e56:	2126      	movs	r1, #38	@ 0x26
 8000e58:	2009      	movs	r0, #9
 8000e5a:	f7ff ff5d 	bl	8000d18 <lcdPrint.0>
	SSD1306_UpdateScreen();
 8000e5e:	f002 fa25 	bl	80032ac <SSD1306_UpdateScreen>
	HAL_Delay(500);
 8000e62:	23fa      	movs	r3, #250	@ 0xfa
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	0018      	movs	r0, r3
 8000e68:	f002 ff90 	bl	8003d8c <HAL_Delay>
	SSD1306_Clear();
 8000e6c:	f002 fd39 	bl	80038e2 <SSD1306_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1){
	uint32_t ms = HAL_GetTick();
 8000e70:	f002 ff82 	bl	8003d78 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]
	_Bool key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	015b      	lsls	r3, r3, #5
 8000e7c:	4ab4      	ldr	r2, [pc, #720]	@ (8001150 <main+0x354>)
 8000e7e:	0019      	movs	r1, r3
 8000e80:	0010      	movs	r0, r2
 8000e82:	f003 f9cb 	bl	800421c <HAL_GPIO_ReadPin>
 8000e86:	0003      	movs	r3, r0
 8000e88:	001a      	movs	r2, r3
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	183b      	adds	r3, r7, r0
 8000e8e:	1e51      	subs	r1, r2, #1
 8000e90:	418a      	sbcs	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
	if(key1_state == 0 && !short_state && (ms - time_key1) > 50) {short_state = 1; long_state = 0; time_key1 = ms;}
 8000e94:	183b      	adds	r3, r7, r0
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4053      	eors	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d016      	beq.n	8000ed0 <main+0xd4>
 8000ea2:	4baf      	ldr	r3, [pc, #700]	@ (8001160 <main+0x364>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4053      	eors	r3, r2
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00f      	beq.n	8000ed0 <main+0xd4>
 8000eb0:	4bac      	ldr	r3, [pc, #688]	@ (8001164 <main+0x368>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b32      	cmp	r3, #50	@ 0x32
 8000eba:	d909      	bls.n	8000ed0 <main+0xd4>
 8000ebc:	4ba8      	ldr	r3, [pc, #672]	@ (8001160 <main+0x364>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	4ba9      	ldr	r3, [pc, #676]	@ (8001168 <main+0x36c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	4ba6      	ldr	r3, [pc, #664]	@ (8001164 <main+0x368>)
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e271      	b.n	80013b4 <main+0x5b8>
	else if(key1_state == 0 && !long_state && (ms - time_key1) > 500){// действие на длинное нажатие
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4053      	eors	r3, r2
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d100      	bne.n	8000ee2 <main+0xe6>
 8000ee0:	e1de      	b.n	80012a0 <main+0x4a4>
 8000ee2:	4ba1      	ldr	r3, [pc, #644]	@ (8001168 <main+0x36c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4053      	eors	r3, r2
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d100      	bne.n	8000ef2 <main+0xf6>
 8000ef0:	e1d6      	b.n	80012a0 <main+0x4a4>
 8000ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8001164 <main+0x368>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	23fa      	movs	r3, #250	@ 0xfa
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d800      	bhi.n	8000f04 <main+0x108>
 8000f02:	e1cd      	b.n	80012a0 <main+0x4a4>
		long_state = 1;
 8000f04:	4b98      	ldr	r3, [pc, #608]	@ (8001168 <main+0x36c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]

		if 		(page == 0 && selected == 7)	 {calibRestriction = 6;}//снять ограничение на калибровку
 8000f0a:	4b98      	ldr	r3, [pc, #608]	@ (800116c <main+0x370>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d106      	bne.n	8000f20 <main+0x124>
 8000f12:	4b97      	ldr	r3, [pc, #604]	@ (8001170 <main+0x374>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	d102      	bne.n	8000f20 <main+0x124>
 8000f1a:	4b96      	ldr	r3, [pc, #600]	@ (8001174 <main+0x378>)
 8000f1c:	2206      	movs	r2, #6
 8000f1e:	701a      	strb	r2, [r3, #0]
		if 		(page == 0)						{page = 1; selected = 1; SSD1306_Clear();}//to menu
 8000f20:	4b92      	ldr	r3, [pc, #584]	@ (800116c <main+0x370>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d108      	bne.n	8000f3a <main+0x13e>
 8000f28:	4b90      	ldr	r3, [pc, #576]	@ (800116c <main+0x370>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	4b90      	ldr	r3, [pc, #576]	@ (8001170 <main+0x374>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	f002 fcd5 	bl	80038e2 <SSD1306_Clear>
 8000f38:	e23b      	b.n	80013b2 <main+0x5b6>

		else if 	(page == 1 && selected == 0)	{page = 0; selected = 0; SSD1306_Clear();}//exit
 8000f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800116c <main+0x370>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10c      	bne.n	8000f5c <main+0x160>
 8000f42:	4b8b      	ldr	r3, [pc, #556]	@ (8001170 <main+0x374>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d108      	bne.n	8000f5c <main+0x160>
 8000f4a:	4b88      	ldr	r3, [pc, #544]	@ (800116c <main+0x370>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	4b87      	ldr	r3, [pc, #540]	@ (8001170 <main+0x374>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	f002 fcc4 	bl	80038e2 <SSD1306_Clear>
 8000f5a:	e1a0      	b.n	800129e <main+0x4a2>
		else if 	(page == 1 && selected == 1)	{page = 2; selected = 2; SSD1306_Clear();}//to calibration
 8000f5c:	4b83      	ldr	r3, [pc, #524]	@ (800116c <main+0x370>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10c      	bne.n	8000f7e <main+0x182>
 8000f64:	4b82      	ldr	r3, [pc, #520]	@ (8001170 <main+0x374>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d108      	bne.n	8000f7e <main+0x182>
 8000f6c:	4b7f      	ldr	r3, [pc, #508]	@ (800116c <main+0x370>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	4b7f      	ldr	r3, [pc, #508]	@ (8001170 <main+0x374>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	f002 fcb3 	bl	80038e2 <SSD1306_Clear>
 8000f7c:	e18f      	b.n	800129e <main+0x4a2>
		else if 	(page == 1 && selected == 2)	{page = 3; selected = 1; SSD1306_Clear();}//settings
 8000f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800116c <main+0x370>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d10c      	bne.n	8000fa0 <main+0x1a4>
 8000f86:	4b7a      	ldr	r3, [pc, #488]	@ (8001170 <main+0x374>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d108      	bne.n	8000fa0 <main+0x1a4>
 8000f8e:	4b77      	ldr	r3, [pc, #476]	@ (800116c <main+0x370>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	4b76      	ldr	r3, [pc, #472]	@ (8001170 <main+0x374>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	f002 fca2 	bl	80038e2 <SSD1306_Clear>
 8000f9e:	e17e      	b.n	800129e <main+0x4a2>
		else if 	(page == 1 && selected == 3)	{page = 4; selected = 0; SSD1306_Clear();}//params
 8000fa0:	4b72      	ldr	r3, [pc, #456]	@ (800116c <main+0x370>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d10c      	bne.n	8000fc2 <main+0x1c6>
 8000fa8:	4b71      	ldr	r3, [pc, #452]	@ (8001170 <main+0x374>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d108      	bne.n	8000fc2 <main+0x1c6>
 8000fb0:	4b6e      	ldr	r3, [pc, #440]	@ (800116c <main+0x370>)
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8001170 <main+0x374>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	f002 fc91 	bl	80038e2 <SSD1306_Clear>
 8000fc0:	e16d      	b.n	800129e <main+0x4a2>
	//	  else if 	(page == 1 && selected == 4)	{page = 5; selected = 0; SSD1306_Clear();}//rezerv1
	//	  else if 	(page == 1 && selected == 5)	{page = 6; selected = 0; SSD1306_Clear();}//rezerv2

		else if 	(page == 2 && selected == 0)	{page = 1; selected = 1; calibRestriction = 3; SSD1306_Clear();}//exit to menu
 8000fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800116c <main+0x370>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d10f      	bne.n	8000fea <main+0x1ee>
 8000fca:	4b69      	ldr	r3, [pc, #420]	@ (8001170 <main+0x374>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10b      	bne.n	8000fea <main+0x1ee>
 8000fd2:	4b66      	ldr	r3, [pc, #408]	@ (800116c <main+0x370>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	4b65      	ldr	r3, [pc, #404]	@ (8001170 <main+0x374>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	4b65      	ldr	r3, [pc, #404]	@ (8001174 <main+0x378>)
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	f002 fc7d 	bl	80038e2 <SSD1306_Clear>
 8000fe8:	e159      	b.n	800129e <main+0x4a2>
		else if 	(page == 2 && selected == 1)	{}													//help
 8000fea:	4b60      	ldr	r3, [pc, #384]	@ (800116c <main+0x370>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d104      	bne.n	8000ffc <main+0x200>
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8001170 <main+0x374>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d100      	bne.n	8000ffc <main+0x200>
 8000ffa:	e150      	b.n	800129e <main+0x4a2>
		else if 	(page == 2 && selected == 2)	{lcdPrintUpdate(0, 0, "|", 1); zero();}				//zero
 8000ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800116c <main+0x370>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d110      	bne.n	8001026 <main+0x22a>
 8001004:	4b5a      	ldr	r3, [pc, #360]	@ (8001170 <main+0x374>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d10c      	bne.n	8001026 <main+0x22a>
 800100c:	4a5a      	ldr	r2, [pc, #360]	@ (8001178 <main+0x37c>)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	469c      	mov	ip, r3
 8001012:	2301      	movs	r3, #1
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f000 fa88 	bl	800152c <lcdPrintUpdate.10>
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	469c      	mov	ip, r3
 8001020:	f000 ff5e 	bl	8001ee0 <zero.1>
 8001024:	e13b      	b.n	800129e <main+0x4a2>
		else if 	(page == 2 && selected == 3)	{page = 20; selected = 1; SSD1306_Clear();}			//set 50 page
 8001026:	4b51      	ldr	r3, [pc, #324]	@ (800116c <main+0x370>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d10c      	bne.n	8001048 <main+0x24c>
 800102e:	4b50      	ldr	r3, [pc, #320]	@ (8001170 <main+0x374>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d108      	bne.n	8001048 <main+0x24c>
 8001036:	4b4d      	ldr	r3, [pc, #308]	@ (800116c <main+0x370>)
 8001038:	2214      	movs	r2, #20
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	4b4c      	ldr	r3, [pc, #304]	@ (8001170 <main+0x374>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	f002 fc4e 	bl	80038e2 <SSD1306_Clear>
 8001046:	e12a      	b.n	800129e <main+0x4a2>
		else if 	(page == 2 && selected == 4)	{lcdPrintUpdate(0, 22, "|", 1); zero0();}			//zero0
 8001048:	4b48      	ldr	r3, [pc, #288]	@ (800116c <main+0x370>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d110      	bne.n	8001072 <main+0x276>
 8001050:	4b47      	ldr	r3, [pc, #284]	@ (8001170 <main+0x374>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d10c      	bne.n	8001072 <main+0x276>
 8001058:	4a47      	ldr	r2, [pc, #284]	@ (8001178 <main+0x37c>)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	469c      	mov	ip, r3
 800105e:	2301      	movs	r3, #1
 8001060:	2116      	movs	r1, #22
 8001062:	2000      	movs	r0, #0
 8001064:	f000 fa62 	bl	800152c <lcdPrintUpdate.10>
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	469c      	mov	ip, r3
 800106c:	f000 ffa8 	bl	8001fc0 <zero0.2>
 8001070:	e115      	b.n	800129e <main+0x4a2>
		else if 	(page == 2 && selected == 5)	{lcdPrintUpdate(0, 32, "|", 1); init();}			//init
 8001072:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <main+0x370>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d110      	bne.n	800109c <main+0x2a0>
 800107a:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <main+0x374>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d10c      	bne.n	800109c <main+0x2a0>
 8001082:	4a3d      	ldr	r2, [pc, #244]	@ (8001178 <main+0x37c>)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	469c      	mov	ip, r3
 8001088:	2301      	movs	r3, #1
 800108a:	2120      	movs	r1, #32
 800108c:	2000      	movs	r0, #0
 800108e:	f000 fa4d 	bl	800152c <lcdPrintUpdate.10>
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	469c      	mov	ip, r3
 8001096:	f001 f805 	bl	80020a4 <init.3>
 800109a:	e100      	b.n	800129e <main+0x4a2>
		else if 	(page == 2 && selected == 6)	{lcdPrintUpdate(0, 42, "|", 1); zero2();}			//zero2
 800109c:	4b33      	ldr	r3, [pc, #204]	@ (800116c <main+0x370>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d110      	bne.n	80010c6 <main+0x2ca>
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <main+0x374>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d10c      	bne.n	80010c6 <main+0x2ca>
 80010ac:	4a32      	ldr	r2, [pc, #200]	@ (8001178 <main+0x37c>)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	469c      	mov	ip, r3
 80010b2:	2301      	movs	r3, #1
 80010b4:	212a      	movs	r1, #42	@ 0x2a
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 fa38 	bl	800152c <lcdPrintUpdate.10>
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	469c      	mov	ip, r3
 80010c0:	f001 f860 	bl	8002184 <zero2.4>
 80010c4:	e0eb      	b.n	800129e <main+0x4a2>

		else if 	(page == 20 && selected == 5)	{setPGSfunk();}										//set PGS funk
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <main+0x370>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b14      	cmp	r3, #20
 80010cc:	d108      	bne.n	80010e0 <main+0x2e4>
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <main+0x374>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d104      	bne.n	80010e0 <main+0x2e4>
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	469c      	mov	ip, r3
 80010da:	f001 f9cf 	bl	800247c <setPGSfunk.5>
 80010de:	e0de      	b.n	800129e <main+0x4a2>
		else if 	(page == 20 && selected == 0)	{page = 2; selected = 3; SSD1306_Clear();}			//exit to menu
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <main+0x370>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b14      	cmp	r3, #20
 80010e6:	d10c      	bne.n	8001102 <main+0x306>
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <main+0x374>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d108      	bne.n	8001102 <main+0x306>
 80010f0:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <main+0x370>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <main+0x374>)
 80010f8:	2203      	movs	r2, #3
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	f002 fbf1 	bl	80038e2 <SSD1306_Clear>
 8001100:	e0cd      	b.n	800129e <main+0x4a2>
		else if 	(page == 20 && selected < 5)	{page = 21; digitSelected = volPercent[selected-1]-48;}				//
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <main+0x370>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b14      	cmp	r3, #20
 8001108:	d110      	bne.n	800112c <main+0x330>
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <main+0x374>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d80c      	bhi.n	800112c <main+0x330>
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <main+0x370>)
 8001114:	2215      	movs	r2, #21
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <main+0x374>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	3b01      	subs	r3, #1
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <main+0x380>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	3b30      	subs	r3, #48	@ 0x30
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <main+0x384>)
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e0b8      	b.n	800129e <main+0x4a2>


		else if 	(page == 21)					{page = 20; volPercent[selected-1] = digitSelected+48;}				//change digit
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <main+0x370>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b15      	cmp	r3, #21
 8001132:	d127      	bne.n	8001184 <main+0x388>
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <main+0x370>)
 8001136:	2214      	movs	r2, #20
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <main+0x384>)
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <main+0x374>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3b01      	subs	r3, #1
 8001144:	3230      	adds	r2, #48	@ 0x30
 8001146:	b2d1      	uxtb	r1, r2
 8001148:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <main+0x380>)
 800114a:	54d1      	strb	r1, [r2, r3]
		if 		(page == 0)						{page = 1; selected = 1; SSD1306_Clear();}//to menu
 800114c:	e131      	b.n	80013b2 <main+0x5b6>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	48000400 	.word	0x48000400
 8001154:	08006dd0 	.word	0x08006dd0
 8001158:	08006dd8 	.word	0x08006dd8
 800115c:	08006de0 	.word	0x08006de0
 8001160:	20000178 	.word	0x20000178
 8001164:	2000017c 	.word	0x2000017c
 8001168:	20000179 	.word	0x20000179
 800116c:	20000180 	.word	0x20000180
 8001170:	20000181 	.word	0x20000181
 8001174:	20000018 	.word	0x20000018
 8001178:	08006dec 	.word	0x08006dec
 800117c:	2000001c 	.word	0x2000001c
 8001180:	20000182 	.word	0x20000182

		else if 	(page == 3 && selected == 0)	{page = 1; selected = 2; SSD1306_Clear();}			//exit to menu
 8001184:	4ba8      	ldr	r3, [pc, #672]	@ (8001428 <main+0x62c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d10c      	bne.n	80011a6 <main+0x3aa>
 800118c:	4ba7      	ldr	r3, [pc, #668]	@ (800142c <main+0x630>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d108      	bne.n	80011a6 <main+0x3aa>
 8001194:	4ba4      	ldr	r3, [pc, #656]	@ (8001428 <main+0x62c>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	4ba4      	ldr	r3, [pc, #656]	@ (800142c <main+0x630>)
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	f002 fb9f 	bl	80038e2 <SSD1306_Clear>
 80011a4:	e07b      	b.n	800129e <main+0x4a2>
		else if 	(page == 3 && selected == 1)	{lcdPrintUpdate(0, 0, "|", 1); oemUserQuestion();}	//oemUserQuestion
 80011a6:	4ba0      	ldr	r3, [pc, #640]	@ (8001428 <main+0x62c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d110      	bne.n	80011d0 <main+0x3d4>
 80011ae:	4b9f      	ldr	r3, [pc, #636]	@ (800142c <main+0x630>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10c      	bne.n	80011d0 <main+0x3d4>
 80011b6:	4a9e      	ldr	r2, [pc, #632]	@ (8001430 <main+0x634>)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	469c      	mov	ip, r3
 80011bc:	2301      	movs	r3, #1
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f9b3 	bl	800152c <lcdPrintUpdate.10>
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	469c      	mov	ip, r3
 80011ca:	f001 fa7d 	bl	80026c8 <oemUserQuestion.6>
 80011ce:	e066      	b.n	800129e <main+0x4a2>
		else if 	(page == 3 && selected == 2)	{lcdPrintUpdate(0, 10, "|", 1); oem();}		 		//oem
 80011d0:	4b95      	ldr	r3, [pc, #596]	@ (8001428 <main+0x62c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d110      	bne.n	80011fa <main+0x3fe>
 80011d8:	4b94      	ldr	r3, [pc, #592]	@ (800142c <main+0x630>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d10c      	bne.n	80011fa <main+0x3fe>
 80011e0:	4a93      	ldr	r2, [pc, #588]	@ (8001430 <main+0x634>)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	469c      	mov	ip, r3
 80011e6:	2301      	movs	r3, #1
 80011e8:	210a      	movs	r1, #10
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f99e 	bl	800152c <lcdPrintUpdate.10>
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	469c      	mov	ip, r3
 80011f4:	f001 faee 	bl	80027d4 <oem.7>
 80011f8:	e051      	b.n	800129e <main+0x4a2>
		else if 	(page == 3 && selected == 3)	{lcdPrintUpdate(0, 20, "|", 1); user();}		 	//user
 80011fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001428 <main+0x62c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d110      	bne.n	8001224 <main+0x428>
 8001202:	4b8a      	ldr	r3, [pc, #552]	@ (800142c <main+0x630>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d10c      	bne.n	8001224 <main+0x428>
 800120a:	4a89      	ldr	r2, [pc, #548]	@ (8001430 <main+0x634>)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	469c      	mov	ip, r3
 8001210:	2301      	movs	r3, #1
 8001212:	2114      	movs	r1, #20
 8001214:	2000      	movs	r0, #0
 8001216:	f000 f989 	bl	800152c <lcdPrintUpdate.10>
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	469c      	mov	ip, r3
 800121e:	f001 fb4f 	bl	80028c0 <user.8>
 8001222:	e03c      	b.n	800129e <main+0x4a2>
		else if 	(page == 3 && selected == 4)	{lcdPrintUpdate(0, 30, "|", 1); LOWPWR0();}			//LOWPWR0
 8001224:	4b80      	ldr	r3, [pc, #512]	@ (8001428 <main+0x62c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d110      	bne.n	800124e <main+0x452>
 800122c:	4b7f      	ldr	r3, [pc, #508]	@ (800142c <main+0x630>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d10c      	bne.n	800124e <main+0x452>
 8001234:	4a7e      	ldr	r2, [pc, #504]	@ (8001430 <main+0x634>)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	469c      	mov	ip, r3
 800123a:	2301      	movs	r3, #1
 800123c:	211e      	movs	r1, #30
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f974 	bl	800152c <lcdPrintUpdate.10>
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	469c      	mov	ip, r3
 8001248:	f001 fbb0 	bl	80029ac <LOWPWR0.9>
 800124c:	e027      	b.n	800129e <main+0x4a2>
		else if 	(page == 3 && selected == 5)	{lcdPrintUpdate(0, 40, "|", 1); LOWPWR1();}			//LOWPWR1
 800124e:	4b76      	ldr	r3, [pc, #472]	@ (8001428 <main+0x62c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d110      	bne.n	8001278 <main+0x47c>
 8001256:	4b75      	ldr	r3, [pc, #468]	@ (800142c <main+0x630>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d10c      	bne.n	8001278 <main+0x47c>
 800125e:	4a74      	ldr	r2, [pc, #464]	@ (8001430 <main+0x634>)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	469c      	mov	ip, r3
 8001264:	2301      	movs	r3, #1
 8001266:	2128      	movs	r1, #40	@ 0x28
 8001268:	2000      	movs	r0, #0
 800126a:	f000 f95f 	bl	800152c <lcdPrintUpdate.10>
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	469c      	mov	ip, r3
 8001272:	f001 fc0f 	bl	8002a94 <LOWPWR1.11>
 8001276:	e012      	b.n	800129e <main+0x4a2>

		else if 	(page == 4 && selected == 0)	{page = 1; selected = 3; SSD1306_Clear();}			//exit to menu
 8001278:	4b6b      	ldr	r3, [pc, #428]	@ (8001428 <main+0x62c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d000      	beq.n	8001282 <main+0x486>
 8001280:	e097      	b.n	80013b2 <main+0x5b6>
 8001282:	4b6a      	ldr	r3, [pc, #424]	@ (800142c <main+0x630>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d000      	beq.n	800128c <main+0x490>
 800128a:	e092      	b.n	80013b2 <main+0x5b6>
 800128c:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <main+0x62c>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	4b66      	ldr	r3, [pc, #408]	@ (800142c <main+0x630>)
 8001294:	2203      	movs	r2, #3
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	f002 fb23 	bl	80038e2 <SSD1306_Clear>
		if 		(page == 0)						{page = 1; selected = 1; SSD1306_Clear();}//to menu
 800129c:	e089      	b.n	80013b2 <main+0x5b6>
 800129e:	e088      	b.n	80013b2 <main+0x5b6>
	}
	else if(key1_state == 1 && short_state && (ms - time_key1) > 50){
 80012a0:	230b      	movs	r3, #11
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <main+0x4b0>
 80012aa:	e083      	b.n	80013b4 <main+0x5b8>
 80012ac:	4b61      	ldr	r3, [pc, #388]	@ (8001434 <main+0x638>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d100      	bne.n	80012b6 <main+0x4ba>
 80012b4:	e07e      	b.n	80013b4 <main+0x5b8>
 80012b6:	4b60      	ldr	r3, [pc, #384]	@ (8001438 <main+0x63c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b32      	cmp	r3, #50	@ 0x32
 80012c0:	d800      	bhi.n	80012c4 <main+0x4c8>
 80012c2:	e077      	b.n	80013b4 <main+0x5b8>
		short_state = 0;
 80012c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001434 <main+0x638>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		time_key1 = ms;
 80012ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001438 <main+0x63c>)
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	601a      	str	r2, [r3, #0]
		if(!long_state){// действие на короткое нажатие
 80012d0:	4b5a      	ldr	r3, [pc, #360]	@ (800143c <main+0x640>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4053      	eors	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d100      	bne.n	80012e0 <main+0x4e4>
 80012de:	e069      	b.n	80013b4 <main+0x5b8>
			if (page==0) {selected++; if (selected > 7) {selected=0;}} 					//0page
 80012e0:	4b51      	ldr	r3, [pc, #324]	@ (8001428 <main+0x62c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10c      	bne.n	8001302 <main+0x506>
 80012e8:	4b50      	ldr	r3, [pc, #320]	@ (800142c <main+0x630>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b4e      	ldr	r3, [pc, #312]	@ (800142c <main+0x630>)
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	4b4d      	ldr	r3, [pc, #308]	@ (800142c <main+0x630>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d902      	bls.n	8001302 <main+0x506>
 80012fc:	4b4b      	ldr	r3, [pc, #300]	@ (800142c <main+0x630>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
			if (page==1) {selected++; if (selected > 3) {selected=0;}} 					//menu
 8001302:	4b49      	ldr	r3, [pc, #292]	@ (8001428 <main+0x62c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10c      	bne.n	8001324 <main+0x528>
 800130a:	4b48      	ldr	r3, [pc, #288]	@ (800142c <main+0x630>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b46      	ldr	r3, [pc, #280]	@ (800142c <main+0x630>)
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	4b45      	ldr	r3, [pc, #276]	@ (800142c <main+0x630>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d902      	bls.n	8001324 <main+0x528>
 800131e:	4b43      	ldr	r3, [pc, #268]	@ (800142c <main+0x630>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
			if (page==2) {selected++; if (selected > calibRestriction) {selected=0;}} 	//calib
 8001324:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <main+0x62c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d10e      	bne.n	800134a <main+0x54e>
 800132c:	4b3f      	ldr	r3, [pc, #252]	@ (800142c <main+0x630>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b3d      	ldr	r3, [pc, #244]	@ (800142c <main+0x630>)
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	4b3c      	ldr	r3, [pc, #240]	@ (800142c <main+0x630>)
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <main+0x644>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d902      	bls.n	800134a <main+0x54e>
 8001344:	4b39      	ldr	r3, [pc, #228]	@ (800142c <main+0x630>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
			if (page==3) {selected++; if (selected > 5) {selected=0;}} 					//settingss
 800134a:	4b37      	ldr	r3, [pc, #220]	@ (8001428 <main+0x62c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d10c      	bne.n	800136c <main+0x570>
 8001352:	4b36      	ldr	r3, [pc, #216]	@ (800142c <main+0x630>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b34      	ldr	r3, [pc, #208]	@ (800142c <main+0x630>)
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	4b33      	ldr	r3, [pc, #204]	@ (800142c <main+0x630>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b05      	cmp	r3, #5
 8001364:	d902      	bls.n	800136c <main+0x570>
 8001366:	4b31      	ldr	r3, [pc, #196]	@ (800142c <main+0x630>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
			if (page==20) {selected++;if (selected > 5) {selected=0;}}  				//calib
 800136c:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <main+0x62c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b14      	cmp	r3, #20
 8001372:	d10c      	bne.n	800138e <main+0x592>
 8001374:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <main+0x630>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <main+0x630>)
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <main+0x630>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d902      	bls.n	800138e <main+0x592>
 8001388:	4b28      	ldr	r3, [pc, #160]	@ (800142c <main+0x630>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
			if (page==21) {digitSelected++;if (digitSelected > 9) {digitSelected=0;}}  	//digit
 800138e:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <main+0x62c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b15      	cmp	r3, #21
 8001394:	d10e      	bne.n	80013b4 <main+0x5b8>
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <main+0x648>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <main+0x648>)
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <main+0x648>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b09      	cmp	r3, #9
 80013a8:	d904      	bls.n	80013b4 <main+0x5b8>
 80013aa:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <main+0x648>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e000      	b.n	80013b4 <main+0x5b8>
		if 		(page == 0)						{page = 1; selected = 1; SSD1306_Clear();}//to menu
 80013b2:	46c0      	nop			@ (mov r8, r8)
	  	}
	}

	if (page == 0) {page0draw();}
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <main+0x62c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <main+0x5c8>
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	469c      	mov	ip, r3
 80013c0:	f000 f8de 	bl	8001580 <page0draw.12>
	if (page == 1) {pageMenuDraw();}
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <main+0x62c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d103      	bne.n	80013d4 <main+0x5d8>
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	469c      	mov	ip, r3
 80013d0:	f000 fb48 	bl	8001a64 <pageMenuDraw.13>
	if (page == 2) {pageCalibrationDraw();}
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <main+0x62c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d103      	bne.n	80013e4 <main+0x5e8>
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	469c      	mov	ip, r3
 80013e0:	f000 fbb0 	bl	8001b44 <pageCalibrationDraw.14>
	if (page == 20) {pageCalib50draw();}
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <main+0x62c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b14      	cmp	r3, #20
 80013ea:	d103      	bne.n	80013f4 <main+0x5f8>
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	469c      	mov	ip, r3
 80013f0:	f000 ff3a 	bl	8002268 <pageCalib50draw.15>
	if (page == 21) {pageDigitSelect();}
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <main+0x62c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b15      	cmp	r3, #21
 80013fa:	d103      	bne.n	8001404 <main+0x608>
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	469c      	mov	ip, r3
 8001400:	f000 ffe6 	bl	80023d0 <pageDigitSelect.17>
	if (page == 3) {pageSettingsDraw();}
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <main+0x62c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d103      	bne.n	8001414 <main+0x618>
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	469c      	mov	ip, r3
 8001410:	f001 f8d2 	bl	80025b8 <pageSettingsDraw.18>
	if (page == 4) {pageParamsDraw();}
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <main+0x62c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b04      	cmp	r3, #4
 800141a:	d000      	beq.n	800141e <main+0x622>
 800141c:	e528      	b.n	8000e70 <main+0x74>
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	469c      	mov	ip, r3
 8001422:	f001 fbab 	bl	8002b7c <pageParamsDraw.19>
while (1){
 8001426:	e523      	b.n	8000e70 <main+0x74>
 8001428:	20000180 	.word	0x20000180
 800142c:	20000181 	.word	0x20000181
 8001430:	08006dec 	.word	0x08006dec
 8001434:	20000178 	.word	0x20000178
 8001438:	2000017c 	.word	0x2000017c
 800143c:	20000179 	.word	0x20000179
 8001440:	20000018 	.word	0x20000018
 8001444:	20000182 	.word	0x20000182

08001448 <lcdPrintSymbol.16>:
void lcdPrintSymbol(uint8_t x, uint8_t y, char Symbol, uint8_t fontsize){
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	0005      	movs	r5, r0
 8001450:	000c      	movs	r4, r1
 8001452:	0010      	movs	r0, r2
 8001454:	0019      	movs	r1, r3
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	1c2a      	adds	r2, r5, #0
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	1dbb      	adds	r3, r7, #6
 800145e:	1c22      	adds	r2, r4, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	1d7b      	adds	r3, r7, #5
 8001464:	1c02      	adds	r2, r0, #0
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	1c0a      	adds	r2, r1, #0
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	4663      	mov	r3, ip
 8001470:	603b      	str	r3, [r7, #0]
	SSD1306_GotoXY(X0 + x, y);
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3302      	adds	r3, #2
 800147a:	b29a      	uxth	r2, r3
 800147c:	1dbb      	adds	r3, r7, #6
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	0019      	movs	r1, r3
 8001484:	0010      	movs	r0, r2
 8001486:	f001 ffdd 	bl	8003444 <SSD1306_GotoXY>
	if 		(fontsize == 1) {SSD1306_Putc(Symbol , &Font_7x10, 1);}
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <lcdPrintSymbol.16+0x5a>
 8001492:	4923      	ldr	r1, [pc, #140]	@ (8001520 <lcdPrintSymbol.16+0xd8>)
 8001494:	1d7b      	adds	r3, r7, #5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2201      	movs	r2, #1
 800149a:	0018      	movs	r0, r3
 800149c:	f001 ffea 	bl	8003474 <SSD1306_Putc>
}
 80014a0:	e03a      	b.n	8001518 <lcdPrintSymbol.16+0xd0>
	else if (fontsize == 2) {SSD1306_Putc(Symbol , &Font_11x18, 1);}
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d107      	bne.n	80014ba <lcdPrintSymbol.16+0x72>
 80014aa:	491e      	ldr	r1, [pc, #120]	@ (8001524 <lcdPrintSymbol.16+0xdc>)
 80014ac:	1d7b      	adds	r3, r7, #5
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	0018      	movs	r0, r3
 80014b4:	f001 ffde 	bl	8003474 <SSD1306_Putc>
}
 80014b8:	e02e      	b.n	8001518 <lcdPrintSymbol.16+0xd0>
	else if (fontsize == 3) {SSD1306_Putc(Symbol , &Font_16x26, 1);}
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d107      	bne.n	80014d2 <lcdPrintSymbol.16+0x8a>
 80014c2:	4919      	ldr	r1, [pc, #100]	@ (8001528 <lcdPrintSymbol.16+0xe0>)
 80014c4:	1d7b      	adds	r3, r7, #5
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	0018      	movs	r0, r3
 80014cc:	f001 ffd2 	bl	8003474 <SSD1306_Putc>
}
 80014d0:	e022      	b.n	8001518 <lcdPrintSymbol.16+0xd0>
	else if	(fontsize == 10) {SSD1306_Putc(Symbol , &Font_7x10, 0);}
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b0a      	cmp	r3, #10
 80014d8:	d107      	bne.n	80014ea <lcdPrintSymbol.16+0xa2>
 80014da:	4911      	ldr	r1, [pc, #68]	@ (8001520 <lcdPrintSymbol.16+0xd8>)
 80014dc:	1d7b      	adds	r3, r7, #5
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 ffc6 	bl	8003474 <SSD1306_Putc>
}
 80014e8:	e016      	b.n	8001518 <lcdPrintSymbol.16+0xd0>
	else if (fontsize == 20) {SSD1306_Putc(Symbol , &Font_11x18, 0);}
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b14      	cmp	r3, #20
 80014f0:	d107      	bne.n	8001502 <lcdPrintSymbol.16+0xba>
 80014f2:	490c      	ldr	r1, [pc, #48]	@ (8001524 <lcdPrintSymbol.16+0xdc>)
 80014f4:	1d7b      	adds	r3, r7, #5
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2200      	movs	r2, #0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f001 ffba 	bl	8003474 <SSD1306_Putc>
}
 8001500:	e00a      	b.n	8001518 <lcdPrintSymbol.16+0xd0>
	else if (fontsize == 30) {SSD1306_Putc(Symbol , &Font_16x26, 0);}
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b1e      	cmp	r3, #30
 8001508:	d106      	bne.n	8001518 <lcdPrintSymbol.16+0xd0>
 800150a:	4907      	ldr	r1, [pc, #28]	@ (8001528 <lcdPrintSymbol.16+0xe0>)
 800150c:	1d7b      	adds	r3, r7, #5
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	0018      	movs	r0, r3
 8001514:	f001 ffae 	bl	8003474 <SSD1306_Putc>
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008
 8001528:	20000010 	.word	0x20000010

0800152c <lcdPrintUpdate.10>:
void lcdPrintUpdate(uint8_t x, uint8_t y, char message[], uint8_t fontsize){
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	0004      	movs	r4, r0
 8001534:	0008      	movs	r0, r1
 8001536:	60ba      	str	r2, [r7, #8]
 8001538:	0019      	movs	r1, r3
 800153a:	260f      	movs	r6, #15
 800153c:	19bb      	adds	r3, r7, r6
 800153e:	1c22      	adds	r2, r4, #0
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	230e      	movs	r3, #14
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	1c02      	adds	r2, r0, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	200d      	movs	r0, #13
 800154c:	183b      	adds	r3, r7, r0
 800154e:	1c0a      	adds	r2, r1, #0
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	4663      	mov	r3, ip
 8001554:	4661      	mov	r1, ip
 8001556:	6079      	str	r1, [r7, #4]
	lcdPrint(x, y, message, fontsize);
 8001558:	183a      	adds	r2, r7, r0
 800155a:	7815      	ldrb	r5, [r2, #0]
 800155c:	68bc      	ldr	r4, [r7, #8]
 800155e:	220e      	movs	r2, #14
 8001560:	18ba      	adds	r2, r7, r2
 8001562:	7811      	ldrb	r1, [r2, #0]
 8001564:	19ba      	adds	r2, r7, r6
 8001566:	7810      	ldrb	r0, [r2, #0]
 8001568:	469c      	mov	ip, r3
 800156a:	002b      	movs	r3, r5
 800156c:	0022      	movs	r2, r4
 800156e:	f7ff fbd3 	bl	8000d18 <lcdPrint.0>
	SSD1306_UpdateScreen();
 8001572:	f001 fe9b 	bl	80032ac <SSD1306_UpdateScreen>
}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b005      	add	sp, #20
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001580 <page0draw.12>:
void page0draw(void){
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	b0ad      	sub	sp, #180	@ 0xb4
 8001584:	af00      	add	r7, sp, #0
 8001586:	4664      	mov	r4, ip
 8001588:	4663      	mov	r3, ip
 800158a:	607b      	str	r3, [r7, #4]
	if (HAL_GetTick()-lastPing > 1000){//таймаут опроса опроса
 800158c:	f002 fbf4 	bl	8003d78 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	4bd1      	ldr	r3, [pc, #836]	@ (80018d8 <page0draw.12+0x358>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	23fa      	movs	r3, #250	@ 0xfa
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	429a      	cmp	r2, r3
 800159e:	d800      	bhi.n	80015a2 <page0draw.12+0x22>
 80015a0:	e24f      	b.n	8001a42 <page0draw.12+0x4c2>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	019b      	lsls	r3, r3, #6
 80015a6:	48cd      	ldr	r0, [pc, #820]	@ (80018dc <page0draw.12+0x35c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	0019      	movs	r1, r3
 80015ac:	f002 fe53 	bl	8004256 <HAL_GPIO_WritePin>
		uint8_t msg[]={0x46,0x0D};  uint8_t rx_buffer[73]={0};  MX_USART2_UART_Init();
 80015b0:	26ac      	movs	r6, #172	@ 0xac
 80015b2:	19bb      	adds	r3, r7, r6
 80015b4:	4aca      	ldr	r2, [pc, #808]	@ (80018e0 <page0draw.12+0x360>)
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	2508      	movs	r5, #8
 80015ba:	197b      	adds	r3, r7, r5
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2245      	movs	r2, #69	@ 0x45
 80015c4:	2100      	movs	r1, #0
 80015c6:	0018      	movs	r0, r3
 80015c8:	f004 ff1c 	bl	8006404 <memset>
 80015cc:	f001 fce0 	bl	8002f90 <MX_USART2_UART_Init>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 80015d0:	19b9      	adds	r1, r7, r6
 80015d2:	48c4      	ldr	r0, [pc, #784]	@ (80018e4 <page0draw.12+0x364>)
 80015d4:	2332      	movs	r3, #50	@ 0x32
 80015d6:	2202      	movs	r2, #2
 80015d8:	f004 f974 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_buffer, 73, 100);
 80015dc:	1979      	adds	r1, r7, r5
 80015de:	48c1      	ldr	r0, [pc, #772]	@ (80018e4 <page0draw.12+0x364>)
 80015e0:	2364      	movs	r3, #100	@ 0x64
 80015e2:	2249      	movs	r2, #73	@ 0x49
 80015e4:	f004 fa0e 	bl	8005a04 <HAL_UART_Receive>
		if (rx_buffer[72] != 0x0D) {memset(rx_buffer, 0x20, sizeof(rx_buffer)/sizeof(rx_buffer[0]));}
 80015e8:	197b      	adds	r3, r7, r5
 80015ea:	2248      	movs	r2, #72	@ 0x48
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	2b0d      	cmp	r3, #13
 80015f0:	d005      	beq.n	80015fe <page0draw.12+0x7e>
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	2249      	movs	r2, #73	@ 0x49
 80015f6:	2120      	movs	r1, #32
 80015f8:	0018      	movs	r0, r3
 80015fa:	f004 ff03 	bl	8006404 <memset>
		lastPing = HAL_GetTick();
 80015fe:	f002 fbbb 	bl	8003d78 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	4bb4      	ldr	r3, [pc, #720]	@ (80018d8 <page0draw.12+0x358>)
 8001606:	601a      	str	r2, [r3, #0]
		char C[6]={0};  char C1[6]={0};
 8001608:	20a4      	movs	r0, #164	@ 0xa4
 800160a:	183b      	adds	r3, r7, r0
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	809a      	strh	r2, [r3, #4]
 8001614:	239c      	movs	r3, #156	@ 0x9c
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	809a      	strh	r2, [r3, #4]
		strncpy(C , &rx_buffer[43] , 5);
 8001620:	2508      	movs	r5, #8
 8001622:	197b      	adds	r3, r7, r5
 8001624:	0019      	movs	r1, r3
 8001626:	312b      	adds	r1, #43	@ 0x2b
 8001628:	0006      	movs	r6, r0
 800162a:	183b      	adds	r3, r7, r0
 800162c:	2205      	movs	r2, #5
 800162e:	0018      	movs	r0, r3
 8001630:	f004 fef0 	bl	8006414 <strncpy>
		strncpy(C1 , &rx_buffer[49] , 5);
 8001634:	197b      	adds	r3, r7, r5
 8001636:	0019      	movs	r1, r3
 8001638:	3131      	adds	r1, #49	@ 0x31
 800163a:	239c      	movs	r3, #156	@ 0x9c
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	2205      	movs	r2, #5
 8001640:	0018      	movs	r0, r3
 8001642:	f004 fee7 	bl	8006414 <strncpy>
		lcdPrint(0, 0, "C:        C1:", 1);
 8001646:	4aa8      	ldr	r2, [pc, #672]	@ (80018e8 <page0draw.12+0x368>)
 8001648:	46a4      	mov	ip, r4
 800164a:	2301      	movs	r3, #1
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fb62 	bl	8000d18 <lcdPrint.0>
		lcdPrint(21, 0, C, 1); lcdPrint(91, 0, C1, 1);
 8001654:	19ba      	adds	r2, r7, r6
 8001656:	46a4      	mov	ip, r4
 8001658:	2301      	movs	r3, #1
 800165a:	2100      	movs	r1, #0
 800165c:	2015      	movs	r0, #21
 800165e:	f7ff fb5b 	bl	8000d18 <lcdPrint.0>
 8001662:	239c      	movs	r3, #156	@ 0x9c
 8001664:	18fa      	adds	r2, r7, r3
 8001666:	46a4      	mov	ip, r4
 8001668:	2301      	movs	r3, #1
 800166a:	2100      	movs	r1, #0
 800166c:	205b      	movs	r0, #91	@ 0x5b
 800166e:	f7ff fb53 	bl	8000d18 <lcdPrint.0>
		char sn1[5]={0};	  char sn2[5]={0};
 8001672:	2094      	movs	r0, #148	@ 0x94
 8001674:	183b      	adds	r3, r7, r0
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	711a      	strb	r2, [r3, #4]
 800167e:	238c      	movs	r3, #140	@ 0x8c
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	711a      	strb	r2, [r3, #4]
		strncpy(sn1 , &rx_buffer[61] , 4);
 800168a:	197b      	adds	r3, r7, r5
 800168c:	0019      	movs	r1, r3
 800168e:	313d      	adds	r1, #61	@ 0x3d
 8001690:	0006      	movs	r6, r0
 8001692:	183b      	adds	r3, r7, r0
 8001694:	2204      	movs	r2, #4
 8001696:	0018      	movs	r0, r3
 8001698:	f004 febc 	bl	8006414 <strncpy>
		strncpy(sn2 , &rx_buffer[65] , 4);
 800169c:	197b      	adds	r3, r7, r5
 800169e:	0019      	movs	r1, r3
 80016a0:	3141      	adds	r1, #65	@ 0x41
 80016a2:	238c      	movs	r3, #140	@ 0x8c
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	2204      	movs	r2, #4
 80016a8:	0018      	movs	r0, r3
 80016aa:	f004 feb3 	bl	8006414 <strncpy>
		lcdPrint(0, 13, "02", 2); lcdPrint(28, 13, sn1, 2); lcdPrint(78, 13, sn2, 2);
 80016ae:	4a8f      	ldr	r2, [pc, #572]	@ (80018ec <page0draw.12+0x36c>)
 80016b0:	46a4      	mov	ip, r4
 80016b2:	2302      	movs	r3, #2
 80016b4:	210d      	movs	r1, #13
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fb2e 	bl	8000d18 <lcdPrint.0>
 80016bc:	19ba      	adds	r2, r7, r6
 80016be:	46a4      	mov	ip, r4
 80016c0:	2302      	movs	r3, #2
 80016c2:	210d      	movs	r1, #13
 80016c4:	201c      	movs	r0, #28
 80016c6:	f7ff fb27 	bl	8000d18 <lcdPrint.0>
 80016ca:	238c      	movs	r3, #140	@ 0x8c
 80016cc:	18fa      	adds	r2, r7, r3
 80016ce:	46a4      	mov	ip, r4
 80016d0:	2302      	movs	r3, #2
 80016d2:	210d      	movs	r1, #13
 80016d4:	204e      	movs	r0, #78	@ 0x4e
 80016d6:	f7ff fb1f 	bl	8000d18 <lcdPrint.0>
		uint8_t status[6]={0};
 80016da:	2084      	movs	r0, #132	@ 0x84
 80016dc:	183b      	adds	r3, r7, r0
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	809a      	strh	r2, [r3, #4]
		strncpy(status , &rx_buffer[55] , 5);
 80016e6:	197b      	adds	r3, r7, r5
 80016e8:	3337      	adds	r3, #55	@ 0x37
 80016ea:	0019      	movs	r1, r3
 80016ec:	0005      	movs	r5, r0
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	2205      	movs	r2, #5
 80016f2:	0018      	movs	r0, r3
 80016f4:	f004 fe8e 	bl	8006414 <strncpy>
		lcdPrint(0, 33, "status:", 1); lcdPrint(49, 33, status, 1);
 80016f8:	4a7d      	ldr	r2, [pc, #500]	@ (80018f0 <page0draw.12+0x370>)
 80016fa:	46a4      	mov	ip, r4
 80016fc:	2301      	movs	r3, #1
 80016fe:	2121      	movs	r1, #33	@ 0x21
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fb09 	bl	8000d18 <lcdPrint.0>
 8001706:	197a      	adds	r2, r7, r5
 8001708:	46a4      	mov	ip, r4
 800170a:	2301      	movs	r3, #1
 800170c:	2121      	movs	r1, #33	@ 0x21
 800170e:	2031      	movs	r0, #49	@ 0x31
 8001710:	f7ff fb02 	bl	8000d18 <lcdPrint.0>
		char message[20]={0};
 8001714:	2670      	movs	r6, #112	@ 0x70
 8001716:	19bb      	adds	r3, r7, r6
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	3304      	adds	r3, #4
 800171e:	2210      	movs	r2, #16
 8001720:	2100      	movs	r1, #0
 8001722:	0018      	movs	r0, r3
 8001724:	f004 fe6e 	bl	8006404 <memset>
		memset(message,' ',sizeof(message)/sizeof(message[0]));
 8001728:	19bb      	adds	r3, r7, r6
 800172a:	2214      	movs	r2, #20
 800172c:	2120      	movs	r1, #32
 800172e:	0018      	movs	r0, r3
 8001730:	f004 fe68 	bl	8006404 <memset>
		lcdPrint(0, 43, message, 1);
 8001734:	19ba      	adds	r2, r7, r6
 8001736:	46a4      	mov	ip, r4
 8001738:	2301      	movs	r3, #1
 800173a:	212b      	movs	r1, #43	@ 0x2b
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff faeb 	bl	8000d18 <lcdPrint.0>
		if		(status[3] == '0' && status[4] == '0') {strcpy(message , "OK");}
 8001742:	197b      	adds	r3, r7, r5
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	2b30      	cmp	r3, #48	@ 0x30
 8001748:	d10a      	bne.n	8001760 <page0draw.12+0x1e0>
 800174a:	197b      	adds	r3, r7, r5
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	2b30      	cmp	r3, #48	@ 0x30
 8001750:	d106      	bne.n	8001760 <page0draw.12+0x1e0>
 8001752:	19bb      	adds	r3, r7, r6
 8001754:	4a67      	ldr	r2, [pc, #412]	@ (80018f4 <page0draw.12+0x374>)
 8001756:	8811      	ldrh	r1, [r2, #0]
 8001758:	8019      	strh	r1, [r3, #0]
 800175a:	7892      	ldrb	r2, [r2, #2]
 800175c:	709a      	strb	r2, [r3, #2]
 800175e:	e0f7      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '1' && status[4] == '0') {strcpy(message , "warming up");}
 8001760:	2284      	movs	r2, #132	@ 0x84
 8001762:	18bb      	adds	r3, r7, r2
 8001764:	78db      	ldrb	r3, [r3, #3]
 8001766:	2b31      	cmp	r3, #49	@ 0x31
 8001768:	d10d      	bne.n	8001786 <page0draw.12+0x206>
 800176a:	18bb      	adds	r3, r7, r2
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	2b30      	cmp	r3, #48	@ 0x30
 8001770:	d109      	bne.n	8001786 <page0draw.12+0x206>
 8001772:	2370      	movs	r3, #112	@ 0x70
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	4a60      	ldr	r2, [pc, #384]	@ (80018f8 <page0draw.12+0x378>)
 8001778:	ca03      	ldmia	r2!, {r0, r1}
 800177a:	c303      	stmia	r3!, {r0, r1}
 800177c:	8811      	ldrh	r1, [r2, #0]
 800177e:	8019      	strh	r1, [r3, #0]
 8001780:	7892      	ldrb	r2, [r2, #2]
 8001782:	709a      	strb	r2, [r3, #2]
 8001784:	e0e4      	b.n	8001950 <page0draw.12+0x3d0>
		else if	(status[3] == '1' && status[4] == '1') {strcpy(message , "too many pings");}
 8001786:	2284      	movs	r2, #132	@ 0x84
 8001788:	18bb      	adds	r3, r7, r2
 800178a:	78db      	ldrb	r3, [r3, #3]
 800178c:	2b31      	cmp	r3, #49	@ 0x31
 800178e:	d10d      	bne.n	80017ac <page0draw.12+0x22c>
 8001790:	18bb      	adds	r3, r7, r2
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	2b31      	cmp	r3, #49	@ 0x31
 8001796:	d109      	bne.n	80017ac <page0draw.12+0x22c>
 8001798:	2370      	movs	r3, #112	@ 0x70
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	4a57      	ldr	r2, [pc, #348]	@ (80018fc <page0draw.12+0x37c>)
 800179e:	ca23      	ldmia	r2!, {r0, r1, r5}
 80017a0:	c323      	stmia	r3!, {r0, r1, r5}
 80017a2:	8811      	ldrh	r1, [r2, #0]
 80017a4:	8019      	strh	r1, [r3, #0]
 80017a6:	7892      	ldrb	r2, [r2, #2]
 80017a8:	709a      	strb	r2, [r3, #2]
 80017aa:	e0d1      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '2' && status[4] == '1') {strcpy(message , "dt/sec > 0.6 deg/s");}
 80017ac:	2284      	movs	r2, #132	@ 0x84
 80017ae:	18bb      	adds	r3, r7, r2
 80017b0:	78db      	ldrb	r3, [r3, #3]
 80017b2:	2b32      	cmp	r3, #50	@ 0x32
 80017b4:	d10f      	bne.n	80017d6 <page0draw.12+0x256>
 80017b6:	18bb      	adds	r3, r7, r2
 80017b8:	791b      	ldrb	r3, [r3, #4]
 80017ba:	2b31      	cmp	r3, #49	@ 0x31
 80017bc:	d10b      	bne.n	80017d6 <page0draw.12+0x256>
 80017be:	2370      	movs	r3, #112	@ 0x70
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001900 <page0draw.12+0x380>)
 80017c4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80017c6:	c323      	stmia	r3!, {r0, r1, r5}
 80017c8:	6811      	ldr	r1, [r2, #0]
 80017ca:	6019      	str	r1, [r3, #0]
 80017cc:	8891      	ldrh	r1, [r2, #4]
 80017ce:	8099      	strh	r1, [r3, #4]
 80017d0:	7992      	ldrb	r2, [r2, #6]
 80017d2:	719a      	strb	r2, [r3, #6]
 80017d4:	e0bc      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '2' && status[4] == '2') {strcpy(message , "dt/sec > 2 deg/s");}
 80017d6:	2284      	movs	r2, #132	@ 0x84
 80017d8:	18bb      	adds	r3, r7, r2
 80017da:	78db      	ldrb	r3, [r3, #3]
 80017dc:	2b32      	cmp	r3, #50	@ 0x32
 80017de:	d10d      	bne.n	80017fc <page0draw.12+0x27c>
 80017e0:	18bb      	adds	r3, r7, r2
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	2b32      	cmp	r3, #50	@ 0x32
 80017e6:	d109      	bne.n	80017fc <page0draw.12+0x27c>
 80017e8:	2370      	movs	r3, #112	@ 0x70
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	4a45      	ldr	r2, [pc, #276]	@ (8001904 <page0draw.12+0x384>)
 80017ee:	ca23      	ldmia	r2!, {r0, r1, r5}
 80017f0:	c323      	stmia	r3!, {r0, r1, r5}
 80017f2:	6811      	ldr	r1, [r2, #0]
 80017f4:	6019      	str	r1, [r3, #0]
 80017f6:	7912      	ldrb	r2, [r2, #4]
 80017f8:	711a      	strb	r2, [r3, #4]
 80017fa:	e0a9      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '2' && status[4] == '4') {strcpy(message , "dt; Zero < 0");}
 80017fc:	2284      	movs	r2, #132	@ 0x84
 80017fe:	18bb      	adds	r3, r7, r2
 8001800:	78db      	ldrb	r3, [r3, #3]
 8001802:	2b32      	cmp	r3, #50	@ 0x32
 8001804:	d10b      	bne.n	800181e <page0draw.12+0x29e>
 8001806:	18bb      	adds	r3, r7, r2
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	2b34      	cmp	r3, #52	@ 0x34
 800180c:	d107      	bne.n	800181e <page0draw.12+0x29e>
 800180e:	2370      	movs	r3, #112	@ 0x70
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	4a3d      	ldr	r2, [pc, #244]	@ (8001908 <page0draw.12+0x388>)
 8001814:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001816:	c323      	stmia	r3!, {r0, r1, r5}
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e098      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '3' && status[4] == '0') {strcpy(message , "Ur or Us < min");}
 800181e:	2284      	movs	r2, #132	@ 0x84
 8001820:	18bb      	adds	r3, r7, r2
 8001822:	78db      	ldrb	r3, [r3, #3]
 8001824:	2b33      	cmp	r3, #51	@ 0x33
 8001826:	d10d      	bne.n	8001844 <page0draw.12+0x2c4>
 8001828:	18bb      	adds	r3, r7, r2
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	2b30      	cmp	r3, #48	@ 0x30
 800182e:	d109      	bne.n	8001844 <page0draw.12+0x2c4>
 8001830:	2370      	movs	r3, #112	@ 0x70
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	4a35      	ldr	r2, [pc, #212]	@ (800190c <page0draw.12+0x38c>)
 8001836:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001838:	c323      	stmia	r3!, {r0, r1, r5}
 800183a:	8811      	ldrh	r1, [r2, #0]
 800183c:	8019      	strh	r1, [r3, #0]
 800183e:	7892      	ldrb	r2, [r2, #2]
 8001840:	709a      	strb	r2, [r3, #2]
 8001842:	e085      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '3' && status[4] == '1') {strcpy(message , "Zero < 0");}
 8001844:	2284      	movs	r2, #132	@ 0x84
 8001846:	18bb      	adds	r3, r7, r2
 8001848:	78db      	ldrb	r3, [r3, #3]
 800184a:	2b33      	cmp	r3, #51	@ 0x33
 800184c:	d10b      	bne.n	8001866 <page0draw.12+0x2e6>
 800184e:	18bb      	adds	r3, r7, r2
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	2b31      	cmp	r3, #49	@ 0x31
 8001854:	d107      	bne.n	8001866 <page0draw.12+0x2e6>
 8001856:	2370      	movs	r3, #112	@ 0x70
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <page0draw.12+0x390>)
 800185c:	ca03      	ldmia	r2!, {r0, r1}
 800185e:	c303      	stmia	r3!, {r0, r1}
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e074      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '4' && status[4] == '0') {strcpy(message , "temp not in range");}
 8001866:	2284      	movs	r2, #132	@ 0x84
 8001868:	18bb      	adds	r3, r7, r2
 800186a:	78db      	ldrb	r3, [r3, #3]
 800186c:	2b34      	cmp	r3, #52	@ 0x34
 800186e:	d10d      	bne.n	800188c <page0draw.12+0x30c>
 8001870:	18bb      	adds	r3, r7, r2
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	2b30      	cmp	r3, #48	@ 0x30
 8001876:	d109      	bne.n	800188c <page0draw.12+0x30c>
 8001878:	2370      	movs	r3, #112	@ 0x70
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	4a25      	ldr	r2, [pc, #148]	@ (8001914 <page0draw.12+0x394>)
 800187e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001880:	c323      	stmia	r3!, {r0, r1, r5}
 8001882:	6811      	ldr	r1, [r2, #0]
 8001884:	6019      	str	r1, [r3, #0]
 8001886:	8892      	ldrh	r2, [r2, #4]
 8001888:	809a      	strh	r2, [r3, #4]
 800188a:	e061      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '5' && status[4] == '0') {strcpy(message , "rapid val changes");}
 800188c:	2284      	movs	r2, #132	@ 0x84
 800188e:	18bb      	adds	r3, r7, r2
 8001890:	78db      	ldrb	r3, [r3, #3]
 8001892:	2b35      	cmp	r3, #53	@ 0x35
 8001894:	d10d      	bne.n	80018b2 <page0draw.12+0x332>
 8001896:	18bb      	adds	r3, r7, r2
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	2b30      	cmp	r3, #48	@ 0x30
 800189c:	d109      	bne.n	80018b2 <page0draw.12+0x332>
 800189e:	2370      	movs	r3, #112	@ 0x70
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <page0draw.12+0x398>)
 80018a4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80018a6:	c323      	stmia	r3!, {r0, r1, r5}
 80018a8:	6811      	ldr	r1, [r2, #0]
 80018aa:	6019      	str	r1, [r3, #0]
 80018ac:	8892      	ldrh	r2, [r2, #4]
 80018ae:	809a      	strh	r2, [r3, #4]
 80018b0:	e04e      	b.n	8001950 <page0draw.12+0x3d0>
		else if 	(status[3] == '5' && status[4] == '1') {strcpy(message , "hardware error");}
 80018b2:	2284      	movs	r2, #132	@ 0x84
 80018b4:	18bb      	adds	r3, r7, r2
 80018b6:	78db      	ldrb	r3, [r3, #3]
 80018b8:	2b35      	cmp	r3, #53	@ 0x35
 80018ba:	d131      	bne.n	8001920 <page0draw.12+0x3a0>
 80018bc:	18bb      	adds	r3, r7, r2
 80018be:	791b      	ldrb	r3, [r3, #4]
 80018c0:	2b31      	cmp	r3, #49	@ 0x31
 80018c2:	d12d      	bne.n	8001920 <page0draw.12+0x3a0>
 80018c4:	2370      	movs	r3, #112	@ 0x70
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <page0draw.12+0x39c>)
 80018ca:	ca23      	ldmia	r2!, {r0, r1, r5}
 80018cc:	c323      	stmia	r3!, {r0, r1, r5}
 80018ce:	8811      	ldrh	r1, [r2, #0]
 80018d0:	8019      	strh	r1, [r3, #0]
 80018d2:	7892      	ldrb	r2, [r2, #2]
 80018d4:	709a      	strb	r2, [r3, #2]
 80018d6:	e03b      	b.n	8001950 <page0draw.12+0x3d0>
 80018d8:	20000184 	.word	0x20000184
 80018dc:	48000800 	.word	0x48000800
 80018e0:	00000d46 	.word	0x00000d46
 80018e4:	200000f0 	.word	0x200000f0
 80018e8:	08006df0 	.word	0x08006df0
 80018ec:	08006e00 	.word	0x08006e00
 80018f0:	08006e04 	.word	0x08006e04
 80018f4:	08006e0c 	.word	0x08006e0c
 80018f8:	08006e10 	.word	0x08006e10
 80018fc:	08006e1c 	.word	0x08006e1c
 8001900:	08006e2c 	.word	0x08006e2c
 8001904:	08006e40 	.word	0x08006e40
 8001908:	08006e54 	.word	0x08006e54
 800190c:	08006e64 	.word	0x08006e64
 8001910:	08006e74 	.word	0x08006e74
 8001914:	08006e80 	.word	0x08006e80
 8001918:	08006e94 	.word	0x08006e94
 800191c:	08006ea8 	.word	0x08006ea8
		else if 	(status[3] == '9' && status[4] == '0') {strcpy(message , "software error");}
 8001920:	2284      	movs	r2, #132	@ 0x84
 8001922:	18bb      	adds	r3, r7, r2
 8001924:	78db      	ldrb	r3, [r3, #3]
 8001926:	2b39      	cmp	r3, #57	@ 0x39
 8001928:	d10d      	bne.n	8001946 <page0draw.12+0x3c6>
 800192a:	18bb      	adds	r3, r7, r2
 800192c:	791b      	ldrb	r3, [r3, #4]
 800192e:	2b30      	cmp	r3, #48	@ 0x30
 8001930:	d109      	bne.n	8001946 <page0draw.12+0x3c6>
 8001932:	2370      	movs	r3, #112	@ 0x70
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	4a45      	ldr	r2, [pc, #276]	@ (8001a4c <page0draw.12+0x4cc>)
 8001938:	ca23      	ldmia	r2!, {r0, r1, r5}
 800193a:	c323      	stmia	r3!, {r0, r1, r5}
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	8019      	strh	r1, [r3, #0]
 8001940:	7892      	ldrb	r2, [r2, #2]
 8001942:	709a      	strb	r2, [r3, #2]
 8001944:	e004      	b.n	8001950 <page0draw.12+0x3d0>
		else 											   {strcpy(message , "unknown");}
 8001946:	2370      	movs	r3, #112	@ 0x70
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	4a41      	ldr	r2, [pc, #260]	@ (8001a50 <page0draw.12+0x4d0>)
 800194c:	ca03      	ldmia	r2!, {r0, r1}
 800194e:	c303      	stmia	r3!, {r0, r1}
		lcdPrint(0, 43, message, 1);
 8001950:	2370      	movs	r3, #112	@ 0x70
 8001952:	18fa      	adds	r2, r7, r3
 8001954:	46a4      	mov	ip, r4
 8001956:	2301      	movs	r3, #1
 8001958:	212b      	movs	r1, #43	@ 0x2b
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff f9dc 	bl	8000d18 <lcdPrint.0>
		char message2[10]={0};
 8001960:	2564      	movs	r5, #100	@ 0x64
 8001962:	197b      	adds	r3, r7, r5
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	3304      	adds	r3, #4
 800196a:	2206      	movs	r2, #6
 800196c:	2100      	movs	r1, #0
 800196e:	0018      	movs	r0, r3
 8001970:	f004 fd48 	bl	8006404 <memset>
		if (status[2] == '1') {strcpy(message2 , "LowPWR");}
 8001974:	2384      	movs	r3, #132	@ 0x84
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	789b      	ldrb	r3, [r3, #2]
 800197a:	2b31      	cmp	r3, #49	@ 0x31
 800197c:	d108      	bne.n	8001990 <page0draw.12+0x410>
 800197e:	197b      	adds	r3, r7, r5
 8001980:	4a34      	ldr	r2, [pc, #208]	@ (8001a54 <page0draw.12+0x4d4>)
 8001982:	6811      	ldr	r1, [r2, #0]
 8001984:	6019      	str	r1, [r3, #0]
 8001986:	8891      	ldrh	r1, [r2, #4]
 8001988:	8099      	strh	r1, [r3, #4]
 800198a:	7992      	ldrb	r2, [r2, #6]
 800198c:	719a      	strb	r2, [r3, #6]
 800198e:	e013      	b.n	80019b8 <page0draw.12+0x438>
		else if (status[2] == '0') {strcpy(message2 , "      ");}
 8001990:	2384      	movs	r3, #132	@ 0x84
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	789b      	ldrb	r3, [r3, #2]
 8001996:	2b30      	cmp	r3, #48	@ 0x30
 8001998:	d109      	bne.n	80019ae <page0draw.12+0x42e>
 800199a:	2364      	movs	r3, #100	@ 0x64
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a58 <page0draw.12+0x4d8>)
 80019a0:	6811      	ldr	r1, [r2, #0]
 80019a2:	6019      	str	r1, [r3, #0]
 80019a4:	8891      	ldrh	r1, [r2, #4]
 80019a6:	8099      	strh	r1, [r3, #4]
 80019a8:	7992      	ldrb	r2, [r2, #6]
 80019aa:	719a      	strb	r2, [r3, #6]
 80019ac:	e004      	b.n	80019b8 <page0draw.12+0x438>
		else {strcpy(message2 , "unknown");}
 80019ae:	2364      	movs	r3, #100	@ 0x64
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <page0draw.12+0x4d0>)
 80019b4:	ca03      	ldmia	r2!, {r0, r1}
 80019b6:	c303      	stmia	r3!, {r0, r1}
		lcdPrint(84, 33, message2, 1);
 80019b8:	2364      	movs	r3, #100	@ 0x64
 80019ba:	18fa      	adds	r2, r7, r3
 80019bc:	46a4      	mov	ip, r4
 80019be:	2301      	movs	r3, #1
 80019c0:	2121      	movs	r1, #33	@ 0x21
 80019c2:	2054      	movs	r0, #84	@ 0x54
 80019c4:	f7ff f9a8 	bl	8000d18 <lcdPrint.0>
		char Um[6]={0};  char Ur[6]={0};
 80019c8:	205c      	movs	r0, #92	@ 0x5c
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	809a      	strh	r2, [r3, #4]
 80019d4:	2654      	movs	r6, #84	@ 0x54
 80019d6:	19bb      	adds	r3, r7, r6
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	809a      	strh	r2, [r3, #4]
		strncpy(Um , &rx_buffer[19] , 5);
 80019e0:	2308      	movs	r3, #8
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	0019      	movs	r1, r3
 80019e6:	3113      	adds	r1, #19
 80019e8:	0005      	movs	r5, r0
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	2205      	movs	r2, #5
 80019ee:	0018      	movs	r0, r3
 80019f0:	f004 fd10 	bl	8006414 <strncpy>
		strncpy(Ur , &rx_buffer[13] , 5);
 80019f4:	2308      	movs	r3, #8
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	330d      	adds	r3, #13
 80019fa:	0019      	movs	r1, r3
 80019fc:	19bb      	adds	r3, r7, r6
 80019fe:	2205      	movs	r2, #5
 8001a00:	0018      	movs	r0, r3
 8001a02:	f004 fd07 	bl	8006414 <strncpy>
		lcdPrint(0, 53, "Um:       Ur:", 1);
 8001a06:	4a15      	ldr	r2, [pc, #84]	@ (8001a5c <page0draw.12+0x4dc>)
 8001a08:	46a4      	mov	ip, r4
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2135      	movs	r1, #53	@ 0x35
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff f982 	bl	8000d18 <lcdPrint.0>
		lcdPrint(21, 53, Um, 1); lcdPrint(91, 53, Ur, 1);
 8001a14:	197a      	adds	r2, r7, r5
 8001a16:	46a4      	mov	ip, r4
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2135      	movs	r1, #53	@ 0x35
 8001a1c:	2015      	movs	r0, #21
 8001a1e:	f7ff f97b 	bl	8000d18 <lcdPrint.0>
 8001a22:	19ba      	adds	r2, r7, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2301      	movs	r3, #1
 8001a28:	2135      	movs	r1, #53	@ 0x35
 8001a2a:	205b      	movs	r0, #91	@ 0x5b
 8001a2c:	f7ff f974 	bl	8000d18 <lcdPrint.0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	019b      	lsls	r3, r3, #6
 8001a34:	480a      	ldr	r0, [pc, #40]	@ (8001a60 <page0draw.12+0x4e0>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	0019      	movs	r1, r3
 8001a3a:	f002 fc0c 	bl	8004256 <HAL_GPIO_WritePin>
		SSD1306_UpdateScreen();
 8001a3e:	f001 fc35 	bl	80032ac <SSD1306_UpdateScreen>
}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b02d      	add	sp, #180	@ 0xb4
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	08006eb8 	.word	0x08006eb8
 8001a50:	08006ec8 	.word	0x08006ec8
 8001a54:	08006ed0 	.word	0x08006ed0
 8001a58:	08006ed8 	.word	0x08006ed8
 8001a5c:	08006ee0 	.word	0x08006ee0
 8001a60:	48000800 	.word	0x48000800

08001a64 <pageMenuDraw.13>:
void pageMenuDraw(void){//menu
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4664      	mov	r4, ip
 8001a6c:	4663      	mov	r3, ip
 8001a6e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	019b      	lsls	r3, r3, #6
 8001a74:	482c      	ldr	r0, [pc, #176]	@ (8001b28 <pageMenuDraw.13+0xc4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	0019      	movs	r1, r3
 8001a7a:	f002 fbec 	bl	8004256 <HAL_GPIO_WritePin>
	lcdPrint(0, 0,  " calibration", 1);
 8001a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b2c <pageMenuDraw.13+0xc8>)
 8001a80:	46a4      	mov	ip, r4
 8001a82:	2301      	movs	r3, #1
 8001a84:	2100      	movs	r1, #0
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff f946 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 10, " settings", 1);
 8001a8c:	4a28      	ldr	r2, [pc, #160]	@ (8001b30 <pageMenuDraw.13+0xcc>)
 8001a8e:	46a4      	mov	ip, r4
 8001a90:	2301      	movs	r3, #1
 8001a92:	210a      	movs	r1, #10
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff f93f 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 20, " parameters", 1);
 8001a9a:	4a26      	ldr	r2, [pc, #152]	@ (8001b34 <pageMenuDraw.13+0xd0>)
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2114      	movs	r1, #20
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff f938 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 50, " Exit", 1);
 8001aa8:	4a23      	ldr	r2, [pc, #140]	@ (8001b38 <pageMenuDraw.13+0xd4>)
 8001aaa:	46a4      	mov	ip, r4
 8001aac:	2301      	movs	r3, #1
 8001aae:	2132      	movs	r1, #50	@ 0x32
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff f931 	bl	8000d18 <lcdPrint.0>
	if (selected == 1){lcdPrint(0, 0,  "-", 1);};
 8001ab6:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <pageMenuDraw.13+0xd8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d106      	bne.n	8001acc <pageMenuDraw.13+0x68>
 8001abe:	4a20      	ldr	r2, [pc, #128]	@ (8001b40 <pageMenuDraw.13+0xdc>)
 8001ac0:	46a4      	mov	ip, r4
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff f926 	bl	8000d18 <lcdPrint.0>
	if (selected == 2){lcdPrint(0, 10, "-", 1);};
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <pageMenuDraw.13+0xd8>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d106      	bne.n	8001ae2 <pageMenuDraw.13+0x7e>
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <pageMenuDraw.13+0xdc>)
 8001ad6:	46a4      	mov	ip, r4
 8001ad8:	2301      	movs	r3, #1
 8001ada:	210a      	movs	r1, #10
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff f91b 	bl	8000d18 <lcdPrint.0>
	if (selected == 3){lcdPrint(0, 20, "-", 1);};
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <pageMenuDraw.13+0xd8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d106      	bne.n	8001af8 <pageMenuDraw.13+0x94>
 8001aea:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <pageMenuDraw.13+0xdc>)
 8001aec:	46a4      	mov	ip, r4
 8001aee:	2301      	movs	r3, #1
 8001af0:	2114      	movs	r1, #20
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff f910 	bl	8000d18 <lcdPrint.0>
	if (selected == 0){lcdPrint(0, 50, "-", 1);};
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <pageMenuDraw.13+0xd8>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <pageMenuDraw.13+0xaa>
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <pageMenuDraw.13+0xdc>)
 8001b02:	46a4      	mov	ip, r4
 8001b04:	2301      	movs	r3, #1
 8001b06:	2132      	movs	r1, #50	@ 0x32
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff f905 	bl	8000d18 <lcdPrint.0>
	SSD1306_UpdateScreen();
 8001b0e:	f001 fbcd 	bl	80032ac <SSD1306_UpdateScreen>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <pageMenuDraw.13+0xc4>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	f002 fb9b 	bl	8004256 <HAL_GPIO_WritePin>
}
 8001b20:	46c0      	nop			@ (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b003      	add	sp, #12
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	48000800 	.word	0x48000800
 8001b2c:	08006ef0 	.word	0x08006ef0
 8001b30:	08006f00 	.word	0x08006f00
 8001b34:	08006f0c 	.word	0x08006f0c
 8001b38:	08006f18 	.word	0x08006f18
 8001b3c:	20000181 	.word	0x20000181
 8001b40:	08006f20 	.word	0x08006f20

08001b44 <pageCalibrationDraw.14>:
void pageCalibrationDraw(void){//calibration
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b093      	sub	sp, #76	@ 0x4c
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	4664      	mov	r4, ip
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	607b      	str	r3, [r7, #4]
	lcdPrint(57, 0, " Help",   1);	if (selected == 1) {lcdPrint(57, 0, "-", 1);};
 8001b50:	4acd      	ldr	r2, [pc, #820]	@ (8001e88 <pageCalibrationDraw.14+0x344>)
 8001b52:	46a4      	mov	ip, r4
 8001b54:	2301      	movs	r3, #1
 8001b56:	2100      	movs	r1, #0
 8001b58:	2039      	movs	r0, #57	@ 0x39
 8001b5a:	f7ff f8dd 	bl	8000d18 <lcdPrint.0>
 8001b5e:	4bcb      	ldr	r3, [pc, #812]	@ (8001e8c <pageCalibrationDraw.14+0x348>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d106      	bne.n	8001b74 <pageCalibrationDraw.14+0x30>
 8001b66:	4aca      	ldr	r2, [pc, #808]	@ (8001e90 <pageCalibrationDraw.14+0x34c>)
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2039      	movs	r0, #57	@ 0x39
 8001b70:	f7ff f8d2 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 0, " Zero  ",  1);	if (selected == 2) {lcdPrint(0, 0, "-", 1);};
 8001b74:	4ac7      	ldr	r2, [pc, #796]	@ (8001e94 <pageCalibrationDraw.14+0x350>)
 8001b76:	46a4      	mov	ip, r4
 8001b78:	2301      	movs	r3, #1
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff f8cb 	bl	8000d18 <lcdPrint.0>
 8001b82:	4bc2      	ldr	r3, [pc, #776]	@ (8001e8c <pageCalibrationDraw.14+0x348>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d106      	bne.n	8001b98 <pageCalibrationDraw.14+0x54>
 8001b8a:	4ac1      	ldr	r2, [pc, #772]	@ (8001e90 <pageCalibrationDraw.14+0x34c>)
 8001b8c:	46a4      	mov	ip, r4
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2100      	movs	r1, #0
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff f8c0 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 10, " Calib", 1);	if (selected == 3) {lcdPrint(0, 10, "-", 1);};
 8001b98:	4abf      	ldr	r2, [pc, #764]	@ (8001e98 <pageCalibrationDraw.14+0x354>)
 8001b9a:	46a4      	mov	ip, r4
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	210a      	movs	r1, #10
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff f8b9 	bl	8000d18 <lcdPrint.0>
 8001ba6:	4bb9      	ldr	r3, [pc, #740]	@ (8001e8c <pageCalibrationDraw.14+0x348>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d106      	bne.n	8001bbc <pageCalibrationDraw.14+0x78>
 8001bae:	4ab8      	ldr	r2, [pc, #736]	@ (8001e90 <pageCalibrationDraw.14+0x34c>)
 8001bb0:	46a4      	mov	ip, r4
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	210a      	movs	r1, #10
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff f8ae 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 22, " Zero0 ",  1);	if (selected == 4) {lcdPrint(0, 22, "-", 1);};
 8001bbc:	4ab7      	ldr	r2, [pc, #732]	@ (8001e9c <pageCalibrationDraw.14+0x358>)
 8001bbe:	46a4      	mov	ip, r4
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2116      	movs	r1, #22
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff f8a7 	bl	8000d18 <lcdPrint.0>
 8001bca:	4bb0      	ldr	r3, [pc, #704]	@ (8001e8c <pageCalibrationDraw.14+0x348>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d106      	bne.n	8001be0 <pageCalibrationDraw.14+0x9c>
 8001bd2:	4aaf      	ldr	r2, [pc, #700]	@ (8001e90 <pageCalibrationDraw.14+0x34c>)
 8001bd4:	46a4      	mov	ip, r4
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2116      	movs	r1, #22
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff f89c 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 32, " Init  ",  1);	if (selected == 5) {lcdPrint(0, 32, "-", 1);};
 8001be0:	4aaf      	ldr	r2, [pc, #700]	@ (8001ea0 <pageCalibrationDraw.14+0x35c>)
 8001be2:	46a4      	mov	ip, r4
 8001be4:	2301      	movs	r3, #1
 8001be6:	2120      	movs	r1, #32
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff f895 	bl	8000d18 <lcdPrint.0>
 8001bee:	4ba7      	ldr	r3, [pc, #668]	@ (8001e8c <pageCalibrationDraw.14+0x348>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d106      	bne.n	8001c04 <pageCalibrationDraw.14+0xc0>
 8001bf6:	4aa6      	ldr	r2, [pc, #664]	@ (8001e90 <pageCalibrationDraw.14+0x34c>)
 8001bf8:	46a4      	mov	ip, r4
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff f88a 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 42, " Zero2 ",  1);	if (selected == 6) {lcdPrint(0, 42, "-", 1);};
 8001c04:	4aa7      	ldr	r2, [pc, #668]	@ (8001ea4 <pageCalibrationDraw.14+0x360>)
 8001c06:	46a4      	mov	ip, r4
 8001c08:	2301      	movs	r3, #1
 8001c0a:	212a      	movs	r1, #42	@ 0x2a
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff f883 	bl	8000d18 <lcdPrint.0>
 8001c12:	4b9e      	ldr	r3, [pc, #632]	@ (8001e8c <pageCalibrationDraw.14+0x348>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d106      	bne.n	8001c28 <pageCalibrationDraw.14+0xe4>
 8001c1a:	4a9d      	ldr	r2, [pc, #628]	@ (8001e90 <pageCalibrationDraw.14+0x34c>)
 8001c1c:	46a4      	mov	ip, r4
 8001c1e:	2301      	movs	r3, #1
 8001c20:	212a      	movs	r1, #42	@ 0x2a
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff f878 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 53, " Exit",   1);	if (selected == 0) {lcdPrint(0, 53, "-", 1);};
 8001c28:	4a9f      	ldr	r2, [pc, #636]	@ (8001ea8 <pageCalibrationDraw.14+0x364>)
 8001c2a:	46a4      	mov	ip, r4
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	2135      	movs	r1, #53	@ 0x35
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff f871 	bl	8000d18 <lcdPrint.0>
 8001c36:	4b95      	ldr	r3, [pc, #596]	@ (8001e8c <pageCalibrationDraw.14+0x348>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <pageCalibrationDraw.14+0x108>
 8001c3e:	4a94      	ldr	r2, [pc, #592]	@ (8001e90 <pageCalibrationDraw.14+0x34c>)
 8001c40:	46a4      	mov	ip, r4
 8001c42:	2301      	movs	r3, #1
 8001c44:	2135      	movs	r1, #53	@ 0x35
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff f866 	bl	8000d18 <lcdPrint.0>
	if (HAL_GetTick()-lastPing > 1100){
 8001c4c:	f002 f894 	bl	8003d78 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	4b96      	ldr	r3, [pc, #600]	@ (8001eac <pageCalibrationDraw.14+0x368>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4a95      	ldr	r2, [pc, #596]	@ (8001eb0 <pageCalibrationDraw.14+0x36c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d800      	bhi.n	8001c60 <pageCalibrationDraw.14+0x11c>
 8001c5e:	e0e4      	b.n	8001e2a <pageCalibrationDraw.14+0x2e6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	4893      	ldr	r0, [pc, #588]	@ (8001eb4 <pageCalibrationDraw.14+0x370>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	0019      	movs	r1, r3
 8001c6a:	f002 faf4 	bl	8004256 <HAL_GPIO_WritePin>
		MX_USART2_UART_Init(); uint8_t msg[] = "CCS\r"; uint8_t rx_bufferA[19] = {0};
 8001c6e:	f001 f98f 	bl	8002f90 <MX_USART2_UART_Init>
 8001c72:	2638      	movs	r6, #56	@ 0x38
 8001c74:	19bb      	adds	r3, r7, r6
 8001c76:	4a90      	ldr	r2, [pc, #576]	@ (8001eb8 <pageCalibrationDraw.14+0x374>)
 8001c78:	6811      	ldr	r1, [r2, #0]
 8001c7a:	6019      	str	r1, [r3, #0]
 8001c7c:	7912      	ldrb	r2, [r2, #4]
 8001c7e:	711a      	strb	r2, [r3, #4]
 8001c80:	2524      	movs	r5, #36	@ 0x24
 8001c82:	197b      	adds	r3, r7, r5
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f004 fbb8 	bl	8006404 <memset>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8001c94:	19b9      	adds	r1, r7, r6
 8001c96:	4889      	ldr	r0, [pc, #548]	@ (8001ebc <pageCalibrationDraw.14+0x378>)
 8001c98:	2332      	movs	r3, #50	@ 0x32
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f003 fe12 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_bufferA, 18, 50);
 8001ca0:	1979      	adds	r1, r7, r5
 8001ca2:	4886      	ldr	r0, [pc, #536]	@ (8001ebc <pageCalibrationDraw.14+0x378>)
 8001ca4:	2332      	movs	r3, #50	@ 0x32
 8001ca6:	2212      	movs	r2, #18
 8001ca8:	f003 feac 	bl	8005a04 <HAL_UART_Receive>
		lastPing = HAL_GetTick();
 8001cac:	f002 f864 	bl	8003d78 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	4b7e      	ldr	r3, [pc, #504]	@ (8001eac <pageCalibrationDraw.14+0x368>)
 8001cb4:	601a      	str	r2, [r3, #0]
		if (rx_bufferA[17] != 0x0D) {memset(rx_bufferA, 0x20, sizeof(rx_bufferA)/sizeof(rx_bufferA[0]));}
 8001cb6:	197b      	adds	r3, r7, r5
 8001cb8:	7c5b      	ldrb	r3, [r3, #17]
 8001cba:	2b0d      	cmp	r3, #13
 8001cbc:	d005      	beq.n	8001cca <pageCalibrationDraw.14+0x186>
 8001cbe:	197b      	adds	r3, r7, r5
 8001cc0:	2213      	movs	r2, #19
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f004 fb9d 	bl	8006404 <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	4879      	ldr	r0, [pc, #484]	@ (8001eb4 <pageCalibrationDraw.14+0x370>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	f002 fabf 	bl	8004256 <HAL_GPIO_WritePin>
		char C1[6]; 	strncpy(C1, &rx_bufferA[0] , 5); 	lcdPrint(71, 33, "C1:", 1);		 lcdPrint(92, 33, C1, 1);
 8001cd8:	2524      	movs	r5, #36	@ 0x24
 8001cda:	1979      	adds	r1, r7, r5
 8001cdc:	261c      	movs	r6, #28
 8001cde:	19bb      	adds	r3, r7, r6
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f004 fb96 	bl	8006414 <strncpy>
 8001ce8:	4a75      	ldr	r2, [pc, #468]	@ (8001ec0 <pageCalibrationDraw.14+0x37c>)
 8001cea:	46a4      	mov	ip, r4
 8001cec:	2301      	movs	r3, #1
 8001cee:	2121      	movs	r1, #33	@ 0x21
 8001cf0:	2047      	movs	r0, #71	@ 0x47
 8001cf2:	f7ff f811 	bl	8000d18 <lcdPrint.0>
 8001cf6:	19ba      	adds	r2, r7, r6
 8001cf8:	46a4      	mov	ip, r4
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2121      	movs	r1, #33	@ 0x21
 8001cfe:	205c      	movs	r0, #92	@ 0x5c
 8001d00:	f7ff f80a 	bl	8000d18 <lcdPrint.0>
		char Temp[6]; 	strncpy(Temp, &rx_bufferA[6] , 5);	lcdPrint(57, 43, "Temp:", 1);	 lcdPrint(92, 43, Temp, 1);
 8001d04:	197b      	adds	r3, r7, r5
 8001d06:	1d99      	adds	r1, r3, #6
 8001d08:	2314      	movs	r3, #20
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f004 fb80 	bl	8006414 <strncpy>
 8001d14:	4a6b      	ldr	r2, [pc, #428]	@ (8001ec4 <pageCalibrationDraw.14+0x380>)
 8001d16:	46a4      	mov	ip, r4
 8001d18:	2301      	movs	r3, #1
 8001d1a:	212b      	movs	r1, #43	@ 0x2b
 8001d1c:	2039      	movs	r0, #57	@ 0x39
 8001d1e:	f7fe fffb 	bl	8000d18 <lcdPrint.0>
 8001d22:	2314      	movs	r3, #20
 8001d24:	18fa      	adds	r2, r7, r3
 8001d26:	46a4      	mov	ip, r4
 8001d28:	2301      	movs	r3, #1
 8001d2a:	212b      	movs	r1, #43	@ 0x2b
 8001d2c:	205c      	movs	r0, #92	@ 0x5c
 8001d2e:	f7fe fff3 	bl	8000d18 <lcdPrint.0>
		char Stat[6]; 	strncpy(Stat, &rx_bufferA[12] , 5);	lcdPrint(57, 53, "Stat:", 1);	 lcdPrint(92, 53, Stat, 1);
 8001d32:	197b      	adds	r3, r7, r5
 8001d34:	330c      	adds	r3, #12
 8001d36:	0019      	movs	r1, r3
 8001d38:	250c      	movs	r5, #12
 8001d3a:	197b      	adds	r3, r7, r5
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f004 fb68 	bl	8006414 <strncpy>
 8001d44:	4a60      	ldr	r2, [pc, #384]	@ (8001ec8 <pageCalibrationDraw.14+0x384>)
 8001d46:	46a4      	mov	ip, r4
 8001d48:	2301      	movs	r3, #1
 8001d4a:	2135      	movs	r1, #53	@ 0x35
 8001d4c:	2039      	movs	r0, #57	@ 0x39
 8001d4e:	f7fe ffe3 	bl	8000d18 <lcdPrint.0>
 8001d52:	197a      	adds	r2, r7, r5
 8001d54:	46a4      	mov	ip, r4
 8001d56:	2301      	movs	r3, #1
 8001d58:	2135      	movs	r1, #53	@ 0x35
 8001d5a:	205c      	movs	r0, #92	@ 0x5c
 8001d5c:	f7fe ffdc 	bl	8000d18 <lcdPrint.0>
		int16_t NKPR = atoi(C1); NKPR = round(NKPR/4.4f); if (C1[0]==0x2D){NKPR=-1;} else if (C1[0]==0x20){NKPR=-11;} else if (NKPR>999){NKPR=999;}
 8001d60:	19bb      	adds	r3, r7, r6
 8001d62:	0018      	movs	r0, r3
 8001d64:	f004 fa92 	bl	800628c <atoi>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	253e      	movs	r5, #62	@ 0x3e
 8001d6c:	197b      	adds	r3, r7, r5
 8001d6e:	801a      	strh	r2, [r3, #0]
 8001d70:	197b      	adds	r3, r7, r5
 8001d72:	2200      	movs	r2, #0
 8001d74:	5e9b      	ldrsh	r3, [r3, r2]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7fe fb7c 	bl	8000474 <__aeabi_i2f>
 8001d7c:	1c03      	adds	r3, r0, #0
 8001d7e:	4953      	ldr	r1, [pc, #332]	@ (8001ecc <pageCalibrationDraw.14+0x388>)
 8001d80:	1c18      	adds	r0, r3, #0
 8001d82:	f7fe fa57 	bl	8000234 <__aeabi_fdiv>
 8001d86:	1c03      	adds	r3, r0, #0
 8001d88:	1c18      	adds	r0, r3, #0
 8001d8a:	f7fe ff5f 	bl	8000c4c <__aeabi_f2d>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	000b      	movs	r3, r1
 8001d92:	0010      	movs	r0, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	f004 ffc7 	bl	8006d28 <round>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	000b      	movs	r3, r1
 8001d9e:	197d      	adds	r5, r7, r5
 8001da0:	0010      	movs	r0, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	f7fe ff16 	bl	8000bd4 <__aeabi_d2iz>
 8001da8:	0003      	movs	r3, r0
 8001daa:	802b      	strh	r3, [r5, #0]
 8001dac:	19bb      	adds	r3, r7, r6
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b2d      	cmp	r3, #45	@ 0x2d
 8001db2:	d105      	bne.n	8001dc0 <pageCalibrationDraw.14+0x27c>
 8001db4:	253e      	movs	r5, #62	@ 0x3e
 8001db6:	197b      	adds	r3, r7, r5
 8001db8:	2201      	movs	r2, #1
 8001dba:	4252      	negs	r2, r2
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	e015      	b.n	8001dec <pageCalibrationDraw.14+0x2a8>
 8001dc0:	231c      	movs	r3, #28
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d105      	bne.n	8001dd6 <pageCalibrationDraw.14+0x292>
 8001dca:	233e      	movs	r3, #62	@ 0x3e
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	220b      	movs	r2, #11
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	801a      	strh	r2, [r3, #0]
 8001dd4:	e00a      	b.n	8001dec <pageCalibrationDraw.14+0x2a8>
 8001dd6:	213e      	movs	r1, #62	@ 0x3e
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	2200      	movs	r2, #0
 8001ddc:	5e9a      	ldrsh	r2, [r3, r2]
 8001dde:	23fa      	movs	r3, #250	@ 0xfa
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	429a      	cmp	r2, r3
 8001de4:	db02      	blt.n	8001dec <pageCalibrationDraw.14+0x2a8>
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	4a39      	ldr	r2, [pc, #228]	@ (8001ed0 <pageCalibrationDraw.14+0x38c>)
 8001dea:	801a      	strh	r2, [r3, #0]
		char NKPRchar[3];	lcdPrint(92, 12, "   ", 2);	sprintf (NKPRchar, "%d", NKPR);
 8001dec:	4a39      	ldr	r2, [pc, #228]	@ (8001ed4 <pageCalibrationDraw.14+0x390>)
 8001dee:	46a4      	mov	ip, r4
 8001df0:	2302      	movs	r3, #2
 8001df2:	210c      	movs	r1, #12
 8001df4:	205c      	movs	r0, #92	@ 0x5c
 8001df6:	f7fe ff8f 	bl	8000d18 <lcdPrint.0>
 8001dfa:	233e      	movs	r3, #62	@ 0x3e
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2200      	movs	r2, #0
 8001e00:	5e9a      	ldrsh	r2, [r3, r2]
 8001e02:	4935      	ldr	r1, [pc, #212]	@ (8001ed8 <pageCalibrationDraw.14+0x394>)
 8001e04:	2508      	movs	r5, #8
 8001e06:	197b      	adds	r3, r7, r5
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f004 fadb 	bl	80063c4 <siprintf>
		lcdPrint(57, 20, "NKPR:", 1);	lcdPrint(92, 12, NKPRchar, 2);
 8001e0e:	4a33      	ldr	r2, [pc, #204]	@ (8001edc <pageCalibrationDraw.14+0x398>)
 8001e10:	46a4      	mov	ip, r4
 8001e12:	2301      	movs	r3, #1
 8001e14:	2114      	movs	r1, #20
 8001e16:	2039      	movs	r0, #57	@ 0x39
 8001e18:	f7fe ff7e 	bl	8000d18 <lcdPrint.0>
 8001e1c:	197a      	adds	r2, r7, r5
 8001e1e:	46a4      	mov	ip, r4
 8001e20:	2302      	movs	r3, #2
 8001e22:	210c      	movs	r1, #12
 8001e24:	205c      	movs	r0, #92	@ 0x5c
 8001e26:	f7fe ff77 	bl	8000d18 <lcdPrint.0>
	SSD1306_DrawLine(0, 20, 55, 20, 1); SSD1306_DrawLine(0, 52, 55, 52, 1); SSD1306_DrawLine(55, 10, 128, 10, 1);	SSD1306_DrawLine(55, 0, 55, 64, 1);	SSD1306_DrawLine(55, 30, 128, 30, 1);
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2314      	movs	r3, #20
 8001e30:	2237      	movs	r2, #55	@ 0x37
 8001e32:	2114      	movs	r1, #20
 8001e34:	2000      	movs	r0, #0
 8001e36:	f001 fbc5 	bl	80035c4 <SSD1306_DrawLine>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2334      	movs	r3, #52	@ 0x34
 8001e40:	2237      	movs	r2, #55	@ 0x37
 8001e42:	2134      	movs	r1, #52	@ 0x34
 8001e44:	2000      	movs	r0, #0
 8001e46:	f001 fbbd 	bl	80035c4 <SSD1306_DrawLine>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	230a      	movs	r3, #10
 8001e50:	2280      	movs	r2, #128	@ 0x80
 8001e52:	210a      	movs	r1, #10
 8001e54:	2037      	movs	r0, #55	@ 0x37
 8001e56:	f001 fbb5 	bl	80035c4 <SSD1306_DrawLine>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2340      	movs	r3, #64	@ 0x40
 8001e60:	2237      	movs	r2, #55	@ 0x37
 8001e62:	2100      	movs	r1, #0
 8001e64:	2037      	movs	r0, #55	@ 0x37
 8001e66:	f001 fbad 	bl	80035c4 <SSD1306_DrawLine>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	231e      	movs	r3, #30
 8001e70:	2280      	movs	r2, #128	@ 0x80
 8001e72:	211e      	movs	r1, #30
 8001e74:	2037      	movs	r0, #55	@ 0x37
 8001e76:	f001 fba5 	bl	80035c4 <SSD1306_DrawLine>
	SSD1306_UpdateScreen();
 8001e7a:	f001 fa17 	bl	80032ac <SSD1306_UpdateScreen>
}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b011      	add	sp, #68	@ 0x44
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	08006f24 	.word	0x08006f24
 8001e8c:	20000181 	.word	0x20000181
 8001e90:	08006f20 	.word	0x08006f20
 8001e94:	08006f2c 	.word	0x08006f2c
 8001e98:	08006f34 	.word	0x08006f34
 8001e9c:	08006f3c 	.word	0x08006f3c
 8001ea0:	08006f44 	.word	0x08006f44
 8001ea4:	08006f4c 	.word	0x08006f4c
 8001ea8:	08006f18 	.word	0x08006f18
 8001eac:	20000184 	.word	0x20000184
 8001eb0:	0000044c 	.word	0x0000044c
 8001eb4:	48000800 	.word	0x48000800
 8001eb8:	08006f78 	.word	0x08006f78
 8001ebc:	200000f0 	.word	0x200000f0
 8001ec0:	08006f54 	.word	0x08006f54
 8001ec4:	08006f58 	.word	0x08006f58
 8001ec8:	08006f60 	.word	0x08006f60
 8001ecc:	408ccccd 	.word	0x408ccccd
 8001ed0:	000003e7 	.word	0x000003e7
 8001ed4:	08006f68 	.word	0x08006f68
 8001ed8:	08006f6c 	.word	0x08006f6c
 8001edc:	08006f70 	.word	0x08006f70

08001ee0 <zero.1>:
void zero(void){
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4664      	mov	r4, ip
 8001ee8:	4663      	mov	r3, ip
 8001eea:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	f001 ff43 	bl	8003d78 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <zero.1+0xc4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <zero.1+0xc8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d9f6      	bls.n	8001eee <zero.1+0xe>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	019b      	lsls	r3, r3, #6
 8001f04:	4829      	ldr	r0, [pc, #164]	@ (8001fac <zero.1+0xcc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	0019      	movs	r1, r3
 8001f0a:	f002 f9a4 	bl	8004256 <HAL_GPIO_WritePin>
	uint8_t msg[]="ZERO\r";
 8001f0e:	2618      	movs	r6, #24
 8001f10:	19bb      	adds	r3, r7, r6
 8001f12:	4a27      	ldr	r2, [pc, #156]	@ (8001fb0 <zero.1+0xd0>)
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	6019      	str	r1, [r3, #0]
 8001f18:	8892      	ldrh	r2, [r2, #4]
 8001f1a:	809a      	strh	r2, [r3, #4]
	uint8_t rx_buff[10]={0};
 8001f1c:	250c      	movs	r5, #12
 8001f1e:	197b      	adds	r3, r7, r5
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2206      	movs	r2, #6
 8001f28:	2100      	movs	r1, #0
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f004 fa6a 	bl	8006404 <memset>
	MX_USART2_UART_Init();
 8001f30:	f001 f82e 	bl	8002f90 <MX_USART2_UART_Init>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8001f34:	19b9      	adds	r1, r7, r6
 8001f36:	481f      	ldr	r0, [pc, #124]	@ (8001fb4 <zero.1+0xd4>)
 8001f38:	2332      	movs	r3, #50	@ 0x32
 8001f3a:	2206      	movs	r2, #6
 8001f3c:	f003 fcc2 	bl	80058c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rx_buff, 10, 50);
 8001f40:	1979      	adds	r1, r7, r5
 8001f42:	481c      	ldr	r0, [pc, #112]	@ (8001fb4 <zero.1+0xd4>)
 8001f44:	2332      	movs	r3, #50	@ 0x32
 8001f46:	220a      	movs	r2, #10
 8001f48:	f003 fd5c 	bl	8005a04 <HAL_UART_Receive>
	lastPing = HAL_GetTick();
 8001f4c:	f001 ff14 	bl	8003d78 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <zero.1+0xc4>)
 8001f54:	601a      	str	r2, [r3, #0]
	if (rx_buff[5]==0x4F && rx_buff[6]==0x4B){lcdPrintUpdate(7, 0, "OK    ",  1);}
 8001f56:	197b      	adds	r3, r7, r5
 8001f58:	795b      	ldrb	r3, [r3, #5]
 8001f5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8001f5c:	d10b      	bne.n	8001f76 <zero.1+0x96>
 8001f5e:	197b      	adds	r3, r7, r5
 8001f60:	799b      	ldrb	r3, [r3, #6]
 8001f62:	2b4b      	cmp	r3, #75	@ 0x4b
 8001f64:	d107      	bne.n	8001f76 <zero.1+0x96>
 8001f66:	4a14      	ldr	r2, [pc, #80]	@ (8001fb8 <zero.1+0xd8>)
 8001f68:	46a4      	mov	ip, r4
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2007      	movs	r0, #7
 8001f70:	f7ff fadc 	bl	800152c <lcdPrintUpdate.10>
 8001f74:	e006      	b.n	8001f84 <zero.1+0xa4>
	else {lcdPrintUpdate(7, 0, "FAULT ",  1);}
 8001f76:	4a11      	ldr	r2, [pc, #68]	@ (8001fbc <zero.1+0xdc>)
 8001f78:	46a4      	mov	ip, r4
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2007      	movs	r0, #7
 8001f80:	f7ff fad4 	bl	800152c <lcdPrintUpdate.10>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	4808      	ldr	r0, [pc, #32]	@ (8001fac <zero.1+0xcc>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	f002 f962 	bl	8004256 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001f92:	23fa      	movs	r3, #250	@ 0xfa
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	0018      	movs	r0, r3
 8001f98:	f001 fef8 	bl	8003d8c <HAL_Delay>
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b009      	add	sp, #36	@ 0x24
 8001fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa4:	20000184 	.word	0x20000184
 8001fa8:	0000044b 	.word	0x0000044b
 8001fac:	48000800 	.word	0x48000800
 8001fb0:	08006f90 	.word	0x08006f90
 8001fb4:	200000f0 	.word	0x200000f0
 8001fb8:	08006f80 	.word	0x08006f80
 8001fbc:	08006f88 	.word	0x08006f88

08001fc0 <zero0.2>:
void zero0(void){
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4664      	mov	r4, ip
 8001fc8:	4663      	mov	r3, ip
 8001fca:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	f001 fed3 	bl	8003d78 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <zero0.2+0xc8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	4a2c      	ldr	r2, [pc, #176]	@ (800208c <zero0.2+0xcc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d9f6      	bls.n	8001fce <zero0.2+0xe>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	019b      	lsls	r3, r3, #6
 8001fe4:	482a      	ldr	r0, [pc, #168]	@ (8002090 <zero0.2+0xd0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	0019      	movs	r1, r3
 8001fea:	f002 f934 	bl	8004256 <HAL_GPIO_WritePin>
	uint8_t msg[]="ZERO0\r";
 8001fee:	2618      	movs	r6, #24
 8001ff0:	19bb      	adds	r3, r7, r6
 8001ff2:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <zero0.2+0xd4>)
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	6019      	str	r1, [r3, #0]
 8001ff8:	8891      	ldrh	r1, [r2, #4]
 8001ffa:	8099      	strh	r1, [r3, #4]
 8001ffc:	7992      	ldrb	r2, [r2, #6]
 8001ffe:	719a      	strb	r2, [r3, #6]
	uint8_t rx_buff[10]={0};
 8002000:	250c      	movs	r5, #12
 8002002:	197b      	adds	r3, r7, r5
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	3304      	adds	r3, #4
 800200a:	2206      	movs	r2, #6
 800200c:	2100      	movs	r1, #0
 800200e:	0018      	movs	r0, r3
 8002010:	f004 f9f8 	bl	8006404 <memset>
	MX_USART2_UART_Init();
 8002014:	f000 ffbc 	bl	8002f90 <MX_USART2_UART_Init>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8002018:	19b9      	adds	r1, r7, r6
 800201a:	481f      	ldr	r0, [pc, #124]	@ (8002098 <zero0.2+0xd8>)
 800201c:	2332      	movs	r3, #50	@ 0x32
 800201e:	2207      	movs	r2, #7
 8002020:	f003 fc50 	bl	80058c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rx_buff, 10, 50);
 8002024:	1979      	adds	r1, r7, r5
 8002026:	481c      	ldr	r0, [pc, #112]	@ (8002098 <zero0.2+0xd8>)
 8002028:	2332      	movs	r3, #50	@ 0x32
 800202a:	220a      	movs	r2, #10
 800202c:	f003 fcea 	bl	8005a04 <HAL_UART_Receive>
	lastPing = HAL_GetTick();
 8002030:	f001 fea2 	bl	8003d78 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <zero0.2+0xc8>)
 8002038:	601a      	str	r2, [r3, #0]
	if (rx_buff[6]==0x4F && rx_buff[7]==0x4B){lcdPrintUpdate(7, 22, "OK    ",  1);}
 800203a:	197b      	adds	r3, r7, r5
 800203c:	799b      	ldrb	r3, [r3, #6]
 800203e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002040:	d10b      	bne.n	800205a <zero0.2+0x9a>
 8002042:	197b      	adds	r3, r7, r5
 8002044:	79db      	ldrb	r3, [r3, #7]
 8002046:	2b4b      	cmp	r3, #75	@ 0x4b
 8002048:	d107      	bne.n	800205a <zero0.2+0x9a>
 800204a:	4a14      	ldr	r2, [pc, #80]	@ (800209c <zero0.2+0xdc>)
 800204c:	46a4      	mov	ip, r4
 800204e:	2301      	movs	r3, #1
 8002050:	2116      	movs	r1, #22
 8002052:	2007      	movs	r0, #7
 8002054:	f7ff fa6a 	bl	800152c <lcdPrintUpdate.10>
 8002058:	e006      	b.n	8002068 <zero0.2+0xa8>
	else {lcdPrintUpdate(7, 22, "FAULT ",  1);}
 800205a:	4a11      	ldr	r2, [pc, #68]	@ (80020a0 <zero0.2+0xe0>)
 800205c:	46a4      	mov	ip, r4
 800205e:	2301      	movs	r3, #1
 8002060:	2116      	movs	r1, #22
 8002062:	2007      	movs	r0, #7
 8002064:	f7ff fa62 	bl	800152c <lcdPrintUpdate.10>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	019b      	lsls	r3, r3, #6
 800206c:	4808      	ldr	r0, [pc, #32]	@ (8002090 <zero0.2+0xd0>)
 800206e:	2201      	movs	r2, #1
 8002070:	0019      	movs	r1, r3
 8002072:	f002 f8f0 	bl	8004256 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002076:	23fa      	movs	r3, #250	@ 0xfa
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	0018      	movs	r0, r3
 800207c:	f001 fe86 	bl	8003d8c <HAL_Delay>
}
 8002080:	46c0      	nop			@ (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b009      	add	sp, #36	@ 0x24
 8002086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002088:	20000184 	.word	0x20000184
 800208c:	0000044b 	.word	0x0000044b
 8002090:	48000800 	.word	0x48000800
 8002094:	08006f98 	.word	0x08006f98
 8002098:	200000f0 	.word	0x200000f0
 800209c:	08006f80 	.word	0x08006f80
 80020a0:	08006f88 	.word	0x08006f88

080020a4 <init.3>:
void init(void){
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	b089      	sub	sp, #36	@ 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4664      	mov	r4, ip
 80020ac:	4663      	mov	r3, ip
 80020ae:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	f001 fe61 	bl	8003d78 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002168 <init.3+0xc4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	4a2b      	ldr	r2, [pc, #172]	@ (800216c <init.3+0xc8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d9f6      	bls.n	80020b2 <init.3+0xe>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	019b      	lsls	r3, r3, #6
 80020c8:	4829      	ldr	r0, [pc, #164]	@ (8002170 <init.3+0xcc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	0019      	movs	r1, r3
 80020ce:	f002 f8c2 	bl	8004256 <HAL_GPIO_WritePin>
	uint8_t msg[]="INIT\r";
 80020d2:	2618      	movs	r6, #24
 80020d4:	19bb      	adds	r3, r7, r6
 80020d6:	4a27      	ldr	r2, [pc, #156]	@ (8002174 <init.3+0xd0>)
 80020d8:	6811      	ldr	r1, [r2, #0]
 80020da:	6019      	str	r1, [r3, #0]
 80020dc:	8892      	ldrh	r2, [r2, #4]
 80020de:	809a      	strh	r2, [r3, #4]
	uint8_t rx_buff[10]={0};
 80020e0:	250c      	movs	r5, #12
 80020e2:	197b      	adds	r3, r7, r5
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2206      	movs	r2, #6
 80020ec:	2100      	movs	r1, #0
 80020ee:	0018      	movs	r0, r3
 80020f0:	f004 f988 	bl	8006404 <memset>
	MX_USART2_UART_Init();
 80020f4:	f000 ff4c 	bl	8002f90 <MX_USART2_UART_Init>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 80020f8:	19b9      	adds	r1, r7, r6
 80020fa:	481f      	ldr	r0, [pc, #124]	@ (8002178 <init.3+0xd4>)
 80020fc:	2332      	movs	r3, #50	@ 0x32
 80020fe:	2206      	movs	r2, #6
 8002100:	f003 fbe0 	bl	80058c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rx_buff, 10, 50);
 8002104:	1979      	adds	r1, r7, r5
 8002106:	481c      	ldr	r0, [pc, #112]	@ (8002178 <init.3+0xd4>)
 8002108:	2332      	movs	r3, #50	@ 0x32
 800210a:	220a      	movs	r2, #10
 800210c:	f003 fc7a 	bl	8005a04 <HAL_UART_Receive>
	lastPing = HAL_GetTick();
 8002110:	f001 fe32 	bl	8003d78 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <init.3+0xc4>)
 8002118:	601a      	str	r2, [r3, #0]
	if (rx_buff[5]==0x4F && rx_buff[6]==0x4B){lcdPrintUpdate(7, 32, "OK    ",  1);}
 800211a:	197b      	adds	r3, r7, r5
 800211c:	795b      	ldrb	r3, [r3, #5]
 800211e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002120:	d10b      	bne.n	800213a <init.3+0x96>
 8002122:	197b      	adds	r3, r7, r5
 8002124:	799b      	ldrb	r3, [r3, #6]
 8002126:	2b4b      	cmp	r3, #75	@ 0x4b
 8002128:	d107      	bne.n	800213a <init.3+0x96>
 800212a:	4a14      	ldr	r2, [pc, #80]	@ (800217c <init.3+0xd8>)
 800212c:	46a4      	mov	ip, r4
 800212e:	2301      	movs	r3, #1
 8002130:	2120      	movs	r1, #32
 8002132:	2007      	movs	r0, #7
 8002134:	f7ff f9fa 	bl	800152c <lcdPrintUpdate.10>
 8002138:	e006      	b.n	8002148 <init.3+0xa4>
	else {lcdPrintUpdate(7, 32, "FAULT ",  1);}
 800213a:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <init.3+0xdc>)
 800213c:	46a4      	mov	ip, r4
 800213e:	2301      	movs	r3, #1
 8002140:	2120      	movs	r1, #32
 8002142:	2007      	movs	r0, #7
 8002144:	f7ff f9f2 	bl	800152c <lcdPrintUpdate.10>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	019b      	lsls	r3, r3, #6
 800214c:	4808      	ldr	r0, [pc, #32]	@ (8002170 <init.3+0xcc>)
 800214e:	2201      	movs	r2, #1
 8002150:	0019      	movs	r1, r3
 8002152:	f002 f880 	bl	8004256 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002156:	23fa      	movs	r3, #250	@ 0xfa
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	0018      	movs	r0, r3
 800215c:	f001 fe16 	bl	8003d8c <HAL_Delay>
}
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b009      	add	sp, #36	@ 0x24
 8002166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002168:	20000184 	.word	0x20000184
 800216c:	0000044b 	.word	0x0000044b
 8002170:	48000800 	.word	0x48000800
 8002174:	08006fa0 	.word	0x08006fa0
 8002178:	200000f0 	.word	0x200000f0
 800217c:	08006f80 	.word	0x08006f80
 8002180:	08006f88 	.word	0x08006f88

08002184 <zero2.4>:
void zero2(void){
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	4664      	mov	r4, ip
 800218c:	4663      	mov	r3, ip
 800218e:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 8002190:	46c0      	nop			@ (mov r8, r8)
 8002192:	f001 fdf1 	bl	8003d78 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <zero2.4+0xc8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	4a2c      	ldr	r2, [pc, #176]	@ (8002250 <zero2.4+0xcc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d9f6      	bls.n	8002192 <zero2.4+0xe>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	019b      	lsls	r3, r3, #6
 80021a8:	482a      	ldr	r0, [pc, #168]	@ (8002254 <zero2.4+0xd0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	0019      	movs	r1, r3
 80021ae:	f002 f852 	bl	8004256 <HAL_GPIO_WritePin>
	uint8_t msg[]="ZERO2\r";
 80021b2:	2618      	movs	r6, #24
 80021b4:	19bb      	adds	r3, r7, r6
 80021b6:	4a28      	ldr	r2, [pc, #160]	@ (8002258 <zero2.4+0xd4>)
 80021b8:	6811      	ldr	r1, [r2, #0]
 80021ba:	6019      	str	r1, [r3, #0]
 80021bc:	8891      	ldrh	r1, [r2, #4]
 80021be:	8099      	strh	r1, [r3, #4]
 80021c0:	7992      	ldrb	r2, [r2, #6]
 80021c2:	719a      	strb	r2, [r3, #6]
	uint8_t rx_buff[10]={0};
 80021c4:	250c      	movs	r5, #12
 80021c6:	197b      	adds	r3, r7, r5
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2206      	movs	r2, #6
 80021d0:	2100      	movs	r1, #0
 80021d2:	0018      	movs	r0, r3
 80021d4:	f004 f916 	bl	8006404 <memset>
	MX_USART2_UART_Init();
 80021d8:	f000 feda 	bl	8002f90 <MX_USART2_UART_Init>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 80021dc:	19b9      	adds	r1, r7, r6
 80021de:	481f      	ldr	r0, [pc, #124]	@ (800225c <zero2.4+0xd8>)
 80021e0:	2332      	movs	r3, #50	@ 0x32
 80021e2:	2207      	movs	r2, #7
 80021e4:	f003 fb6e 	bl	80058c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rx_buff, 10, 50);
 80021e8:	1979      	adds	r1, r7, r5
 80021ea:	481c      	ldr	r0, [pc, #112]	@ (800225c <zero2.4+0xd8>)
 80021ec:	2332      	movs	r3, #50	@ 0x32
 80021ee:	220a      	movs	r2, #10
 80021f0:	f003 fc08 	bl	8005a04 <HAL_UART_Receive>
	lastPing = HAL_GetTick();
 80021f4:	f001 fdc0 	bl	8003d78 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	4b14      	ldr	r3, [pc, #80]	@ (800224c <zero2.4+0xc8>)
 80021fc:	601a      	str	r2, [r3, #0]
	if (rx_buff[6]==0x4F && rx_buff[7]==0x4B){lcdPrintUpdate(7, 42, "OK    ",  1);}
 80021fe:	197b      	adds	r3, r7, r5
 8002200:	799b      	ldrb	r3, [r3, #6]
 8002202:	2b4f      	cmp	r3, #79	@ 0x4f
 8002204:	d10b      	bne.n	800221e <zero2.4+0x9a>
 8002206:	197b      	adds	r3, r7, r5
 8002208:	79db      	ldrb	r3, [r3, #7]
 800220a:	2b4b      	cmp	r3, #75	@ 0x4b
 800220c:	d107      	bne.n	800221e <zero2.4+0x9a>
 800220e:	4a14      	ldr	r2, [pc, #80]	@ (8002260 <zero2.4+0xdc>)
 8002210:	46a4      	mov	ip, r4
 8002212:	2301      	movs	r3, #1
 8002214:	212a      	movs	r1, #42	@ 0x2a
 8002216:	2007      	movs	r0, #7
 8002218:	f7ff f988 	bl	800152c <lcdPrintUpdate.10>
 800221c:	e006      	b.n	800222c <zero2.4+0xa8>
	else {lcdPrintUpdate(7, 42, "FAULT ",  1);}
 800221e:	4a11      	ldr	r2, [pc, #68]	@ (8002264 <zero2.4+0xe0>)
 8002220:	46a4      	mov	ip, r4
 8002222:	2301      	movs	r3, #1
 8002224:	212a      	movs	r1, #42	@ 0x2a
 8002226:	2007      	movs	r0, #7
 8002228:	f7ff f980 	bl	800152c <lcdPrintUpdate.10>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	019b      	lsls	r3, r3, #6
 8002230:	4808      	ldr	r0, [pc, #32]	@ (8002254 <zero2.4+0xd0>)
 8002232:	2201      	movs	r2, #1
 8002234:	0019      	movs	r1, r3
 8002236:	f002 f80e 	bl	8004256 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800223a:	23fa      	movs	r3, #250	@ 0xfa
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	0018      	movs	r0, r3
 8002240:	f001 fda4 	bl	8003d8c <HAL_Delay>
}
 8002244:	46c0      	nop			@ (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b009      	add	sp, #36	@ 0x24
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224c:	20000184 	.word	0x20000184
 8002250:	0000044b 	.word	0x0000044b
 8002254:	48000800 	.word	0x48000800
 8002258:	08006fa8 	.word	0x08006fa8
 800225c:	200000f0 	.word	0x200000f0
 8002260:	08006f80 	.word	0x08006f80
 8002264:	08006f88 	.word	0x08006f88

08002268 <pageCalib50draw.15>:
void pageCalib50draw(void){
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	4664      	mov	r4, ip
 8002270:	4663      	mov	r3, ip
 8002272:	607b      	str	r3, [r7, #4]
	uint8_t Y = 22;
 8002274:	250f      	movs	r5, #15
 8002276:	197b      	adds	r3, r7, r5
 8002278:	2216      	movs	r2, #22
 800227a:	701a      	strb	r2, [r3, #0]
	lcdPrint(0, 0, "VOL.PERCENT", 2);
 800227c:	4a4e      	ldr	r2, [pc, #312]	@ (80023b8 <pageCalib50draw.15+0x150>)
 800227e:	46a4      	mov	ip, r4
 8002280:	2302      	movs	r3, #2
 8002282:	2100      	movs	r1, #0
 8002284:	2000      	movs	r0, #0
 8002286:	f7fe fd47 	bl	8000d18 <lcdPrint.0>
	selected == 1 ?	lcdPrintSymbol(35, Y, volPercent[0], 20)	:	lcdPrintSymbol(35, Y, volPercent[0], 2);
 800228a:	4b4c      	ldr	r3, [pc, #304]	@ (80023bc <pageCalib50draw.15+0x154>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d109      	bne.n	80022a6 <pageCalib50draw.15+0x3e>
 8002292:	4b4b      	ldr	r3, [pc, #300]	@ (80023c0 <pageCalib50draw.15+0x158>)
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	197b      	adds	r3, r7, r5
 8002298:	7819      	ldrb	r1, [r3, #0]
 800229a:	46a4      	mov	ip, r4
 800229c:	2314      	movs	r3, #20
 800229e:	2023      	movs	r0, #35	@ 0x23
 80022a0:	f7ff f8d2 	bl	8001448 <lcdPrintSymbol.16>
 80022a4:	e009      	b.n	80022ba <pageCalib50draw.15+0x52>
 80022a6:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <pageCalib50draw.15+0x158>)
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	230f      	movs	r3, #15
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	7819      	ldrb	r1, [r3, #0]
 80022b0:	46a4      	mov	ip, r4
 80022b2:	2302      	movs	r3, #2
 80022b4:	2023      	movs	r0, #35	@ 0x23
 80022b6:	f7ff f8c7 	bl	8001448 <lcdPrintSymbol.16>
	selected == 2 ? lcdPrintSymbol(35+11, Y, volPercent[1], 20)	:	lcdPrintSymbol(35+11, Y, volPercent[1], 2);
 80022ba:	4b40      	ldr	r3, [pc, #256]	@ (80023bc <pageCalib50draw.15+0x154>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d10a      	bne.n	80022d8 <pageCalib50draw.15+0x70>
 80022c2:	4b3f      	ldr	r3, [pc, #252]	@ (80023c0 <pageCalib50draw.15+0x158>)
 80022c4:	785a      	ldrb	r2, [r3, #1]
 80022c6:	230f      	movs	r3, #15
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	7819      	ldrb	r1, [r3, #0]
 80022cc:	46a4      	mov	ip, r4
 80022ce:	2314      	movs	r3, #20
 80022d0:	202e      	movs	r0, #46	@ 0x2e
 80022d2:	f7ff f8b9 	bl	8001448 <lcdPrintSymbol.16>
 80022d6:	e009      	b.n	80022ec <pageCalib50draw.15+0x84>
 80022d8:	4b39      	ldr	r3, [pc, #228]	@ (80023c0 <pageCalib50draw.15+0x158>)
 80022da:	785a      	ldrb	r2, [r3, #1]
 80022dc:	230f      	movs	r3, #15
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	7819      	ldrb	r1, [r3, #0]
 80022e2:	46a4      	mov	ip, r4
 80022e4:	2302      	movs	r3, #2
 80022e6:	202e      	movs	r0, #46	@ 0x2e
 80022e8:	f7ff f8ae 	bl	8001448 <lcdPrintSymbol.16>
	lcdPrint	  (35+22, Y, ",", 2);
 80022ec:	4a35      	ldr	r2, [pc, #212]	@ (80023c4 <pageCalib50draw.15+0x15c>)
 80022ee:	250f      	movs	r5, #15
 80022f0:	197b      	adds	r3, r7, r5
 80022f2:	7819      	ldrb	r1, [r3, #0]
 80022f4:	46a4      	mov	ip, r4
 80022f6:	2302      	movs	r3, #2
 80022f8:	2039      	movs	r0, #57	@ 0x39
 80022fa:	f7fe fd0d 	bl	8000d18 <lcdPrint.0>
	selected == 3 ? lcdPrintSymbol(35+33, Y, volPercent[2], 20)	:	lcdPrintSymbol(35+33, Y, volPercent[2], 2);
 80022fe:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <pageCalib50draw.15+0x154>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d109      	bne.n	800231a <pageCalib50draw.15+0xb2>
 8002306:	4b2e      	ldr	r3, [pc, #184]	@ (80023c0 <pageCalib50draw.15+0x158>)
 8002308:	789a      	ldrb	r2, [r3, #2]
 800230a:	197b      	adds	r3, r7, r5
 800230c:	7819      	ldrb	r1, [r3, #0]
 800230e:	46a4      	mov	ip, r4
 8002310:	2314      	movs	r3, #20
 8002312:	2044      	movs	r0, #68	@ 0x44
 8002314:	f7ff f898 	bl	8001448 <lcdPrintSymbol.16>
 8002318:	e009      	b.n	800232e <pageCalib50draw.15+0xc6>
 800231a:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <pageCalib50draw.15+0x158>)
 800231c:	789a      	ldrb	r2, [r3, #2]
 800231e:	230f      	movs	r3, #15
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	7819      	ldrb	r1, [r3, #0]
 8002324:	46a4      	mov	ip, r4
 8002326:	2302      	movs	r3, #2
 8002328:	2044      	movs	r0, #68	@ 0x44
 800232a:	f7ff f88d 	bl	8001448 <lcdPrintSymbol.16>
	selected == 4 ? lcdPrintSymbol(35+44, Y, volPercent[3], 20)	:	lcdPrintSymbol(35+44, Y, volPercent[3], 2);
 800232e:	4b23      	ldr	r3, [pc, #140]	@ (80023bc <pageCalib50draw.15+0x154>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d10a      	bne.n	800234c <pageCalib50draw.15+0xe4>
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <pageCalib50draw.15+0x158>)
 8002338:	78da      	ldrb	r2, [r3, #3]
 800233a:	230f      	movs	r3, #15
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	7819      	ldrb	r1, [r3, #0]
 8002340:	46a4      	mov	ip, r4
 8002342:	2314      	movs	r3, #20
 8002344:	204f      	movs	r0, #79	@ 0x4f
 8002346:	f7ff f87f 	bl	8001448 <lcdPrintSymbol.16>
 800234a:	e009      	b.n	8002360 <pageCalib50draw.15+0xf8>
 800234c:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <pageCalib50draw.15+0x158>)
 800234e:	78da      	ldrb	r2, [r3, #3]
 8002350:	230f      	movs	r3, #15
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	7819      	ldrb	r1, [r3, #0]
 8002356:	46a4      	mov	ip, r4
 8002358:	2302      	movs	r3, #2
 800235a:	204f      	movs	r0, #79	@ 0x4f
 800235c:	f7ff f874 	bl	8001448 <lcdPrintSymbol.16>
	selected == 0 ? lcdPrint(0,		 64-19, "Exit", 20)			:	lcdPrint(0,		 64-19, "Exit", 2);
 8002360:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <pageCalib50draw.15+0x154>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <pageCalib50draw.15+0x110>
 8002368:	4a17      	ldr	r2, [pc, #92]	@ (80023c8 <pageCalib50draw.15+0x160>)
 800236a:	46a4      	mov	ip, r4
 800236c:	2314      	movs	r3, #20
 800236e:	212d      	movs	r1, #45	@ 0x2d
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fcd1 	bl	8000d18 <lcdPrint.0>
 8002376:	e006      	b.n	8002386 <pageCalib50draw.15+0x11e>
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <pageCalib50draw.15+0x160>)
 800237a:	46a4      	mov	ip, r4
 800237c:	2302      	movs	r3, #2
 800237e:	212d      	movs	r1, #45	@ 0x2d
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fcc9 	bl	8000d18 <lcdPrint.0>
	selected == 5 ? lcdPrint(128-23, 64-19, "OK", 20)			:	lcdPrint(128-23, 64-19, "OK", 2);
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <pageCalib50draw.15+0x154>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d107      	bne.n	800239e <pageCalib50draw.15+0x136>
 800238e:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <pageCalib50draw.15+0x164>)
 8002390:	46a4      	mov	ip, r4
 8002392:	2314      	movs	r3, #20
 8002394:	212d      	movs	r1, #45	@ 0x2d
 8002396:	2069      	movs	r0, #105	@ 0x69
 8002398:	f7fe fcbe 	bl	8000d18 <lcdPrint.0>
 800239c:	e006      	b.n	80023ac <pageCalib50draw.15+0x144>
 800239e:	4a0b      	ldr	r2, [pc, #44]	@ (80023cc <pageCalib50draw.15+0x164>)
 80023a0:	46a4      	mov	ip, r4
 80023a2:	2302      	movs	r3, #2
 80023a4:	212d      	movs	r1, #45	@ 0x2d
 80023a6:	2069      	movs	r0, #105	@ 0x69
 80023a8:	f7fe fcb6 	bl	8000d18 <lcdPrint.0>
	SSD1306_UpdateScreen();
 80023ac:	f000 ff7e 	bl	80032ac <SSD1306_UpdateScreen>
}
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bdb0      	pop	{r4, r5, r7, pc}
 80023b8:	08006fb0 	.word	0x08006fb0
 80023bc:	20000181 	.word	0x20000181
 80023c0:	2000001c 	.word	0x2000001c
 80023c4:	08006fbc 	.word	0x08006fbc
 80023c8:	08006fc0 	.word	0x08006fc0
 80023cc:	08006e0c 	.word	0x08006e0c

080023d0 <pageDigitSelect.17>:
void pageDigitSelect(void){
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4664      	mov	r4, ip
 80023d8:	4663      	mov	r3, ip
 80023da:	607b      	str	r3, [r7, #4]
	lcdPrint(0, 0, "              ", 2);
 80023dc:	4a25      	ldr	r2, [pc, #148]	@ (8002474 <pageDigitSelect.17+0xa4>)
 80023de:	46a4      	mov	ip, r4
 80023e0:	2302      	movs	r3, #2
 80023e2:	2100      	movs	r1, #0
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fc97 	bl	8000d18 <lcdPrint.0>
	for (uint8_t i = 0; i < 10; i++) {
 80023ea:	230f      	movs	r3, #15
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e034      	b.n	800245e <pageDigitSelect.17+0x8e>
		digitSelected == i ? lcdPrintSymbol(4+i*11, 0, i+48, 20)	:	lcdPrintSymbol(4+i*11, 0, i+48, 2);
 80023f4:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <pageDigitSelect.17+0xa8>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	210f      	movs	r1, #15
 80023fa:	187a      	adds	r2, r7, r1
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d113      	bne.n	800242a <pageDigitSelect.17+0x5a>
 8002402:	187b      	adds	r3, r7, r1
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	1c1a      	adds	r2, r3, #0
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	18d2      	adds	r2, r2, r3
 800240c:	1892      	adds	r2, r2, r2
 800240e:	18d3      	adds	r3, r2, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	3304      	adds	r3, #4
 8002414:	b2d8      	uxtb	r0, r3
 8002416:	187b      	adds	r3, r7, r1
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	3330      	adds	r3, #48	@ 0x30
 800241c:	b2da      	uxtb	r2, r3
 800241e:	46a4      	mov	ip, r4
 8002420:	2314      	movs	r3, #20
 8002422:	2100      	movs	r1, #0
 8002424:	f7ff f810 	bl	8001448 <lcdPrintSymbol.16>
 8002428:	e013      	b.n	8002452 <pageDigitSelect.17+0x82>
 800242a:	210f      	movs	r1, #15
 800242c:	187b      	adds	r3, r7, r1
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	1c1a      	adds	r2, r3, #0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	18d2      	adds	r2, r2, r3
 8002436:	1892      	adds	r2, r2, r2
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3304      	adds	r3, #4
 800243e:	b2d8      	uxtb	r0, r3
 8002440:	187b      	adds	r3, r7, r1
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3330      	adds	r3, #48	@ 0x30
 8002446:	b2da      	uxtb	r2, r3
 8002448:	46a4      	mov	ip, r4
 800244a:	2302      	movs	r3, #2
 800244c:	2100      	movs	r1, #0
 800244e:	f7fe fffb 	bl	8001448 <lcdPrintSymbol.16>
	for (uint8_t i = 0; i < 10; i++) {
 8002452:	210f      	movs	r1, #15
 8002454:	187b      	adds	r3, r7, r1
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	187b      	adds	r3, r7, r1
 800245a:	3201      	adds	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b09      	cmp	r3, #9
 8002466:	d9c5      	bls.n	80023f4 <pageDigitSelect.17+0x24>
	SSD1306_UpdateScreen();
 8002468:	f000 ff20 	bl	80032ac <SSD1306_UpdateScreen>
}
 800246c:	46c0      	nop			@ (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b005      	add	sp, #20
 8002472:	bd90      	pop	{r4, r7, pc}
 8002474:	08006fc8 	.word	0x08006fc8
 8002478:	20000182 	.word	0x20000182

0800247c <setPGSfunk.5>:
void setPGSfunk(void){
 800247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247e:	b08b      	sub	sp, #44	@ 0x2c
 8002480:	af00      	add	r7, sp, #0
 8002482:	4664      	mov	r4, ip
 8002484:	4663      	mov	r3, ip
 8002486:	607b      	str	r3, [r7, #4]
	SSD1306_Clear();
 8002488:	f001 fa2b 	bl	80038e2 <SSD1306_Clear>
	while (HAL_GetTick()-lastPing < 1100) { }
 800248c:	46c0      	nop			@ (mov r8, r8)
 800248e:	f001 fc73 	bl	8003d78 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <setPGSfunk.5+0x110>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	4a3d      	ldr	r2, [pc, #244]	@ (8002590 <setPGSfunk.5+0x114>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d9f6      	bls.n	800248e <setPGSfunk.5+0x12>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	019b      	lsls	r3, r3, #6
 80024a4:	483b      	ldr	r0, [pc, #236]	@ (8002594 <setPGSfunk.5+0x118>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	0019      	movs	r1, r3
 80024aa:	f001 fed4 	bl	8004256 <HAL_GPIO_WritePin>
	uint8_t msg[10]={0};
 80024ae:	251c      	movs	r5, #28
 80024b0:	197b      	adds	r3, r7, r5
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	3304      	adds	r3, #4
 80024b8:	2206      	movs	r2, #6
 80024ba:	2100      	movs	r1, #0
 80024bc:	0018      	movs	r0, r3
 80024be:	f003 ffa1 	bl	8006404 <memset>
	sprintf (msg, "CALB %.4s", volPercent);
 80024c2:	4a35      	ldr	r2, [pc, #212]	@ (8002598 <setPGSfunk.5+0x11c>)
 80024c4:	4935      	ldr	r1, [pc, #212]	@ (800259c <setPGSfunk.5+0x120>)
 80024c6:	197b      	adds	r3, r7, r5
 80024c8:	0018      	movs	r0, r3
 80024ca:	f003 ff7b 	bl	80063c4 <siprintf>
	lcdPrintUpdate(11, 22, msg,   2);
 80024ce:	197a      	adds	r2, r7, r5
 80024d0:	46a4      	mov	ip, r4
 80024d2:	2302      	movs	r3, #2
 80024d4:	2116      	movs	r1, #22
 80024d6:	200b      	movs	r0, #11
 80024d8:	f7ff f828 	bl	800152c <lcdPrintUpdate.10>
	sprintf (msg, "CALB %s\r", volPercent);
 80024dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002598 <setPGSfunk.5+0x11c>)
 80024de:	4930      	ldr	r1, [pc, #192]	@ (80025a0 <setPGSfunk.5+0x124>)
 80024e0:	197b      	adds	r3, r7, r5
 80024e2:	0018      	movs	r0, r3
 80024e4:	f003 ff6e 	bl	80063c4 <siprintf>
	HAL_Delay(800);
 80024e8:	23c8      	movs	r3, #200	@ 0xc8
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	0018      	movs	r0, r3
 80024ee:	f001 fc4d 	bl	8003d8c <HAL_Delay>
	uint8_t rx_buff[15]={0};
 80024f2:	260c      	movs	r6, #12
 80024f4:	19bb      	adds	r3, r7, r6
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	3304      	adds	r3, #4
 80024fc:	220b      	movs	r2, #11
 80024fe:	2100      	movs	r1, #0
 8002500:	0018      	movs	r0, r3
 8002502:	f003 ff7f 	bl	8006404 <memset>
	MX_USART2_UART_Init();
 8002506:	f000 fd43 	bl	8002f90 <MX_USART2_UART_Init>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 800250a:	1979      	adds	r1, r7, r5
 800250c:	4825      	ldr	r0, [pc, #148]	@ (80025a4 <setPGSfunk.5+0x128>)
 800250e:	2332      	movs	r3, #50	@ 0x32
 8002510:	220a      	movs	r2, #10
 8002512:	f003 f9d7 	bl	80058c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rx_buff, 15, 50);
 8002516:	19b9      	adds	r1, r7, r6
 8002518:	4822      	ldr	r0, [pc, #136]	@ (80025a4 <setPGSfunk.5+0x128>)
 800251a:	2332      	movs	r3, #50	@ 0x32
 800251c:	220f      	movs	r2, #15
 800251e:	f003 fa71 	bl	8005a04 <HAL_UART_Receive>
	lastPing = HAL_GetTick();
 8002522:	f001 fc29 	bl	8003d78 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <setPGSfunk.5+0x110>)
 800252a:	601a      	str	r2, [r3, #0]
	if (rx_buff[10]==0x4F && rx_buff[11]==0x4B){lcdPrintUpdate(10, 22, "    OK    ",  2); page = 2; selected = 3;}
 800252c:	19bb      	adds	r3, r7, r6
 800252e:	7a9b      	ldrb	r3, [r3, #10]
 8002530:	2b4f      	cmp	r3, #79	@ 0x4f
 8002532:	d111      	bne.n	8002558 <setPGSfunk.5+0xdc>
 8002534:	19bb      	adds	r3, r7, r6
 8002536:	7adb      	ldrb	r3, [r3, #11]
 8002538:	2b4b      	cmp	r3, #75	@ 0x4b
 800253a:	d10d      	bne.n	8002558 <setPGSfunk.5+0xdc>
 800253c:	4a1a      	ldr	r2, [pc, #104]	@ (80025a8 <setPGSfunk.5+0x12c>)
 800253e:	46a4      	mov	ip, r4
 8002540:	2302      	movs	r3, #2
 8002542:	2116      	movs	r1, #22
 8002544:	200a      	movs	r0, #10
 8002546:	f7fe fff1 	bl	800152c <lcdPrintUpdate.10>
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <setPGSfunk.5+0x130>)
 800254c:	2202      	movs	r2, #2
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <setPGSfunk.5+0x134>)
 8002552:	2203      	movs	r2, #3
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e006      	b.n	8002566 <setPGSfunk.5+0xea>
	else {lcdPrintUpdate(10, 22, "  FAULT    ",  2);}
 8002558:	4a16      	ldr	r2, [pc, #88]	@ (80025b4 <setPGSfunk.5+0x138>)
 800255a:	46a4      	mov	ip, r4
 800255c:	2302      	movs	r3, #2
 800255e:	2116      	movs	r1, #22
 8002560:	200a      	movs	r0, #10
 8002562:	f7fe ffe3 	bl	800152c <lcdPrintUpdate.10>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	480a      	ldr	r0, [pc, #40]	@ (8002594 <setPGSfunk.5+0x118>)
 800256c:	2201      	movs	r2, #1
 800256e:	0019      	movs	r1, r3
 8002570:	f001 fe71 	bl	8004256 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002574:	23fa      	movs	r3, #250	@ 0xfa
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	0018      	movs	r0, r3
 800257a:	f001 fc07 	bl	8003d8c <HAL_Delay>
	SSD1306_Clear();
 800257e:	f001 f9b0 	bl	80038e2 <SSD1306_Clear>
}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b00b      	add	sp, #44	@ 0x2c
 8002588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	20000184 	.word	0x20000184
 8002590:	0000044b 	.word	0x0000044b
 8002594:	48000800 	.word	0x48000800
 8002598:	2000001c 	.word	0x2000001c
 800259c:	08006fd8 	.word	0x08006fd8
 80025a0:	08006fe4 	.word	0x08006fe4
 80025a4:	200000f0 	.word	0x200000f0
 80025a8:	08006ff0 	.word	0x08006ff0
 80025ac:	20000180 	.word	0x20000180
 80025b0:	20000181 	.word	0x20000181
 80025b4:	08006ffc 	.word	0x08006ffc

080025b8 <pageSettingsDraw.18>:
void pageSettingsDraw(void){
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4664      	mov	r4, ip
 80025c0:	4663      	mov	r3, ip
 80025c2:	607b      	str	r3, [r7, #4]
	lcdPrint(0, 50, " Exit", 	 1);		if (selected == 0) {lcdPrint(0, 50, "-", 1);};
 80025c4:	4a38      	ldr	r2, [pc, #224]	@ (80026a8 <pageSettingsDraw.18+0xf0>)
 80025c6:	46a4      	mov	ip, r4
 80025c8:	2301      	movs	r3, #1
 80025ca:	2132      	movs	r1, #50	@ 0x32
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe fba3 	bl	8000d18 <lcdPrint.0>
 80025d2:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <pageSettingsDraw.18+0xf4>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <pageSettingsDraw.18+0x30>
 80025da:	4a35      	ldr	r2, [pc, #212]	@ (80026b0 <pageSettingsDraw.18+0xf8>)
 80025dc:	46a4      	mov	ip, r4
 80025de:	2301      	movs	r3, #1
 80025e0:	2132      	movs	r1, #50	@ 0x32
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fb98 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 0,	" OEM/USR?",   1);		if (selected == 1) {lcdPrint(0, 0, "-", 1);};
 80025e8:	4a32      	ldr	r2, [pc, #200]	@ (80026b4 <pageSettingsDraw.18+0xfc>)
 80025ea:	46a4      	mov	ip, r4
 80025ec:	2301      	movs	r3, #1
 80025ee:	2100      	movs	r1, #0
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe fb91 	bl	8000d18 <lcdPrint.0>
 80025f6:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <pageSettingsDraw.18+0xf4>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d106      	bne.n	800260c <pageSettingsDraw.18+0x54>
 80025fe:	4a2c      	ldr	r2, [pc, #176]	@ (80026b0 <pageSettingsDraw.18+0xf8>)
 8002600:	46a4      	mov	ip, r4
 8002602:	2301      	movs	r3, #1
 8002604:	2100      	movs	r1, #0
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fb86 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 10, " set OEM",	 1);		if (selected == 2) {lcdPrint(0, 10, "-", 1);};
 800260c:	4a2a      	ldr	r2, [pc, #168]	@ (80026b8 <pageSettingsDraw.18+0x100>)
 800260e:	46a4      	mov	ip, r4
 8002610:	2301      	movs	r3, #1
 8002612:	210a      	movs	r1, #10
 8002614:	2000      	movs	r0, #0
 8002616:	f7fe fb7f 	bl	8000d18 <lcdPrint.0>
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <pageSettingsDraw.18+0xf4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d106      	bne.n	8002630 <pageSettingsDraw.18+0x78>
 8002622:	4a23      	ldr	r2, [pc, #140]	@ (80026b0 <pageSettingsDraw.18+0xf8>)
 8002624:	46a4      	mov	ip, r4
 8002626:	2301      	movs	r3, #1
 8002628:	210a      	movs	r1, #10
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fb74 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 20, " set USER",	 1);	if (selected == 3) {lcdPrint(0, 20, "-", 1);};
 8002630:	4a22      	ldr	r2, [pc, #136]	@ (80026bc <pageSettingsDraw.18+0x104>)
 8002632:	46a4      	mov	ip, r4
 8002634:	2301      	movs	r3, #1
 8002636:	2114      	movs	r1, #20
 8002638:	2000      	movs	r0, #0
 800263a:	f7fe fb6d 	bl	8000d18 <lcdPrint.0>
 800263e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <pageSettingsDraw.18+0xf4>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d106      	bne.n	8002654 <pageSettingsDraw.18+0x9c>
 8002646:	4a1a      	ldr	r2, [pc, #104]	@ (80026b0 <pageSettingsDraw.18+0xf8>)
 8002648:	46a4      	mov	ip, r4
 800264a:	2301      	movs	r3, #1
 800264c:	2114      	movs	r1, #20
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe fb62 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 30, " LOWPWR_0",	 1);	if (selected == 4) {lcdPrint(0, 30, "-", 1);};
 8002654:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <pageSettingsDraw.18+0x108>)
 8002656:	46a4      	mov	ip, r4
 8002658:	2301      	movs	r3, #1
 800265a:	211e      	movs	r1, #30
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fb5b 	bl	8000d18 <lcdPrint.0>
 8002662:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <pageSettingsDraw.18+0xf4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b04      	cmp	r3, #4
 8002668:	d106      	bne.n	8002678 <pageSettingsDraw.18+0xc0>
 800266a:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <pageSettingsDraw.18+0xf8>)
 800266c:	46a4      	mov	ip, r4
 800266e:	2301      	movs	r3, #1
 8002670:	211e      	movs	r1, #30
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fb50 	bl	8000d18 <lcdPrint.0>
	lcdPrint(0, 40, " LOWPWR_1",	 1);	if (selected == 5) {lcdPrint(0, 40, "-", 1);};
 8002678:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <pageSettingsDraw.18+0x10c>)
 800267a:	46a4      	mov	ip, r4
 800267c:	2301      	movs	r3, #1
 800267e:	2128      	movs	r1, #40	@ 0x28
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe fb49 	bl	8000d18 <lcdPrint.0>
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <pageSettingsDraw.18+0xf4>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d106      	bne.n	800269c <pageSettingsDraw.18+0xe4>
 800268e:	4a08      	ldr	r2, [pc, #32]	@ (80026b0 <pageSettingsDraw.18+0xf8>)
 8002690:	46a4      	mov	ip, r4
 8002692:	2301      	movs	r3, #1
 8002694:	2128      	movs	r1, #40	@ 0x28
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fb3e 	bl	8000d18 <lcdPrint.0>
	SSD1306_UpdateScreen();
 800269c:	f000 fe06 	bl	80032ac <SSD1306_UpdateScreen>
}
 80026a0:	46c0      	nop			@ (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b003      	add	sp, #12
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	08006f18 	.word	0x08006f18
 80026ac:	20000181 	.word	0x20000181
 80026b0:	08006f20 	.word	0x08006f20
 80026b4:	08007008 	.word	0x08007008
 80026b8:	08007014 	.word	0x08007014
 80026bc:	08007020 	.word	0x08007020
 80026c0:	0800702c 	.word	0x0800702c
 80026c4:	08007038 	.word	0x08007038

080026c8 <oemUserQuestion.6>:
void oemUserQuestion(void){
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4664      	mov	r4, ip
 80026d0:	4663      	mov	r3, ip
 80026d2:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 80026d4:	46c0      	nop			@ (mov r8, r8)
 80026d6:	f001 fb4f 	bl	8003d78 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	4b34      	ldr	r3, [pc, #208]	@ (80027b0 <oemUserQuestion.6+0xe8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	4a34      	ldr	r2, [pc, #208]	@ (80027b4 <oemUserQuestion.6+0xec>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d9f6      	bls.n	80026d6 <oemUserQuestion.6+0xe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	019b      	lsls	r3, r3, #6
 80026ec:	4832      	ldr	r0, [pc, #200]	@ (80027b8 <oemUserQuestion.6+0xf0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	0019      	movs	r1, r3
 80026f2:	f001 fdb0 	bl	8004256 <HAL_GPIO_WritePin>
		lcdPrint(7, 0,	"        ",   1);
 80026f6:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <oemUserQuestion.6+0xf4>)
 80026f8:	46a4      	mov	ip, r4
 80026fa:	2301      	movs	r3, #1
 80026fc:	2100      	movs	r1, #0
 80026fe:	2007      	movs	r0, #7
 8002700:	f7fe fb0a 	bl	8000d18 <lcdPrint.0>
		uint8_t msg[]="UART?\r";	uint8_t rx_buff[10]={0};	MX_USART2_UART_Init();
 8002704:	2618      	movs	r6, #24
 8002706:	19bb      	adds	r3, r7, r6
 8002708:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <oemUserQuestion.6+0xf8>)
 800270a:	6811      	ldr	r1, [r2, #0]
 800270c:	6019      	str	r1, [r3, #0]
 800270e:	8891      	ldrh	r1, [r2, #4]
 8002710:	8099      	strh	r1, [r3, #4]
 8002712:	7992      	ldrb	r2, [r2, #6]
 8002714:	719a      	strb	r2, [r3, #6]
 8002716:	250c      	movs	r5, #12
 8002718:	197b      	adds	r3, r7, r5
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	3304      	adds	r3, #4
 8002720:	2206      	movs	r2, #6
 8002722:	2100      	movs	r1, #0
 8002724:	0018      	movs	r0, r3
 8002726:	f003 fe6d 	bl	8006404 <memset>
 800272a:	f000 fc31 	bl	8002f90 <MX_USART2_UART_Init>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 800272e:	19b9      	adds	r1, r7, r6
 8002730:	4824      	ldr	r0, [pc, #144]	@ (80027c4 <oemUserQuestion.6+0xfc>)
 8002732:	2332      	movs	r3, #50	@ 0x32
 8002734:	2207      	movs	r2, #7
 8002736:	f003 f8c5 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_buff, 10, 50);
 800273a:	1979      	adds	r1, r7, r5
 800273c:	4821      	ldr	r0, [pc, #132]	@ (80027c4 <oemUserQuestion.6+0xfc>)
 800273e:	2332      	movs	r3, #50	@ 0x32
 8002740:	220a      	movs	r2, #10
 8002742:	f003 f95f 	bl	8005a04 <HAL_UART_Receive>
		lastPing = HAL_GetTick();
 8002746:	f001 fb17 	bl	8003d78 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <oemUserQuestion.6+0xe8>)
 800274e:	601a      	str	r2, [r3, #0]
		if (rx_buff[0] == 0x4F ) {lcdPrintUpdate(7, 0, "OEM",  1);}
 8002750:	197b      	adds	r3, r7, r5
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b4f      	cmp	r3, #79	@ 0x4f
 8002756:	d107      	bne.n	8002768 <oemUserQuestion.6+0xa0>
 8002758:	4a1b      	ldr	r2, [pc, #108]	@ (80027c8 <oemUserQuestion.6+0x100>)
 800275a:	46a4      	mov	ip, r4
 800275c:	2301      	movs	r3, #1
 800275e:	2100      	movs	r1, #0
 8002760:	2007      	movs	r0, #7
 8002762:	f7fe fee3 	bl	800152c <lcdPrintUpdate.10>
 8002766:	e013      	b.n	8002790 <oemUserQuestion.6+0xc8>
		else if (rx_buff[0] == 0x55 ) {lcdPrintUpdate(7, 0, "USER",  1);}
 8002768:	230c      	movs	r3, #12
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b55      	cmp	r3, #85	@ 0x55
 8002770:	d107      	bne.n	8002782 <oemUserQuestion.6+0xba>
 8002772:	4a16      	ldr	r2, [pc, #88]	@ (80027cc <oemUserQuestion.6+0x104>)
 8002774:	46a4      	mov	ip, r4
 8002776:	2301      	movs	r3, #1
 8002778:	2100      	movs	r1, #0
 800277a:	2007      	movs	r0, #7
 800277c:	f7fe fed6 	bl	800152c <lcdPrintUpdate.10>
 8002780:	e006      	b.n	8002790 <oemUserQuestion.6+0xc8>
		else {lcdPrintUpdate(7, 0, "FAULT",  1);}
 8002782:	4a13      	ldr	r2, [pc, #76]	@ (80027d0 <oemUserQuestion.6+0x108>)
 8002784:	46a4      	mov	ip, r4
 8002786:	2301      	movs	r3, #1
 8002788:	2100      	movs	r1, #0
 800278a:	2007      	movs	r0, #7
 800278c:	f7fe fece 	bl	800152c <lcdPrintUpdate.10>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	019b      	lsls	r3, r3, #6
 8002794:	4808      	ldr	r0, [pc, #32]	@ (80027b8 <oemUserQuestion.6+0xf0>)
 8002796:	2201      	movs	r2, #1
 8002798:	0019      	movs	r1, r3
 800279a:	f001 fd5c 	bl	8004256 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800279e:	23fa      	movs	r3, #250	@ 0xfa
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f001 faf2 	bl	8003d8c <HAL_Delay>
}
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b009      	add	sp, #36	@ 0x24
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b0:	20000184 	.word	0x20000184
 80027b4:	0000044b 	.word	0x0000044b
 80027b8:	48000800 	.word	0x48000800
 80027bc:	08007044 	.word	0x08007044
 80027c0:	08007064 	.word	0x08007064
 80027c4:	200000f0 	.word	0x200000f0
 80027c8:	08007050 	.word	0x08007050
 80027cc:	08007054 	.word	0x08007054
 80027d0:	0800705c 	.word	0x0800705c

080027d4 <oem.7>:
void oem(void){
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	b089      	sub	sp, #36	@ 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4664      	mov	r4, ip
 80027dc:	4663      	mov	r3, ip
 80027de:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	f001 fac9 	bl	8003d78 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <oem.7+0xcc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	4a2d      	ldr	r2, [pc, #180]	@ (80028a4 <oem.7+0xd0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d9f6      	bls.n	80027e2 <oem.7+0xe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	019b      	lsls	r3, r3, #6
 80027f8:	482b      	ldr	r0, [pc, #172]	@ (80028a8 <oem.7+0xd4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	0019      	movs	r1, r3
 80027fe:	f001 fd2a 	bl	8004256 <HAL_GPIO_WritePin>
		lcdPrint(7, 10,	"        ",   1);
 8002802:	4a2a      	ldr	r2, [pc, #168]	@ (80028ac <oem.7+0xd8>)
 8002804:	46a4      	mov	ip, r4
 8002806:	2301      	movs	r3, #1
 8002808:	210a      	movs	r1, #10
 800280a:	2007      	movs	r0, #7
 800280c:	f7fe fa84 	bl	8000d18 <lcdPrint.0>
		uint8_t msg[]="OEM 0000\r";	uint8_t rx_buff[10]={0};	MX_USART2_UART_Init();
 8002810:	2614      	movs	r6, #20
 8002812:	19bb      	adds	r3, r7, r6
 8002814:	4a26      	ldr	r2, [pc, #152]	@ (80028b0 <oem.7+0xdc>)
 8002816:	ca03      	ldmia	r2!, {r0, r1}
 8002818:	c303      	stmia	r3!, {r0, r1}
 800281a:	8812      	ldrh	r2, [r2, #0]
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	2508      	movs	r5, #8
 8002820:	197b      	adds	r3, r7, r5
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	3304      	adds	r3, #4
 8002828:	2206      	movs	r2, #6
 800282a:	2100      	movs	r1, #0
 800282c:	0018      	movs	r0, r3
 800282e:	f003 fde9 	bl	8006404 <memset>
 8002832:	f000 fbad 	bl	8002f90 <MX_USART2_UART_Init>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8002836:	19b9      	adds	r1, r7, r6
 8002838:	481e      	ldr	r0, [pc, #120]	@ (80028b4 <oem.7+0xe0>)
 800283a:	2332      	movs	r3, #50	@ 0x32
 800283c:	220a      	movs	r2, #10
 800283e:	f003 f841 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_buff, 10, 50);
 8002842:	1979      	adds	r1, r7, r5
 8002844:	481b      	ldr	r0, [pc, #108]	@ (80028b4 <oem.7+0xe0>)
 8002846:	2332      	movs	r3, #50	@ 0x32
 8002848:	220a      	movs	r2, #10
 800284a:	f003 f8db 	bl	8005a04 <HAL_UART_Receive>
		lastPing = HAL_GetTick();
 800284e:	f001 fa93 	bl	8003d78 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <oem.7+0xcc>)
 8002856:	601a      	str	r2, [r3, #0]
		if (rx_buff[0] == 0x4F ) {lcdPrintUpdate(7, 10, "OK",  1);}
 8002858:	197b      	adds	r3, r7, r5
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b4f      	cmp	r3, #79	@ 0x4f
 800285e:	d107      	bne.n	8002870 <oem.7+0x9c>
 8002860:	4a15      	ldr	r2, [pc, #84]	@ (80028b8 <oem.7+0xe4>)
 8002862:	46a4      	mov	ip, r4
 8002864:	2301      	movs	r3, #1
 8002866:	210a      	movs	r1, #10
 8002868:	2007      	movs	r0, #7
 800286a:	f7fe fe5f 	bl	800152c <lcdPrintUpdate.10>
 800286e:	e006      	b.n	800287e <oem.7+0xaa>
		else {lcdPrintUpdate(7, 10, "FAULT",  1);}
 8002870:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <oem.7+0xe8>)
 8002872:	46a4      	mov	ip, r4
 8002874:	2301      	movs	r3, #1
 8002876:	210a      	movs	r1, #10
 8002878:	2007      	movs	r0, #7
 800287a:	f7fe fe57 	bl	800152c <lcdPrintUpdate.10>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	4809      	ldr	r0, [pc, #36]	@ (80028a8 <oem.7+0xd4>)
 8002884:	2201      	movs	r2, #1
 8002886:	0019      	movs	r1, r3
 8002888:	f001 fce5 	bl	8004256 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800288c:	23fa      	movs	r3, #250	@ 0xfa
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	0018      	movs	r0, r3
 8002892:	f001 fa7b 	bl	8003d8c <HAL_Delay>
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b009      	add	sp, #36	@ 0x24
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	20000184 	.word	0x20000184
 80028a4:	0000044b 	.word	0x0000044b
 80028a8:	48000800 	.word	0x48000800
 80028ac:	08007044 	.word	0x08007044
 80028b0:	0800706c 	.word	0x0800706c
 80028b4:	200000f0 	.word	0x200000f0
 80028b8:	08006e0c 	.word	0x08006e0c
 80028bc:	0800705c 	.word	0x0800705c

080028c0 <user.8>:
void user(void){
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	b089      	sub	sp, #36	@ 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4664      	mov	r4, ip
 80028c8:	4663      	mov	r3, ip
 80028ca:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 80028cc:	46c0      	nop			@ (mov r8, r8)
 80028ce:	f001 fa53 	bl	8003d78 <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	4b2d      	ldr	r3, [pc, #180]	@ (800298c <user.8+0xcc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	4a2d      	ldr	r2, [pc, #180]	@ (8002990 <user.8+0xd0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d9f6      	bls.n	80028ce <user.8+0xe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	019b      	lsls	r3, r3, #6
 80028e4:	482b      	ldr	r0, [pc, #172]	@ (8002994 <user.8+0xd4>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	0019      	movs	r1, r3
 80028ea:	f001 fcb4 	bl	8004256 <HAL_GPIO_WritePin>
		lcdPrint(7, 20,	"        ",   1);
 80028ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002998 <user.8+0xd8>)
 80028f0:	46a4      	mov	ip, r4
 80028f2:	2301      	movs	r3, #1
 80028f4:	2114      	movs	r1, #20
 80028f6:	2007      	movs	r0, #7
 80028f8:	f7fe fa0e 	bl	8000d18 <lcdPrint.0>
		uint8_t msg[]="USER\r";	uint8_t rx_buff[10]={0};	MX_USART2_UART_Init();
 80028fc:	2618      	movs	r6, #24
 80028fe:	19bb      	adds	r3, r7, r6
 8002900:	4a26      	ldr	r2, [pc, #152]	@ (800299c <user.8+0xdc>)
 8002902:	6811      	ldr	r1, [r2, #0]
 8002904:	6019      	str	r1, [r3, #0]
 8002906:	8892      	ldrh	r2, [r2, #4]
 8002908:	809a      	strh	r2, [r3, #4]
 800290a:	250c      	movs	r5, #12
 800290c:	197b      	adds	r3, r7, r5
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	3304      	adds	r3, #4
 8002914:	2206      	movs	r2, #6
 8002916:	2100      	movs	r1, #0
 8002918:	0018      	movs	r0, r3
 800291a:	f003 fd73 	bl	8006404 <memset>
 800291e:	f000 fb37 	bl	8002f90 <MX_USART2_UART_Init>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8002922:	19b9      	adds	r1, r7, r6
 8002924:	481e      	ldr	r0, [pc, #120]	@ (80029a0 <user.8+0xe0>)
 8002926:	2332      	movs	r3, #50	@ 0x32
 8002928:	2206      	movs	r2, #6
 800292a:	f002 ffcb 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_buff, 10, 50);
 800292e:	1979      	adds	r1, r7, r5
 8002930:	481b      	ldr	r0, [pc, #108]	@ (80029a0 <user.8+0xe0>)
 8002932:	2332      	movs	r3, #50	@ 0x32
 8002934:	220a      	movs	r2, #10
 8002936:	f003 f865 	bl	8005a04 <HAL_UART_Receive>
		lastPing = HAL_GetTick();
 800293a:	f001 fa1d 	bl	8003d78 <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <user.8+0xcc>)
 8002942:	601a      	str	r2, [r3, #0]
		if (rx_buff[0] == 0x55 ) {lcdPrintUpdate(7, 20, "OK",  1);}
 8002944:	197b      	adds	r3, r7, r5
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b55      	cmp	r3, #85	@ 0x55
 800294a:	d107      	bne.n	800295c <user.8+0x9c>
 800294c:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <user.8+0xe4>)
 800294e:	46a4      	mov	ip, r4
 8002950:	2301      	movs	r3, #1
 8002952:	2114      	movs	r1, #20
 8002954:	2007      	movs	r0, #7
 8002956:	f7fe fde9 	bl	800152c <lcdPrintUpdate.10>
 800295a:	e006      	b.n	800296a <user.8+0xaa>
		else {lcdPrintUpdate(7, 20, "FAULT",  1);}
 800295c:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <user.8+0xe8>)
 800295e:	46a4      	mov	ip, r4
 8002960:	2301      	movs	r3, #1
 8002962:	2114      	movs	r1, #20
 8002964:	2007      	movs	r0, #7
 8002966:	f7fe fde1 	bl	800152c <lcdPrintUpdate.10>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	4809      	ldr	r0, [pc, #36]	@ (8002994 <user.8+0xd4>)
 8002970:	2201      	movs	r2, #1
 8002972:	0019      	movs	r1, r3
 8002974:	f001 fc6f 	bl	8004256 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002978:	23fa      	movs	r3, #250	@ 0xfa
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	0018      	movs	r0, r3
 800297e:	f001 fa05 	bl	8003d8c <HAL_Delay>
}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b009      	add	sp, #36	@ 0x24
 8002988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	20000184 	.word	0x20000184
 8002990:	0000044b 	.word	0x0000044b
 8002994:	48000800 	.word	0x48000800
 8002998:	08007044 	.word	0x08007044
 800299c:	08007078 	.word	0x08007078
 80029a0:	200000f0 	.word	0x200000f0
 80029a4:	08006e0c 	.word	0x08006e0c
 80029a8:	0800705c 	.word	0x0800705c

080029ac <LOWPWR0.9>:
void LOWPWR0(void){
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	b089      	sub	sp, #36	@ 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4664      	mov	r4, ip
 80029b4:	4663      	mov	r3, ip
 80029b6:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 80029b8:	46c0      	nop			@ (mov r8, r8)
 80029ba:	f001 f9dd 	bl	8003d78 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <LOWPWR0.9+0xc8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a78 <LOWPWR0.9+0xcc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d9f6      	bls.n	80029ba <LOWPWR0.9+0xe>
		lcdPrint(7, 30,	"        ",   1);
 80029cc:	4a2b      	ldr	r2, [pc, #172]	@ (8002a7c <LOWPWR0.9+0xd0>)
 80029ce:	46a4      	mov	ip, r4
 80029d0:	2301      	movs	r3, #1
 80029d2:	211e      	movs	r1, #30
 80029d4:	2007      	movs	r0, #7
 80029d6:	f7fe f99f 	bl	8000d18 <lcdPrint.0>
		uint8_t rx_buff[15]={0};
 80029da:	2510      	movs	r5, #16
 80029dc:	197b      	adds	r3, r7, r5
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	3304      	adds	r3, #4
 80029e4:	220b      	movs	r2, #11
 80029e6:	2100      	movs	r1, #0
 80029e8:	0018      	movs	r0, r3
 80029ea:	f003 fd0b 	bl	8006404 <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	4823      	ldr	r0, [pc, #140]	@ (8002a80 <LOWPWR0.9+0xd4>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	0019      	movs	r1, r3
 80029f8:	f001 fc2d 	bl	8004256 <HAL_GPIO_WritePin>
		uint8_t msg[]="LOWPW0\r";
 80029fc:	2608      	movs	r6, #8
 80029fe:	19bb      	adds	r3, r7, r6
 8002a00:	4a20      	ldr	r2, [pc, #128]	@ (8002a84 <LOWPWR0.9+0xd8>)
 8002a02:	ca03      	ldmia	r2!, {r0, r1}
 8002a04:	c303      	stmia	r3!, {r0, r1}
		MX_USART2_UART_Init();
 8002a06:	f000 fac3 	bl	8002f90 <MX_USART2_UART_Init>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8002a0a:	19b9      	adds	r1, r7, r6
 8002a0c:	481e      	ldr	r0, [pc, #120]	@ (8002a88 <LOWPWR0.9+0xdc>)
 8002a0e:	2332      	movs	r3, #50	@ 0x32
 8002a10:	2208      	movs	r2, #8
 8002a12:	f002 ff57 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_buff, 15, 50);
 8002a16:	1979      	adds	r1, r7, r5
 8002a18:	481b      	ldr	r0, [pc, #108]	@ (8002a88 <LOWPWR0.9+0xdc>)
 8002a1a:	2332      	movs	r3, #50	@ 0x32
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	f002 fff1 	bl	8005a04 <HAL_UART_Receive>
		lastPing = HAL_GetTick();
 8002a22:	f001 f9a9 	bl	8003d78 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <LOWPWR0.9+0xc8>)
 8002a2a:	601a      	str	r2, [r3, #0]
		if (rx_buff[7] == 0x4F ) {lcdPrintUpdate(7, 30, "OK",  1);}
 8002a2c:	197b      	adds	r3, r7, r5
 8002a2e:	79db      	ldrb	r3, [r3, #7]
 8002a30:	2b4f      	cmp	r3, #79	@ 0x4f
 8002a32:	d107      	bne.n	8002a44 <LOWPWR0.9+0x98>
 8002a34:	4a15      	ldr	r2, [pc, #84]	@ (8002a8c <LOWPWR0.9+0xe0>)
 8002a36:	46a4      	mov	ip, r4
 8002a38:	2301      	movs	r3, #1
 8002a3a:	211e      	movs	r1, #30
 8002a3c:	2007      	movs	r0, #7
 8002a3e:	f7fe fd75 	bl	800152c <lcdPrintUpdate.10>
 8002a42:	e006      	b.n	8002a52 <LOWPWR0.9+0xa6>
		else {lcdPrintUpdate(7, 30, "FAULT",  1);}
 8002a44:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <LOWPWR0.9+0xe4>)
 8002a46:	46a4      	mov	ip, r4
 8002a48:	2301      	movs	r3, #1
 8002a4a:	211e      	movs	r1, #30
 8002a4c:	2007      	movs	r0, #7
 8002a4e:	f7fe fd6d 	bl	800152c <lcdPrintUpdate.10>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	480a      	ldr	r0, [pc, #40]	@ (8002a80 <LOWPWR0.9+0xd4>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	f001 fbfb 	bl	8004256 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002a60:	23fa      	movs	r3, #250	@ 0xfa
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	0018      	movs	r0, r3
 8002a66:	f001 f991 	bl	8003d8c <HAL_Delay>
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b009      	add	sp, #36	@ 0x24
 8002a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	20000184 	.word	0x20000184
 8002a78:	0000044b 	.word	0x0000044b
 8002a7c:	08007044 	.word	0x08007044
 8002a80:	48000800 	.word	0x48000800
 8002a84:	08007080 	.word	0x08007080
 8002a88:	200000f0 	.word	0x200000f0
 8002a8c:	08006e0c 	.word	0x08006e0c
 8002a90:	0800705c 	.word	0x0800705c

08002a94 <LOWPWR1.11>:
void LOWPWR1(void){
 8002a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4664      	mov	r4, ip
 8002a9c:	4663      	mov	r3, ip
 8002a9e:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick()-lastPing < 1100) { }
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	f001 f969 	bl	8003d78 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b5c <LOWPWR1.11+0xc8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	4a2c      	ldr	r2, [pc, #176]	@ (8002b60 <LOWPWR1.11+0xcc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d9f6      	bls.n	8002aa2 <LOWPWR1.11+0xe>
		lcdPrint(7, 40,	"        ",   1);
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <LOWPWR1.11+0xd0>)
 8002ab6:	46a4      	mov	ip, r4
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2128      	movs	r1, #40	@ 0x28
 8002abc:	2007      	movs	r0, #7
 8002abe:	f7fe f92b 	bl	8000d18 <lcdPrint.0>
		uint8_t rx_buff[15]={0};
 8002ac2:	2510      	movs	r5, #16
 8002ac4:	197b      	adds	r3, r7, r5
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	3304      	adds	r3, #4
 8002acc:	220b      	movs	r2, #11
 8002ace:	2100      	movs	r1, #0
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f003 fc97 	bl	8006404 <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	019b      	lsls	r3, r3, #6
 8002ada:	4823      	ldr	r0, [pc, #140]	@ (8002b68 <LOWPWR1.11+0xd4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	0019      	movs	r1, r3
 8002ae0:	f001 fbb9 	bl	8004256 <HAL_GPIO_WritePin>
		uint8_t msg[]="LOWPW1\r";
 8002ae4:	2608      	movs	r6, #8
 8002ae6:	19bb      	adds	r3, r7, r6
 8002ae8:	4a20      	ldr	r2, [pc, #128]	@ (8002b6c <LOWPWR1.11+0xd8>)
 8002aea:	ca03      	ldmia	r2!, {r0, r1}
 8002aec:	c303      	stmia	r3!, {r0, r1}
		MX_USART2_UART_Init();
 8002aee:	f000 fa4f 	bl	8002f90 <MX_USART2_UART_Init>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8002af2:	19b9      	adds	r1, r7, r6
 8002af4:	481e      	ldr	r0, [pc, #120]	@ (8002b70 <LOWPWR1.11+0xdc>)
 8002af6:	2332      	movs	r3, #50	@ 0x32
 8002af8:	2208      	movs	r2, #8
 8002afa:	f002 fee3 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_buff, 15, 50);
 8002afe:	1979      	adds	r1, r7, r5
 8002b00:	481b      	ldr	r0, [pc, #108]	@ (8002b70 <LOWPWR1.11+0xdc>)
 8002b02:	2332      	movs	r3, #50	@ 0x32
 8002b04:	220f      	movs	r2, #15
 8002b06:	f002 ff7d 	bl	8005a04 <HAL_UART_Receive>
		lastPing = HAL_GetTick();
 8002b0a:	f001 f935 	bl	8003d78 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <LOWPWR1.11+0xc8>)
 8002b12:	601a      	str	r2, [r3, #0]
		if (rx_buff[1] == 0x4F ) {lcdPrintUpdate(7, 40, "OK",  1);}
 8002b14:	197b      	adds	r3, r7, r5
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	2b4f      	cmp	r3, #79	@ 0x4f
 8002b1a:	d107      	bne.n	8002b2c <LOWPWR1.11+0x98>
 8002b1c:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <LOWPWR1.11+0xe0>)
 8002b1e:	46a4      	mov	ip, r4
 8002b20:	2301      	movs	r3, #1
 8002b22:	2128      	movs	r1, #40	@ 0x28
 8002b24:	2007      	movs	r0, #7
 8002b26:	f7fe fd01 	bl	800152c <lcdPrintUpdate.10>
 8002b2a:	e006      	b.n	8002b3a <LOWPWR1.11+0xa6>
		else {lcdPrintUpdate(7, 40, "FAULT",  1);}
 8002b2c:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <LOWPWR1.11+0xe4>)
 8002b2e:	46a4      	mov	ip, r4
 8002b30:	2301      	movs	r3, #1
 8002b32:	2128      	movs	r1, #40	@ 0x28
 8002b34:	2007      	movs	r0, #7
 8002b36:	f7fe fcf9 	bl	800152c <lcdPrintUpdate.10>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	480a      	ldr	r0, [pc, #40]	@ (8002b68 <LOWPWR1.11+0xd4>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	0019      	movs	r1, r3
 8002b44:	f001 fb87 	bl	8004256 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002b48:	23fa      	movs	r3, #250	@ 0xfa
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f001 f91d 	bl	8003d8c <HAL_Delay>
}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b009      	add	sp, #36	@ 0x24
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	20000184 	.word	0x20000184
 8002b60:	0000044b 	.word	0x0000044b
 8002b64:	08007044 	.word	0x08007044
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	08007088 	.word	0x08007088
 8002b70:	200000f0 	.word	0x200000f0
 8002b74:	08006e0c 	.word	0x08006e0c
 8002b78:	0800705c 	.word	0x0800705c

08002b7c <pageParamsDraw.19>:
void pageParamsDraw(void){
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b0a7      	sub	sp, #156	@ 0x9c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4664      	mov	r4, ip
 8002b84:	4663      	mov	r3, ip
 8002b86:	607b      	str	r3, [r7, #4]
	if (HAL_GetTick()-lastPing > 1100){//таймаут опроса опроса
 8002b88:	f001 f8f6 	bl	8003d78 <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8002e04 <pageParamsDraw.19+0x288>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	4a9c      	ldr	r2, [pc, #624]	@ (8002e08 <pageParamsDraw.19+0x28c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d800      	bhi.n	8002b9c <pageParamsDraw.19+0x20>
 8002b9a:	e12e      	b.n	8002dfa <pageParamsDraw.19+0x27e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	019b      	lsls	r3, r3, #6
 8002ba0:	489a      	ldr	r0, [pc, #616]	@ (8002e0c <pageParamsDraw.19+0x290>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	f001 fb56 	bl	8004256 <HAL_GPIO_WritePin>
		uint8_t msg[]={0x46,0x0D};  uint8_t rx_buffer[73]={0};  MX_USART2_UART_Init();
 8002baa:	2694      	movs	r6, #148	@ 0x94
 8002bac:	19bb      	adds	r3, r7, r6
 8002bae:	4a98      	ldr	r2, [pc, #608]	@ (8002e10 <pageParamsDraw.19+0x294>)
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	2508      	movs	r5, #8
 8002bb4:	197b      	adds	r3, r7, r5
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2245      	movs	r2, #69	@ 0x45
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f003 fc1f 	bl	8006404 <memset>
 8002bc6:	f000 f9e3 	bl	8002f90 <MX_USART2_UART_Init>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 50);
 8002bca:	19b9      	adds	r1, r7, r6
 8002bcc:	4891      	ldr	r0, [pc, #580]	@ (8002e14 <pageParamsDraw.19+0x298>)
 8002bce:	2332      	movs	r3, #50	@ 0x32
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f002 fe77 	bl	80058c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rx_buffer, 73, 100);
 8002bd6:	1979      	adds	r1, r7, r5
 8002bd8:	488e      	ldr	r0, [pc, #568]	@ (8002e14 <pageParamsDraw.19+0x298>)
 8002bda:	2364      	movs	r3, #100	@ 0x64
 8002bdc:	2249      	movs	r2, #73	@ 0x49
 8002bde:	f002 ff11 	bl	8005a04 <HAL_UART_Receive>
		lastPing = HAL_GetTick();
 8002be2:	f001 f8c9 	bl	8003d78 <HAL_GetTick>
 8002be6:	0002      	movs	r2, r0
 8002be8:	4b86      	ldr	r3, [pc, #536]	@ (8002e04 <pageParamsDraw.19+0x288>)
 8002bea:	601a      	str	r2, [r3, #0]
		char C[6]={0}; char C1[6]={0}; char Um[6]={0}; char Ur[6]={0}; char Stz0[6]={0}; char Stz[6]={0}; char St[6]={0};  char Stzkt[6]={0};
 8002bec:	268c      	movs	r6, #140	@ 0x8c
 8002bee:	19bb      	adds	r3, r7, r6
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	809a      	strh	r2, [r3, #4]
 8002bf8:	2384      	movs	r3, #132	@ 0x84
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	809a      	strh	r2, [r3, #4]
 8002c04:	227c      	movs	r2, #124	@ 0x7c
 8002c06:	18bb      	adds	r3, r7, r2
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	809a      	strh	r2, [r3, #4]
 8002c10:	2174      	movs	r1, #116	@ 0x74
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	809a      	strh	r2, [r3, #4]
 8002c1c:	206c      	movs	r0, #108	@ 0x6c
 8002c1e:	183b      	adds	r3, r7, r0
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	809a      	strh	r2, [r3, #4]
 8002c28:	2164      	movs	r1, #100	@ 0x64
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	809a      	strh	r2, [r3, #4]
 8002c34:	235c      	movs	r3, #92	@ 0x5c
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	809a      	strh	r2, [r3, #4]
 8002c40:	2154      	movs	r1, #84	@ 0x54
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	809a      	strh	r2, [r3, #4]
		strncpy(C , &rx_buffer[43] , 5); strncpy(C1 , &rx_buffer[49] , 5);
 8002c4c:	197b      	adds	r3, r7, r5
 8002c4e:	0019      	movs	r1, r3
 8002c50:	312b      	adds	r1, #43	@ 0x2b
 8002c52:	19bb      	adds	r3, r7, r6
 8002c54:	2205      	movs	r2, #5
 8002c56:	0018      	movs	r0, r3
 8002c58:	f003 fbdc 	bl	8006414 <strncpy>
 8002c5c:	197b      	adds	r3, r7, r5
 8002c5e:	0019      	movs	r1, r3
 8002c60:	3131      	adds	r1, #49	@ 0x31
 8002c62:	2384      	movs	r3, #132	@ 0x84
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2205      	movs	r2, #5
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f003 fbd3 	bl	8006414 <strncpy>
		strncpy(Stz0 , &rx_buffer[25] , 5); strncpy(Stz , &rx_buffer[31] , 5);
 8002c6e:	197b      	adds	r3, r7, r5
 8002c70:	0019      	movs	r1, r3
 8002c72:	3119      	adds	r1, #25
 8002c74:	206c      	movs	r0, #108	@ 0x6c
 8002c76:	183b      	adds	r3, r7, r0
 8002c78:	2205      	movs	r2, #5
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f003 fbca 	bl	8006414 <strncpy>
 8002c80:	197b      	adds	r3, r7, r5
 8002c82:	0019      	movs	r1, r3
 8002c84:	311f      	adds	r1, #31
 8002c86:	2264      	movs	r2, #100	@ 0x64
 8002c88:	18bb      	adds	r3, r7, r2
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f003 fbc1 	bl	8006414 <strncpy>
		strncpy(St , &rx_buffer[7] , 5); strncpy(Stzkt , &rx_buffer[37] , 5);
 8002c92:	197b      	adds	r3, r7, r5
 8002c94:	1dd9      	adds	r1, r3, #7
 8002c96:	235c      	movs	r3, #92	@ 0x5c
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f003 fbb9 	bl	8006414 <strncpy>
 8002ca2:	197b      	adds	r3, r7, r5
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	3125      	adds	r1, #37	@ 0x25
 8002ca8:	2054      	movs	r0, #84	@ 0x54
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	2205      	movs	r2, #5
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f003 fbb0 	bl	8006414 <strncpy>
		strncpy(Um , &rx_buffer[19] , 5);  strncpy(Ur , &rx_buffer[13] , 5);
 8002cb4:	197b      	adds	r3, r7, r5
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	3113      	adds	r1, #19
 8002cba:	227c      	movs	r2, #124	@ 0x7c
 8002cbc:	18bb      	adds	r3, r7, r2
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f003 fba7 	bl	8006414 <strncpy>
 8002cc6:	197b      	adds	r3, r7, r5
 8002cc8:	0019      	movs	r1, r3
 8002cca:	310d      	adds	r1, #13
 8002ccc:	2574      	movs	r5, #116	@ 0x74
 8002cce:	197b      	adds	r3, r7, r5
 8002cd0:	2205      	movs	r2, #5
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f003 fb9e 	bl	8006414 <strncpy>
		lcdPrint(0, 0, "C :     ", 1); lcdPrint(21, 0, C, 1); lcdPrint(63, 0, "C1 :     ", 1); lcdPrint(91, 0, C1, 1);
 8002cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8002e18 <pageParamsDraw.19+0x29c>)
 8002cda:	46a4      	mov	ip, r4
 8002cdc:	2301      	movs	r3, #1
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fe f819 	bl	8000d18 <lcdPrint.0>
 8002ce6:	19ba      	adds	r2, r7, r6
 8002ce8:	46a4      	mov	ip, r4
 8002cea:	2301      	movs	r3, #1
 8002cec:	2100      	movs	r1, #0
 8002cee:	2015      	movs	r0, #21
 8002cf0:	f7fe f812 	bl	8000d18 <lcdPrint.0>
 8002cf4:	4a49      	ldr	r2, [pc, #292]	@ (8002e1c <pageParamsDraw.19+0x2a0>)
 8002cf6:	46a4      	mov	ip, r4
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	203f      	movs	r0, #63	@ 0x3f
 8002cfe:	f7fe f80b 	bl	8000d18 <lcdPrint.0>
 8002d02:	2384      	movs	r3, #132	@ 0x84
 8002d04:	18fa      	adds	r2, r7, r3
 8002d06:	46a4      	mov	ip, r4
 8002d08:	2301      	movs	r3, #1
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	205b      	movs	r0, #91	@ 0x5b
 8002d0e:	f7fe f803 	bl	8000d18 <lcdPrint.0>
		lcdPrint(0, 15, "S0:     ", 1); lcdPrint(21, 15, Stz0, 1);	lcdPrint(63, 15, "Stz:     ", 1); lcdPrint(91, 15, Stz, 1);
 8002d12:	4a43      	ldr	r2, [pc, #268]	@ (8002e20 <pageParamsDraw.19+0x2a4>)
 8002d14:	46a4      	mov	ip, r4
 8002d16:	2301      	movs	r3, #1
 8002d18:	210f      	movs	r1, #15
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fd fffc 	bl	8000d18 <lcdPrint.0>
 8002d20:	206c      	movs	r0, #108	@ 0x6c
 8002d22:	183a      	adds	r2, r7, r0
 8002d24:	46a4      	mov	ip, r4
 8002d26:	2301      	movs	r3, #1
 8002d28:	210f      	movs	r1, #15
 8002d2a:	2015      	movs	r0, #21
 8002d2c:	f7fd fff4 	bl	8000d18 <lcdPrint.0>
 8002d30:	4a3c      	ldr	r2, [pc, #240]	@ (8002e24 <pageParamsDraw.19+0x2a8>)
 8002d32:	46a4      	mov	ip, r4
 8002d34:	2301      	movs	r3, #1
 8002d36:	210f      	movs	r1, #15
 8002d38:	203f      	movs	r0, #63	@ 0x3f
 8002d3a:	f7fd ffed 	bl	8000d18 <lcdPrint.0>
 8002d3e:	2164      	movs	r1, #100	@ 0x64
 8002d40:	187a      	adds	r2, r7, r1
 8002d42:	46a4      	mov	ip, r4
 8002d44:	2301      	movs	r3, #1
 8002d46:	210f      	movs	r1, #15
 8002d48:	205b      	movs	r0, #91	@ 0x5b
 8002d4a:	f7fd ffe5 	bl	8000d18 <lcdPrint.0>
		lcdPrint(0, 25, "St:     ", 1); lcdPrint(21, 25, St, 1);	lcdPrint(63, 25, "Skt:     ", 1); lcdPrint(91, 25, Stzkt, 1);
 8002d4e:	4a36      	ldr	r2, [pc, #216]	@ (8002e28 <pageParamsDraw.19+0x2ac>)
 8002d50:	46a4      	mov	ip, r4
 8002d52:	2301      	movs	r3, #1
 8002d54:	2119      	movs	r1, #25
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7fd ffde 	bl	8000d18 <lcdPrint.0>
 8002d5c:	235c      	movs	r3, #92	@ 0x5c
 8002d5e:	18fa      	adds	r2, r7, r3
 8002d60:	46a4      	mov	ip, r4
 8002d62:	2301      	movs	r3, #1
 8002d64:	2119      	movs	r1, #25
 8002d66:	2015      	movs	r0, #21
 8002d68:	f7fd ffd6 	bl	8000d18 <lcdPrint.0>
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e2c <pageParamsDraw.19+0x2b0>)
 8002d6e:	46a4      	mov	ip, r4
 8002d70:	2301      	movs	r3, #1
 8002d72:	2119      	movs	r1, #25
 8002d74:	203f      	movs	r0, #63	@ 0x3f
 8002d76:	f7fd ffcf 	bl	8000d18 <lcdPrint.0>
 8002d7a:	2054      	movs	r0, #84	@ 0x54
 8002d7c:	183a      	adds	r2, r7, r0
 8002d7e:	46a4      	mov	ip, r4
 8002d80:	2301      	movs	r3, #1
 8002d82:	2119      	movs	r1, #25
 8002d84:	205b      	movs	r0, #91	@ 0x5b
 8002d86:	f7fd ffc7 	bl	8000d18 <lcdPrint.0>
		lcdPrint(0, 40, "Um:     ", 1); lcdPrint(21, 40, Um, 1);  lcdPrint(63, 40, "Ur :     ", 1);  lcdPrint(91, 40, Ur, 1);
 8002d8a:	4a29      	ldr	r2, [pc, #164]	@ (8002e30 <pageParamsDraw.19+0x2b4>)
 8002d8c:	46a4      	mov	ip, r4
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2128      	movs	r1, #40	@ 0x28
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fd ffc0 	bl	8000d18 <lcdPrint.0>
 8002d98:	227c      	movs	r2, #124	@ 0x7c
 8002d9a:	18ba      	adds	r2, r7, r2
 8002d9c:	46a4      	mov	ip, r4
 8002d9e:	2301      	movs	r3, #1
 8002da0:	2128      	movs	r1, #40	@ 0x28
 8002da2:	2015      	movs	r0, #21
 8002da4:	f7fd ffb8 	bl	8000d18 <lcdPrint.0>
 8002da8:	4a22      	ldr	r2, [pc, #136]	@ (8002e34 <pageParamsDraw.19+0x2b8>)
 8002daa:	46a4      	mov	ip, r4
 8002dac:	2301      	movs	r3, #1
 8002dae:	2128      	movs	r1, #40	@ 0x28
 8002db0:	203f      	movs	r0, #63	@ 0x3f
 8002db2:	f7fd ffb1 	bl	8000d18 <lcdPrint.0>
 8002db6:	197a      	adds	r2, r7, r5
 8002db8:	46a4      	mov	ip, r4
 8002dba:	2301      	movs	r3, #1
 8002dbc:	2128      	movs	r1, #40	@ 0x28
 8002dbe:	205b      	movs	r0, #91	@ 0x5b
 8002dc0:	f7fd ffaa 	bl	8000d18 <lcdPrint.0>
		lcdPrint(0, 53, " Exit",   1);	if (selected == 0) {lcdPrint(0, 53, "-", 1);};
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e38 <pageParamsDraw.19+0x2bc>)
 8002dc6:	46a4      	mov	ip, r4
 8002dc8:	2301      	movs	r3, #1
 8002dca:	2135      	movs	r1, #53	@ 0x35
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd ffa3 	bl	8000d18 <lcdPrint.0>
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <pageParamsDraw.19+0x2c0>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <pageParamsDraw.19+0x26c>
 8002dda:	4a19      	ldr	r2, [pc, #100]	@ (8002e40 <pageParamsDraw.19+0x2c4>)
 8002ddc:	46a4      	mov	ip, r4
 8002dde:	2301      	movs	r3, #1
 8002de0:	2135      	movs	r1, #53	@ 0x35
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7fd ff98 	bl	8000d18 <lcdPrint.0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	019b      	lsls	r3, r3, #6
 8002dec:	4807      	ldr	r0, [pc, #28]	@ (8002e0c <pageParamsDraw.19+0x290>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	0019      	movs	r1, r3
 8002df2:	f001 fa30 	bl	8004256 <HAL_GPIO_WritePin>
		SSD1306_UpdateScreen();
 8002df6:	f000 fa59 	bl	80032ac <SSD1306_UpdateScreen>
}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b027      	add	sp, #156	@ 0x9c
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	20000184 	.word	0x20000184
 8002e08:	0000044c 	.word	0x0000044c
 8002e0c:	48000800 	.word	0x48000800
 8002e10:	00000d46 	.word	0x00000d46
 8002e14:	200000f0 	.word	0x200000f0
 8002e18:	08007090 	.word	0x08007090
 8002e1c:	0800709c 	.word	0x0800709c
 8002e20:	080070a8 	.word	0x080070a8
 8002e24:	080070b4 	.word	0x080070b4
 8002e28:	080070c0 	.word	0x080070c0
 8002e2c:	080070cc 	.word	0x080070cc
 8002e30:	080070d8 	.word	0x080070d8
 8002e34:	080070e4 	.word	0x080070e4
 8002e38:	08006f18 	.word	0x08006f18
 8002e3c:	20000181 	.word	0x20000181
 8002e40:	08006f20 	.word	0x08006f20

08002e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b095      	sub	sp, #84	@ 0x54
 8002e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e4a:	2420      	movs	r4, #32
 8002e4c:	193b      	adds	r3, r7, r4
 8002e4e:	0018      	movs	r0, r3
 8002e50:	2330      	movs	r3, #48	@ 0x30
 8002e52:	001a      	movs	r2, r3
 8002e54:	2100      	movs	r1, #0
 8002e56:	f003 fad5 	bl	8006404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	0018      	movs	r0, r3
 8002e60:	2310      	movs	r3, #16
 8002e62:	001a      	movs	r2, r3
 8002e64:	2100      	movs	r1, #0
 8002e66:	f003 facd 	bl	8006404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e6a:	003b      	movs	r3, r7
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	2310      	movs	r3, #16
 8002e70:	001a      	movs	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f003 fac6 	bl	8006404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002e78:	0021      	movs	r1, r4
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	2201      	movs	r2, #1
 8002e84:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2201      	movs	r2, #1
 8002e8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2210      	movs	r2, #16
 8002e90:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	2202      	movs	r2, #2
 8002e96:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	2280      	movs	r2, #128	@ 0x80
 8002e9c:	0252      	lsls	r2, r2, #9
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	0352      	lsls	r2, r2, #13
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	2200      	movs	r2, #0
 8002eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f001 ff87 	bl	8004dc4 <HAL_RCC_OscConfig>
 8002eb6:	1e03      	subs	r3, r0, #0
 8002eb8:	d001      	beq.n	8002ebe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002eba:	f000 f92d 	bl	8003118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ebe:	2110      	movs	r1, #16
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ec6:	187b      	adds	r3, r7, r1
 8002ec8:	2202      	movs	r2, #2
 8002eca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2101      	movs	r1, #1
 8002edc:	0018      	movs	r0, r3
 8002ede:	f002 fa8b 	bl	80053f8 <HAL_RCC_ClockConfig>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d001      	beq.n	8002eea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002ee6:	f000 f917 	bl	8003118 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002eea:	003b      	movs	r3, r7
 8002eec:	2220      	movs	r2, #32
 8002eee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002ef0:	003b      	movs	r3, r7
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef6:	003b      	movs	r3, r7
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f002 fbc1 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8002efe:	1e03      	subs	r3, r0, #0
 8002f00:	d001      	beq.n	8002f06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f02:	f000 f909 	bl	8003118 <Error_Handler>
  }
}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b015      	add	sp, #84	@ 0x54
 8002f0c:	bd90      	pop	{r4, r7, pc}
	...

08002f10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <MX_I2C1_Init+0x78>)
 8002f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f8c <MX_I2C1_Init+0x7c>)
 8002f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f20:	4b18      	ldr	r3, [pc, #96]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f26:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f2c:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f32:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f38:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f44:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f001 f99f 	bl	8004290 <HAL_I2C_Init>
 8002f52:	1e03      	subs	r3, r0, #0
 8002f54:	d001      	beq.n	8002f5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f56:	f000 f8df 	bl	8003118 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f001 fe98 	bl	8004c94 <HAL_I2CEx_ConfigAnalogFilter>
 8002f64:	1e03      	subs	r3, r0, #0
 8002f66:	d001      	beq.n	8002f6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f68:	f000 f8d6 	bl	8003118 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <MX_I2C1_Init+0x74>)
 8002f6e:	2100      	movs	r1, #0
 8002f70:	0018      	movs	r0, r3
 8002f72:	f001 fedb 	bl	8004d2c <HAL_I2CEx_ConfigDigitalFilter>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d001      	beq.n	8002f7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f7a:	f000 f8cd 	bl	8003118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	2000009c 	.word	0x2000009c
 8002f88:	40005400 	.word	0x40005400
 8002f8c:	0010020a 	.word	0x0010020a

08002f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f94:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002f96:	4a15      	ldr	r2, [pc, #84]	@ (8002fec <MX_USART2_UART_Init+0x5c>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002f9c:	2296      	movs	r2, #150	@ 0x96
 8002f9e:	0192      	lsls	r2, r2, #6
 8002fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <MX_USART2_UART_Init+0x58>)
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f002 fc21 	bl	800581c <HAL_UART_Init>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002fde:	f000 f89b 	bl	8003118 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200000f0 	.word	0x200000f0
 8002fec:	40004400 	.word	0x40004400

08002ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b08b      	sub	sp, #44	@ 0x2c
 8002ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff6:	2414      	movs	r4, #20
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	2314      	movs	r3, #20
 8002ffe:	001a      	movs	r2, r3
 8003000:	2100      	movs	r1, #0
 8003002:	f003 f9ff 	bl	8006404 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003006:	4b41      	ldr	r3, [pc, #260]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	4b40      	ldr	r3, [pc, #256]	@ (800310c <MX_GPIO_Init+0x11c>)
 800300c:	2180      	movs	r1, #128	@ 0x80
 800300e:	0309      	lsls	r1, r1, #12
 8003010:	430a      	orrs	r2, r1
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003022:	4b3a      	ldr	r3, [pc, #232]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	4b39      	ldr	r3, [pc, #228]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003028:	2180      	movs	r1, #128	@ 0x80
 800302a:	03c9      	lsls	r1, r1, #15
 800302c:	430a      	orrs	r2, r1
 800302e:	615a      	str	r2, [r3, #20]
 8003030:	4b36      	ldr	r3, [pc, #216]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	03db      	lsls	r3, r3, #15
 8003038:	4013      	ands	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	4b33      	ldr	r3, [pc, #204]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	4b32      	ldr	r3, [pc, #200]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	0289      	lsls	r1, r1, #10
 8003048:	430a      	orrs	r2, r1
 800304a:	615a      	str	r2, [r3, #20]
 800304c:	4b2f      	ldr	r3, [pc, #188]	@ (800310c <MX_GPIO_Init+0x11c>)
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	4b2c      	ldr	r3, [pc, #176]	@ (800310c <MX_GPIO_Init+0x11c>)
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <MX_GPIO_Init+0x11c>)
 8003060:	2180      	movs	r1, #128	@ 0x80
 8003062:	02c9      	lsls	r1, r1, #11
 8003064:	430a      	orrs	r2, r1
 8003066:	615a      	str	r2, [r3, #20]
 8003068:	4b28      	ldr	r3, [pc, #160]	@ (800310c <MX_GPIO_Init+0x11c>)
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	02db      	lsls	r3, r3, #11
 8003070:	4013      	ands	r3, r2
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_sys_GPIO_Port, LED_sys_Pin, GPIO_PIN_RESET);
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	4825      	ldr	r0, [pc, #148]	@ (8003110 <MX_GPIO_Init+0x120>)
 800307c:	2200      	movs	r2, #0
 800307e:	0019      	movs	r1, r3
 8003080:	f001 f8e9 	bl	8004256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4822      	ldr	r0, [pc, #136]	@ (8003114 <MX_GPIO_Init+0x124>)
 800308a:	2200      	movs	r2, #0
 800308c:	0019      	movs	r1, r3
 800308e:	f001 f8e2 	bl	8004256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_sys_Pin */
  GPIO_InitStruct.Pin = LED_sys_Pin;
 8003092:	193b      	adds	r3, r7, r4
 8003094:	2280      	movs	r2, #128	@ 0x80
 8003096:	0192      	lsls	r2, r2, #6
 8003098:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	193b      	adds	r3, r7, r4
 800309c:	2201      	movs	r2, #1
 800309e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_sys_GPIO_Port, &GPIO_InitStruct);
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <MX_GPIO_Init+0x120>)
 80030b0:	0019      	movs	r1, r3
 80030b2:	0010      	movs	r0, r2
 80030b4:	f000 ff42 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030b8:	0021      	movs	r1, r4
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	0152      	lsls	r2, r2, #5
 80030c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c2:	000c      	movs	r4, r1
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	2201      	movs	r2, #1
 80030ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	193b      	adds	r3, r7, r4
 80030d2:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <MX_GPIO_Init+0x124>)
 80030d4:	0019      	movs	r1, r3
 80030d6:	0010      	movs	r0, r2
 80030d8:	f000 ff30 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 80030dc:	0021      	movs	r1, r4
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2280      	movs	r2, #128	@ 0x80
 80030e2:	0052      	lsls	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2201      	movs	r2, #1
 80030ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	4a06      	ldr	r2, [pc, #24]	@ (8003114 <MX_GPIO_Init+0x124>)
 80030fc:	0019      	movs	r1, r3
 80030fe:	0010      	movs	r0, r2
 8003100:	f000 ff1c 	bl	8003f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b00b      	add	sp, #44	@ 0x2c
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	48000800 	.word	0x48000800
 8003114:	48000400 	.word	0x48000400

08003118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800311c:	b672      	cpsid	i
}
 800311e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003120:	46c0      	nop			@ (mov r8, r8)
 8003122:	e7fd      	b.n	8003120 <Error_Handler+0x8>

08003124 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800312a:	f000 fbe5 	bl	80038f8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800312e:	4b5b      	ldr	r3, [pc, #364]	@ (800329c <SSD1306_Init+0x178>)
 8003130:	485b      	ldr	r0, [pc, #364]	@ (80032a0 <SSD1306_Init+0x17c>)
 8003132:	2201      	movs	r2, #1
 8003134:	2178      	movs	r1, #120	@ 0x78
 8003136:	f001 fa7b 	bl	8004630 <HAL_I2C_IsDeviceReady>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d001      	beq.n	8003142 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800313e:	2300      	movs	r3, #0
 8003140:	e0a8      	b.n	8003294 <SSD1306_Init+0x170>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003142:	4b58      	ldr	r3, [pc, #352]	@ (80032a4 <SSD1306_Init+0x180>)
 8003144:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003146:	e002      	b.n	800314e <SSD1306_Init+0x2a>
		p--;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f9      	bne.n	8003148 <SSD1306_Init+0x24>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003154:	22ae      	movs	r2, #174	@ 0xae
 8003156:	2100      	movs	r1, #0
 8003158:	2078      	movs	r0, #120	@ 0x78
 800315a:	f000 fc4d 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800315e:	2220      	movs	r2, #32
 8003160:	2100      	movs	r1, #0
 8003162:	2078      	movs	r0, #120	@ 0x78
 8003164:	f000 fc48 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003168:	2210      	movs	r2, #16
 800316a:	2100      	movs	r1, #0
 800316c:	2078      	movs	r0, #120	@ 0x78
 800316e:	f000 fc43 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003172:	22b0      	movs	r2, #176	@ 0xb0
 8003174:	2100      	movs	r1, #0
 8003176:	2078      	movs	r0, #120	@ 0x78
 8003178:	f000 fc3e 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800317c:	22c8      	movs	r2, #200	@ 0xc8
 800317e:	2100      	movs	r1, #0
 8003180:	2078      	movs	r0, #120	@ 0x78
 8003182:	f000 fc39 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	2078      	movs	r0, #120	@ 0x78
 800318c:	f000 fc34 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003190:	2210      	movs	r2, #16
 8003192:	2100      	movs	r1, #0
 8003194:	2078      	movs	r0, #120	@ 0x78
 8003196:	f000 fc2f 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800319a:	2240      	movs	r2, #64	@ 0x40
 800319c:	2100      	movs	r1, #0
 800319e:	2078      	movs	r0, #120	@ 0x78
 80031a0:	f000 fc2a 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80031a4:	2281      	movs	r2, #129	@ 0x81
 80031a6:	2100      	movs	r1, #0
 80031a8:	2078      	movs	r0, #120	@ 0x78
 80031aa:	f000 fc25 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80031ae:	22ff      	movs	r2, #255	@ 0xff
 80031b0:	2100      	movs	r1, #0
 80031b2:	2078      	movs	r0, #120	@ 0x78
 80031b4:	f000 fc20 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80031b8:	22a1      	movs	r2, #161	@ 0xa1
 80031ba:	2100      	movs	r1, #0
 80031bc:	2078      	movs	r0, #120	@ 0x78
 80031be:	f000 fc1b 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80031c2:	22a6      	movs	r2, #166	@ 0xa6
 80031c4:	2100      	movs	r1, #0
 80031c6:	2078      	movs	r0, #120	@ 0x78
 80031c8:	f000 fc16 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80031cc:	22a8      	movs	r2, #168	@ 0xa8
 80031ce:	2100      	movs	r1, #0
 80031d0:	2078      	movs	r0, #120	@ 0x78
 80031d2:	f000 fc11 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80031d6:	223f      	movs	r2, #63	@ 0x3f
 80031d8:	2100      	movs	r1, #0
 80031da:	2078      	movs	r0, #120	@ 0x78
 80031dc:	f000 fc0c 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80031e0:	22a4      	movs	r2, #164	@ 0xa4
 80031e2:	2100      	movs	r1, #0
 80031e4:	2078      	movs	r0, #120	@ 0x78
 80031e6:	f000 fc07 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80031ea:	22d3      	movs	r2, #211	@ 0xd3
 80031ec:	2100      	movs	r1, #0
 80031ee:	2078      	movs	r0, #120	@ 0x78
 80031f0:	f000 fc02 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	2078      	movs	r0, #120	@ 0x78
 80031fa:	f000 fbfd 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80031fe:	22d5      	movs	r2, #213	@ 0xd5
 8003200:	2100      	movs	r1, #0
 8003202:	2078      	movs	r0, #120	@ 0x78
 8003204:	f000 fbf8 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003208:	22f0      	movs	r2, #240	@ 0xf0
 800320a:	2100      	movs	r1, #0
 800320c:	2078      	movs	r0, #120	@ 0x78
 800320e:	f000 fbf3 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003212:	22d9      	movs	r2, #217	@ 0xd9
 8003214:	2100      	movs	r1, #0
 8003216:	2078      	movs	r0, #120	@ 0x78
 8003218:	f000 fbee 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800321c:	2222      	movs	r2, #34	@ 0x22
 800321e:	2100      	movs	r1, #0
 8003220:	2078      	movs	r0, #120	@ 0x78
 8003222:	f000 fbe9 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003226:	22da      	movs	r2, #218	@ 0xda
 8003228:	2100      	movs	r1, #0
 800322a:	2078      	movs	r0, #120	@ 0x78
 800322c:	f000 fbe4 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003230:	2212      	movs	r2, #18
 8003232:	2100      	movs	r1, #0
 8003234:	2078      	movs	r0, #120	@ 0x78
 8003236:	f000 fbdf 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800323a:	22db      	movs	r2, #219	@ 0xdb
 800323c:	2100      	movs	r1, #0
 800323e:	2078      	movs	r0, #120	@ 0x78
 8003240:	f000 fbda 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003244:	2220      	movs	r2, #32
 8003246:	2100      	movs	r1, #0
 8003248:	2078      	movs	r0, #120	@ 0x78
 800324a:	f000 fbd5 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800324e:	228d      	movs	r2, #141	@ 0x8d
 8003250:	2100      	movs	r1, #0
 8003252:	2078      	movs	r0, #120	@ 0x78
 8003254:	f000 fbd0 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003258:	2214      	movs	r2, #20
 800325a:	2100      	movs	r1, #0
 800325c:	2078      	movs	r0, #120	@ 0x78
 800325e:	f000 fbcb 	bl	80039f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003262:	22af      	movs	r2, #175	@ 0xaf
 8003264:	2100      	movs	r1, #0
 8003266:	2078      	movs	r0, #120	@ 0x78
 8003268:	f000 fbc6 	bl	80039f8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800326c:	222e      	movs	r2, #46	@ 0x2e
 800326e:	2100      	movs	r1, #0
 8003270:	2078      	movs	r0, #120	@ 0x78
 8003272:	f000 fbc1 	bl	80039f8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003276:	2000      	movs	r0, #0
 8003278:	f000 f850 	bl	800331c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800327c:	f000 f816 	bl	80032ac <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <SSD1306_Init+0x184>)
 8003282:	2200      	movs	r2, #0
 8003284:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003286:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <SSD1306_Init+0x184>)
 8003288:	2200      	movs	r2, #0
 800328a:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <SSD1306_Init+0x184>)
 800328e:	2201      	movs	r2, #1
 8003290:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003292:	2301      	movs	r3, #1
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	00004e20 	.word	0x00004e20
 80032a0:	2000009c 	.word	0x2000009c
 80032a4:	000009c4 	.word	0x000009c4
 80032a8:	200005a8 	.word	0x200005a8

080032ac <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80032b2:	1dfb      	adds	r3, r7, #7
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e025      	b.n	8003306 <SSD1306_UpdateScreen+0x5a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3b50      	subs	r3, #80	@ 0x50
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	001a      	movs	r2, r3
 80032c4:	2100      	movs	r1, #0
 80032c6:	2078      	movs	r0, #120	@ 0x78
 80032c8:	f000 fb96 	bl	80039f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	2078      	movs	r0, #120	@ 0x78
 80032d2:	f000 fb91 	bl	80039f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80032d6:	2210      	movs	r2, #16
 80032d8:	2100      	movs	r1, #0
 80032da:	2078      	movs	r0, #120	@ 0x78
 80032dc:	f000 fb8c 	bl	80039f8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80032e0:	1dfb      	adds	r3, r7, #7
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	0013      	movs	r3, r2
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	189b      	adds	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	001a      	movs	r2, r3
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <SSD1306_UpdateScreen+0x6c>)
 80032f0:	18d2      	adds	r2, r2, r3
 80032f2:	2384      	movs	r3, #132	@ 0x84
 80032f4:	2140      	movs	r1, #64	@ 0x40
 80032f6:	2078      	movs	r0, #120	@ 0x78
 80032f8:	f000 fb12 	bl	8003920 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	781a      	ldrb	r2, [r3, #0]
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	3201      	adds	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	1dfb      	adds	r3, r7, #7
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b07      	cmp	r3, #7
 800330c:	d9d5      	bls.n	80032ba <SSD1306_UpdateScreen+0xe>
	}
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000188 	.word	0x20000188

0800331c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	0002      	movs	r2, r0
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <SSD1306_Fill+0x18>
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <SSD1306_Fill+0x1a>
 8003334:	23ff      	movs	r3, #255	@ 0xff
 8003336:	2284      	movs	r2, #132	@ 0x84
 8003338:	00d2      	lsls	r2, r2, #3
 800333a:	4804      	ldr	r0, [pc, #16]	@ (800334c <SSD1306_Fill+0x30>)
 800333c:	0019      	movs	r1, r3
 800333e:	f003 f861 	bl	8006404 <memset>
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	20000188 	.word	0x20000188

08003350 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	0004      	movs	r4, r0
 8003358:	0008      	movs	r0, r1
 800335a:	0011      	movs	r1, r2
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	1c22      	adds	r2, r4, #0
 8003360:	801a      	strh	r2, [r3, #0]
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	1c02      	adds	r2, r0, #0
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	1cfb      	adds	r3, r7, #3
 800336a:	1c0a      	adds	r2, r1, #0
 800336c:	701a      	strb	r2, [r3, #0]
	if (
 800336e:	1dbb      	adds	r3, r7, #6
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2b83      	cmp	r3, #131	@ 0x83
 8003374:	d85e      	bhi.n	8003434 <SSD1306_DrawPixel+0xe4>
		x >= SSD1306_WIDTH ||
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	2b3f      	cmp	r3, #63	@ 0x3f
 800337c:	d85a      	bhi.n	8003434 <SSD1306_DrawPixel+0xe4>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800337e:	4b2f      	ldr	r3, [pc, #188]	@ (800343c <SSD1306_DrawPixel+0xec>)
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8003386:	1cfb      	adds	r3, r7, #3
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	425a      	negs	r2, r3
 800338c:	4153      	adcs	r3, r2
 800338e:	b2da      	uxtb	r2, r3
 8003390:	1cfb      	adds	r3, r7, #3
 8003392:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003394:	1cfb      	adds	r3, r7, #3
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d124      	bne.n	80033e6 <SSD1306_DrawPixel+0x96>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800339c:	1dbb      	adds	r3, r7, #6
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	b298      	uxth	r0, r3
 80033a8:	0001      	movs	r1, r0
 80033aa:	000b      	movs	r3, r1
 80033ac:	015b      	lsls	r3, r3, #5
 80033ae:	185b      	adds	r3, r3, r1
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	18d3      	adds	r3, r2, r3
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <SSD1306_DrawPixel+0xf0>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	b25a      	sxtb	r2, r3
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	2107      	movs	r1, #7
 80033c0:	400b      	ands	r3, r1
 80033c2:	2101      	movs	r1, #1
 80033c4:	4099      	lsls	r1, r3
 80033c6:	000b      	movs	r3, r1
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	4313      	orrs	r3, r2
 80033cc:	b25c      	sxtb	r4, r3
 80033ce:	1dbb      	adds	r3, r7, #6
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	0001      	movs	r1, r0
 80033d4:	000b      	movs	r3, r1
 80033d6:	015b      	lsls	r3, r3, #5
 80033d8:	185b      	adds	r3, r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	18d3      	adds	r3, r2, r3
 80033de:	b2e1      	uxtb	r1, r4
 80033e0:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <SSD1306_DrawPixel+0xf0>)
 80033e2:	54d1      	strb	r1, [r2, r3]
 80033e4:	e027      	b.n	8003436 <SSD1306_DrawPixel+0xe6>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80033e6:	1dbb      	adds	r3, r7, #6
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	08db      	lsrs	r3, r3, #3
 80033f0:	b298      	uxth	r0, r3
 80033f2:	0001      	movs	r1, r0
 80033f4:	000b      	movs	r3, r1
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	185b      	adds	r3, r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	4a10      	ldr	r2, [pc, #64]	@ (8003440 <SSD1306_DrawPixel+0xf0>)
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	b25b      	sxtb	r3, r3
 8003404:	1d3a      	adds	r2, r7, #4
 8003406:	8812      	ldrh	r2, [r2, #0]
 8003408:	2107      	movs	r1, #7
 800340a:	400a      	ands	r2, r1
 800340c:	2101      	movs	r1, #1
 800340e:	4091      	lsls	r1, r2
 8003410:	000a      	movs	r2, r1
 8003412:	b252      	sxtb	r2, r2
 8003414:	43d2      	mvns	r2, r2
 8003416:	b252      	sxtb	r2, r2
 8003418:	4013      	ands	r3, r2
 800341a:	b25c      	sxtb	r4, r3
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	0001      	movs	r1, r0
 8003422:	000b      	movs	r3, r1
 8003424:	015b      	lsls	r3, r3, #5
 8003426:	185b      	adds	r3, r3, r1
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	18d3      	adds	r3, r2, r3
 800342c:	b2e1      	uxtb	r1, r4
 800342e:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <SSD1306_DrawPixel+0xf0>)
 8003430:	54d1      	strb	r1, [r2, r3]
 8003432:	e000      	b.n	8003436 <SSD1306_DrawPixel+0xe6>
		return;
 8003434:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003436:	46bd      	mov	sp, r7
 8003438:	b003      	add	sp, #12
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	200005a8 	.word	0x200005a8
 8003440:	20000188 	.word	0x20000188

08003444 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	0002      	movs	r2, r0
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	801a      	strh	r2, [r3, #0]
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	1c0a      	adds	r2, r1, #0
 8003454:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <SSD1306_GotoXY+0x2c>)
 8003458:	1dba      	adds	r2, r7, #6
 800345a:	8812      	ldrh	r2, [r2, #0]
 800345c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <SSD1306_GotoXY+0x2c>)
 8003460:	1d3a      	adds	r2, r7, #4
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	805a      	strh	r2, [r3, #2]
}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	200005a8 	.word	0x200005a8

08003474 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6039      	str	r1, [r7, #0]
 800347c:	0011      	movs	r1, r2
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	1c02      	adds	r2, r0, #0
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	1dbb      	adds	r3, r7, #6
 8003486:	1c0a      	adds	r2, r1, #0
 8003488:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800348a:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <SSD1306_Putc+0x100>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	001a      	movs	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	18d3      	adds	r3, r2, r3
	if (
 8003496:	2b83      	cmp	r3, #131	@ 0x83
 8003498:	dc07      	bgt.n	80034aa <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800349a:	4b36      	ldr	r3, [pc, #216]	@ (8003574 <SSD1306_Putc+0x100>)
 800349c:	885b      	ldrh	r3, [r3, #2]
 800349e:	001a      	movs	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80034a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80034a8:	dd01      	ble.n	80034ae <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e05d      	b.n	800356a <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e04a      	b.n	800354a <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	1dfb      	adds	r3, r7, #7
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	3b20      	subs	r3, #32
 80034be:	6839      	ldr	r1, [r7, #0]
 80034c0:	7849      	ldrb	r1, [r1, #1]
 80034c2:	434b      	muls	r3, r1
 80034c4:	0019      	movs	r1, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	18cb      	adds	r3, r1, r3
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e02f      	b.n	8003538 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	409a      	lsls	r2, r3
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	4013      	ands	r3, r2
 80034e4:	d011      	beq.n	800350a <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80034e6:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <SSD1306_Putc+0x100>)
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	18d3      	adds	r3, r2, r3
 80034f0:	b298      	uxth	r0, r3
 80034f2:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <SSD1306_Putc+0x100>)
 80034f4:	885a      	ldrh	r2, [r3, #2]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	18d3      	adds	r3, r2, r3
 80034fc:	b299      	uxth	r1, r3
 80034fe:	1dbb      	adds	r3, r7, #6
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	001a      	movs	r2, r3
 8003504:	f7ff ff24 	bl	8003350 <SSD1306_DrawPixel>
 8003508:	e013      	b.n	8003532 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800350a:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <SSD1306_Putc+0x100>)
 800350c:	881a      	ldrh	r2, [r3, #0]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	b29b      	uxth	r3, r3
 8003512:	18d3      	adds	r3, r2, r3
 8003514:	b298      	uxth	r0, r3
 8003516:	4b17      	ldr	r3, [pc, #92]	@ (8003574 <SSD1306_Putc+0x100>)
 8003518:	885a      	ldrh	r2, [r3, #2]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	b29b      	uxth	r3, r3
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	b299      	uxth	r1, r3
 8003522:	1dbb      	adds	r3, r7, #6
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	425a      	negs	r2, r3
 8003528:	4153      	adcs	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	001a      	movs	r2, r3
 800352e:	f7ff ff0f 	bl	8003350 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3301      	adds	r3, #1
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	001a      	movs	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4293      	cmp	r3, r2
 8003542:	d3c9      	bcc.n	80034d8 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	785b      	ldrb	r3, [r3, #1]
 800354e:	001a      	movs	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	4293      	cmp	r3, r2
 8003554:	d3ae      	bcc.n	80034b4 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <SSD1306_Putc+0x100>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	189b      	adds	r3, r3, r2
 8003560:	b29a      	uxth	r2, r3
 8003562:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <SSD1306_Putc+0x100>)
 8003564:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b006      	add	sp, #24
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	200005a8 	.word	0x200005a8

08003578 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8003586:	e013      	b.n	80035b0 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	7818      	ldrb	r0, [r3, #0]
 800358c:	1dfb      	adds	r3, r7, #7
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	0019      	movs	r1, r3
 8003594:	f7ff ff6e 	bl	8003474 <SSD1306_Putc>
 8003598:	0003      	movs	r3, r0
 800359a:	001a      	movs	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d002      	beq.n	80035aa <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	e008      	b.n	80035bc <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3301      	adds	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e7      	bne.n	8003588 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	781b      	ldrb	r3, [r3, #0]
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	0005      	movs	r5, r0
 80035cc:	000c      	movs	r4, r1
 80035ce:	0010      	movs	r0, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	1dbb      	adds	r3, r7, #6
 80035d4:	1c2a      	adds	r2, r5, #0
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	1c22      	adds	r2, r4, #0
 80035dc:	801a      	strh	r2, [r3, #0]
 80035de:	1cbb      	adds	r3, r7, #2
 80035e0:	1c02      	adds	r2, r0, #0
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	003b      	movs	r3, r7
 80035e6:	1c0a      	adds	r2, r1, #0
 80035e8:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80035ea:	1dbb      	adds	r3, r7, #6
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	2b83      	cmp	r3, #131	@ 0x83
 80035f0:	d902      	bls.n	80035f8 <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 80035f2:	1dbb      	adds	r3, r7, #6
 80035f4:	2283      	movs	r2, #131	@ 0x83
 80035f6:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 80035f8:	1cbb      	adds	r3, r7, #2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	2b83      	cmp	r3, #131	@ 0x83
 80035fe:	d902      	bls.n	8003606 <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 8003600:	1cbb      	adds	r3, r7, #2
 8003602:	2283      	movs	r2, #131	@ 0x83
 8003604:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	2b3f      	cmp	r3, #63	@ 0x3f
 800360c:	d902      	bls.n	8003614 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	223f      	movs	r2, #63	@ 0x3f
 8003612:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003614:	003b      	movs	r3, r7
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	2b3f      	cmp	r3, #63	@ 0x3f
 800361a:	d902      	bls.n	8003622 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 800361c:	003b      	movs	r3, r7
 800361e:	223f      	movs	r2, #63	@ 0x3f
 8003620:	801a      	strh	r2, [r3, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8003622:	1dba      	adds	r2, r7, #6
 8003624:	1cbb      	adds	r3, r7, #2
 8003626:	8812      	ldrh	r2, [r2, #0]
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d207      	bcs.n	800363e <SSD1306_DrawLine+0x7a>
 800362e:	1cba      	adds	r2, r7, #2
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	8812      	ldrh	r2, [r2, #0]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	b29b      	uxth	r3, r3
 800363a:	b21b      	sxth	r3, r3
 800363c:	e006      	b.n	800364c <SSD1306_DrawLine+0x88>
 800363e:	1dba      	adds	r2, r7, #6
 8003640:	1cbb      	adds	r3, r7, #2
 8003642:	8812      	ldrh	r2, [r2, #0]
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	b29b      	uxth	r3, r3
 800364a:	b21b      	sxth	r3, r3
 800364c:	2212      	movs	r2, #18
 800364e:	18ba      	adds	r2, r7, r2
 8003650:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8003652:	1d3a      	adds	r2, r7, #4
 8003654:	003b      	movs	r3, r7
 8003656:	8812      	ldrh	r2, [r2, #0]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d207      	bcs.n	800366e <SSD1306_DrawLine+0xaa>
 800365e:	003a      	movs	r2, r7
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	8812      	ldrh	r2, [r2, #0]
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	b29b      	uxth	r3, r3
 800366a:	b21b      	sxth	r3, r3
 800366c:	e006      	b.n	800367c <SSD1306_DrawLine+0xb8>
 800366e:	1d3a      	adds	r2, r7, #4
 8003670:	003b      	movs	r3, r7
 8003672:	8812      	ldrh	r2, [r2, #0]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	b29b      	uxth	r3, r3
 800367a:	b21b      	sxth	r3, r3
 800367c:	2210      	movs	r2, #16
 800367e:	18ba      	adds	r2, r7, r2
 8003680:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1;
 8003682:	1dba      	adds	r2, r7, #6
 8003684:	1cbb      	adds	r3, r7, #2
 8003686:	8812      	ldrh	r2, [r2, #0]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d201      	bcs.n	8003692 <SSD1306_DrawLine+0xce>
 800368e:	2201      	movs	r2, #1
 8003690:	e001      	b.n	8003696 <SSD1306_DrawLine+0xd2>
 8003692:	2301      	movs	r3, #1
 8003694:	425a      	negs	r2, r3
 8003696:	230e      	movs	r3, #14
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1;
 800369c:	1d3a      	adds	r2, r7, #4
 800369e:	003b      	movs	r3, r7
 80036a0:	8812      	ldrh	r2, [r2, #0]
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d201      	bcs.n	80036ac <SSD1306_DrawLine+0xe8>
 80036a8:	2201      	movs	r2, #1
 80036aa:	e001      	b.n	80036b0 <SSD1306_DrawLine+0xec>
 80036ac:	2301      	movs	r3, #1
 80036ae:	425a      	negs	r2, r3
 80036b0:	230c      	movs	r3, #12
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2;
 80036b6:	2112      	movs	r1, #18
 80036b8:	187a      	adds	r2, r7, r1
 80036ba:	2310      	movs	r3, #16
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	2000      	movs	r0, #0
 80036c0:	5e12      	ldrsh	r2, [r2, r0]
 80036c2:	2000      	movs	r0, #0
 80036c4:	5e1b      	ldrsh	r3, [r3, r0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	dd08      	ble.n	80036dc <SSD1306_DrawLine+0x118>
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	2200      	movs	r2, #0
 80036ce:	5e9b      	ldrsh	r3, [r3, r2]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da00      	bge.n	80036d6 <SSD1306_DrawLine+0x112>
 80036d4:	3301      	adds	r3, #1
 80036d6:	105b      	asrs	r3, r3, #1
 80036d8:	b21b      	sxth	r3, r3
 80036da:	e009      	b.n	80036f0 <SSD1306_DrawLine+0x12c>
 80036dc:	2310      	movs	r3, #16
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	2200      	movs	r2, #0
 80036e2:	5e9b      	ldrsh	r3, [r3, r2]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da00      	bge.n	80036ea <SSD1306_DrawLine+0x126>
 80036e8:	3301      	adds	r3, #1
 80036ea:	105b      	asrs	r3, r3, #1
 80036ec:	425b      	negs	r3, r3
 80036ee:	b21b      	sxth	r3, r3
 80036f0:	2216      	movs	r2, #22
 80036f2:	18ba      	adds	r2, r7, r2
 80036f4:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 80036f6:	2312      	movs	r3, #18
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	2200      	movs	r2, #0
 80036fc:	5e9b      	ldrsh	r3, [r3, r2]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d148      	bne.n	8003794 <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 8003702:	003a      	movs	r2, r7
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d20c      	bcs.n	8003728 <SSD1306_DrawLine+0x164>
			tmp = y1;
 800370e:	2108      	movs	r1, #8
 8003710:	187b      	adds	r3, r7, r1
 8003712:	003a      	movs	r2, r7
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 8003718:	003b      	movs	r3, r7
 800371a:	1d3a      	adds	r2, r7, #4
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8003720:	1d3b      	adds	r3, r7, #4
 8003722:	187a      	adds	r2, r7, r1
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 8003728:	1cba      	adds	r2, r7, #2
 800372a:	1dbb      	adds	r3, r7, #6
 800372c:	8812      	ldrh	r2, [r2, #0]
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d20c      	bcs.n	800374e <SSD1306_DrawLine+0x18a>
			tmp = x1;
 8003734:	2108      	movs	r1, #8
 8003736:	187b      	adds	r3, r7, r1
 8003738:	1cba      	adds	r2, r7, #2
 800373a:	8812      	ldrh	r2, [r2, #0]
 800373c:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 800373e:	1cbb      	adds	r3, r7, #2
 8003740:	1dba      	adds	r2, r7, #6
 8003742:	8812      	ldrh	r2, [r2, #0]
 8003744:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 8003746:	1dbb      	adds	r3, r7, #6
 8003748:	187a      	adds	r2, r7, r1
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	801a      	strh	r2, [r3, #0]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800374e:	2314      	movs	r3, #20
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	1d3a      	adds	r2, r7, #4
 8003754:	8812      	ldrh	r2, [r2, #0]
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	e013      	b.n	8003782 <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 800375a:	2414      	movs	r4, #20
 800375c:	193b      	adds	r3, r7, r4
 800375e:	8819      	ldrh	r1, [r3, #0]
 8003760:	2328      	movs	r3, #40	@ 0x28
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	1dbb      	adds	r3, r7, #6
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff fdf0 	bl	8003350 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003770:	0021      	movs	r1, r4
 8003772:	187b      	adds	r3, r7, r1
 8003774:	2200      	movs	r2, #0
 8003776:	5e9b      	ldrsh	r3, [r3, r2]
 8003778:	b29b      	uxth	r3, r3
 800377a:	3301      	adds	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	187b      	adds	r3, r7, r1
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	2314      	movs	r3, #20
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2200      	movs	r2, #0
 8003788:	5e9a      	ldrsh	r2, [r3, r2]
 800378a:	003b      	movs	r3, r7
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	dde3      	ble.n	800375a <SSD1306_DrawLine+0x196>
		}

		/* Return from function */
		return;
 8003792:	e0a3      	b.n	80038dc <SSD1306_DrawLine+0x318>
	}

	if (dy == 0) {
 8003794:	2310      	movs	r3, #16
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2200      	movs	r2, #0
 800379a:	5e9b      	ldrsh	r3, [r3, r2]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d148      	bne.n	8003832 <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 80037a0:	003a      	movs	r2, r7
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	8812      	ldrh	r2, [r2, #0]
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d20c      	bcs.n	80037c6 <SSD1306_DrawLine+0x202>
			tmp = y1;
 80037ac:	2108      	movs	r1, #8
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	003a      	movs	r2, r7
 80037b2:	8812      	ldrh	r2, [r2, #0]
 80037b4:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80037b6:	003b      	movs	r3, r7
 80037b8:	1d3a      	adds	r2, r7, #4
 80037ba:	8812      	ldrh	r2, [r2, #0]
 80037bc:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	187a      	adds	r2, r7, r1
 80037c2:	8812      	ldrh	r2, [r2, #0]
 80037c4:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 80037c6:	1cba      	adds	r2, r7, #2
 80037c8:	1dbb      	adds	r3, r7, #6
 80037ca:	8812      	ldrh	r2, [r2, #0]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <SSD1306_DrawLine+0x228>
			tmp = x1;
 80037d2:	2108      	movs	r1, #8
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	1cba      	adds	r2, r7, #2
 80037d8:	8812      	ldrh	r2, [r2, #0]
 80037da:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 80037dc:	1cbb      	adds	r3, r7, #2
 80037de:	1dba      	adds	r2, r7, #6
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 80037e4:	1dbb      	adds	r3, r7, #6
 80037e6:	187a      	adds	r2, r7, r1
 80037e8:	8812      	ldrh	r2, [r2, #0]
 80037ea:	801a      	strh	r2, [r3, #0]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80037ec:	2314      	movs	r3, #20
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	1dba      	adds	r2, r7, #6
 80037f2:	8812      	ldrh	r2, [r2, #0]
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	e013      	b.n	8003820 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 80037f8:	2414      	movs	r4, #20
 80037fa:	193b      	adds	r3, r7, r4
 80037fc:	8818      	ldrh	r0, [r3, #0]
 80037fe:	2328      	movs	r3, #40	@ 0x28
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff fda1 	bl	8003350 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800380e:	0021      	movs	r1, r4
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2200      	movs	r2, #0
 8003814:	5e9b      	ldrsh	r3, [r3, r2]
 8003816:	b29b      	uxth	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	187b      	adds	r3, r7, r1
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	2314      	movs	r3, #20
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	2200      	movs	r2, #0
 8003826:	5e9a      	ldrsh	r2, [r3, r2]
 8003828:	1cbb      	adds	r3, r7, #2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	dde3      	ble.n	80037f8 <SSD1306_DrawLine+0x234>
		}

		/* Return from function */
		return;
 8003830:	e054      	b.n	80038dc <SSD1306_DrawLine+0x318>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8003832:	2328      	movs	r3, #40	@ 0x28
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	8819      	ldrh	r1, [r3, #0]
 800383c:	1dbb      	adds	r3, r7, #6
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fd85 	bl	8003350 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003846:	1dba      	adds	r2, r7, #6
 8003848:	1cbb      	adds	r3, r7, #2
 800384a:	8812      	ldrh	r2, [r2, #0]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d105      	bne.n	800385e <SSD1306_DrawLine+0x29a>
 8003852:	1d3a      	adds	r2, r7, #4
 8003854:	003b      	movs	r3, r7
 8003856:	8812      	ldrh	r2, [r2, #0]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d03d      	beq.n	80038da <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err;
 800385e:	200a      	movs	r0, #10
 8003860:	183b      	adds	r3, r7, r0
 8003862:	2116      	movs	r1, #22
 8003864:	187a      	adds	r2, r7, r1
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 800386a:	183b      	adds	r3, r7, r0
 800386c:	2200      	movs	r2, #0
 800386e:	5e9a      	ldrsh	r2, [r3, r2]
 8003870:	2312      	movs	r3, #18
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2000      	movs	r0, #0
 8003876:	5e1b      	ldrsh	r3, [r3, r0]
 8003878:	425b      	negs	r3, r3
 800387a:	429a      	cmp	r2, r3
 800387c:	dd10      	ble.n	80038a0 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 800387e:	187b      	adds	r3, r7, r1
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	2310      	movs	r3, #16
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	b29a      	uxth	r2, r3
 800388c:	187b      	adds	r3, r7, r1
 800388e:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 8003890:	230e      	movs	r3, #14
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	8819      	ldrh	r1, [r3, #0]
 8003896:	1dbb      	adds	r3, r7, #6
 8003898:	1dba      	adds	r2, r7, #6
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	188a      	adds	r2, r1, r2
 800389e:	801a      	strh	r2, [r3, #0]
		}
		if (e2 < dy) {
 80038a0:	230a      	movs	r3, #10
 80038a2:	18fa      	adds	r2, r7, r3
 80038a4:	2310      	movs	r3, #16
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2100      	movs	r1, #0
 80038aa:	5e52      	ldrsh	r2, [r2, r1]
 80038ac:	2100      	movs	r1, #0
 80038ae:	5e5b      	ldrsh	r3, [r3, r1]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	dabe      	bge.n	8003832 <SSD1306_DrawLine+0x26e>
			err += dx;
 80038b4:	2116      	movs	r1, #22
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	2312      	movs	r3, #18
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	18d3      	adds	r3, r2, r3
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 80038c8:	230c      	movs	r3, #12
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	8819      	ldrh	r1, [r3, #0]
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	1d3a      	adds	r2, r7, #4
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	188a      	adds	r2, r1, r2
 80038d6:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 80038d8:	e7ab      	b.n	8003832 <SSD1306_DrawLine+0x26e>
			break;
 80038da:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 80038dc:	46bd      	mov	sp, r7
 80038de:	b006      	add	sp, #24
 80038e0:	bdb0      	pop	{r4, r5, r7, pc}

080038e2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7ff fd18 	bl	800331c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80038ec:	f7ff fcde 	bl	80032ac <SSD1306_UpdateScreen>
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80038fe:	4b07      	ldr	r3, [pc, #28]	@ (800391c <ssd1306_I2C_Init+0x24>)
 8003900:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003902:	e002      	b.n	800390a <ssd1306_I2C_Init+0x12>
		p--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
	while(p>0)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003910:	46c0      	nop			@ (mov r8, r8)
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	0003d090 	.word	0x0003d090

08003920 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003920:	b5b0      	push	{r4, r5, r7, lr}
 8003922:	b0c6      	sub	sp, #280	@ 0x118
 8003924:	af02      	add	r7, sp, #8
 8003926:	0004      	movs	r4, r0
 8003928:	0008      	movs	r0, r1
 800392a:	603a      	str	r2, [r7, #0]
 800392c:	0019      	movs	r1, r3
 800392e:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <ssd1306_I2C_WriteMulti+0xc4>)
 8003930:	2588      	movs	r5, #136	@ 0x88
 8003932:	006d      	lsls	r5, r5, #1
 8003934:	195b      	adds	r3, r3, r5
 8003936:	19db      	adds	r3, r3, r7
 8003938:	1c22      	adds	r2, r4, #0
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	4b2a      	ldr	r3, [pc, #168]	@ (80039e8 <ssd1306_I2C_WriteMulti+0xc8>)
 800393e:	002c      	movs	r4, r5
 8003940:	191b      	adds	r3, r3, r4
 8003942:	19db      	adds	r3, r3, r7
 8003944:	1c02      	adds	r2, r0, #0
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <ssd1306_I2C_WriteMulti+0xcc>)
 800394a:	0020      	movs	r0, r4
 800394c:	181b      	adds	r3, r3, r0
 800394e:	19db      	adds	r3, r3, r7
 8003950:	1c0a      	adds	r2, r1, #0
 8003952:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003954:	4b26      	ldr	r3, [pc, #152]	@ (80039f0 <ssd1306_I2C_WriteMulti+0xd0>)
 8003956:	181b      	adds	r3, r3, r0
 8003958:	19db      	adds	r3, r3, r7
 800395a:	4a23      	ldr	r2, [pc, #140]	@ (80039e8 <ssd1306_I2C_WriteMulti+0xc8>)
 800395c:	1812      	adds	r2, r2, r0
 800395e:	19d2      	adds	r2, r2, r7
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003964:	2310      	movs	r3, #16
 8003966:	33ff      	adds	r3, #255	@ 0xff
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e014      	b.n	800399a <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8003970:	2010      	movs	r0, #16
 8003972:	30ff      	adds	r0, #255	@ 0xff
 8003974:	183b      	adds	r3, r7, r0
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	18d2      	adds	r2, r2, r3
 800397c:	183b      	adds	r3, r7, r0
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	7811      	ldrb	r1, [r2, #0]
 8003984:	4a1a      	ldr	r2, [pc, #104]	@ (80039f0 <ssd1306_I2C_WriteMulti+0xd0>)
 8003986:	2488      	movs	r4, #136	@ 0x88
 8003988:	0064      	lsls	r4, r4, #1
 800398a:	1912      	adds	r2, r2, r4
 800398c:	19d2      	adds	r2, r2, r7
 800398e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003990:	183b      	adds	r3, r7, r0
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	183b      	adds	r3, r7, r0
 8003996:	3201      	adds	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	2310      	movs	r3, #16
 800399c:	33ff      	adds	r3, #255	@ 0xff
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <ssd1306_I2C_WriteMulti+0xcc>)
 80039a6:	2188      	movs	r1, #136	@ 0x88
 80039a8:	0049      	lsls	r1, r1, #1
 80039aa:	1852      	adds	r2, r2, r1
 80039ac:	19d2      	adds	r2, r2, r7
 80039ae:	8812      	ldrh	r2, [r2, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d8dd      	bhi.n	8003970 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <ssd1306_I2C_WriteMulti+0xc4>)
 80039b6:	000a      	movs	r2, r1
 80039b8:	189b      	adds	r3, r3, r2
 80039ba:	19db      	adds	r3, r3, r7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b299      	uxth	r1, r3
 80039c0:	4b0a      	ldr	r3, [pc, #40]	@ (80039ec <ssd1306_I2C_WriteMulti+0xcc>)
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	19db      	adds	r3, r3, r7
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	220c      	movs	r2, #12
 80039ce:	18ba      	adds	r2, r7, r2
 80039d0:	4808      	ldr	r0, [pc, #32]	@ (80039f4 <ssd1306_I2C_WriteMulti+0xd4>)
 80039d2:	240a      	movs	r4, #10
 80039d4:	9400      	str	r4, [sp, #0]
 80039d6:	f000 fd01 	bl	80043dc <HAL_I2C_Master_Transmit>
}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	b044      	add	sp, #272	@ 0x110
 80039e0:	bdb0      	pop	{r4, r5, r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	fffffef7 	.word	0xfffffef7
 80039e8:	fffffef6 	.word	0xfffffef6
 80039ec:	fffffef4 	.word	0xfffffef4
 80039f0:	fffffefc 	.word	0xfffffefc
 80039f4:	2000009c 	.word	0x2000009c

080039f8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	0004      	movs	r4, r0
 8003a00:	0008      	movs	r0, r1
 8003a02:	0011      	movs	r1, r2
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	1c22      	adds	r2, r4, #0
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	1dbb      	adds	r3, r7, #6
 8003a0c:	1c02      	adds	r2, r0, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	1d7b      	adds	r3, r7, #5
 8003a12:	1c0a      	adds	r2, r1, #0
 8003a14:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8003a16:	200c      	movs	r0, #12
 8003a18:	183b      	adds	r3, r7, r0
 8003a1a:	1dba      	adds	r2, r7, #6
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8003a20:	183b      	adds	r3, r7, r0
 8003a22:	1d7a      	adds	r2, r7, #5
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b299      	uxth	r1, r3
 8003a2e:	183a      	adds	r2, r7, r0
 8003a30:	4804      	ldr	r0, [pc, #16]	@ (8003a44 <ssd1306_I2C_Write+0x4c>)
 8003a32:	230a      	movs	r3, #10
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2302      	movs	r3, #2
 8003a38:	f000 fcd0 	bl	80043dc <HAL_I2C_Master_Transmit>
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b005      	add	sp, #20
 8003a42:	bd90      	pop	{r4, r7, pc}
 8003a44:	2000009c 	.word	0x2000009c

08003a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <HAL_MspInit+0x44>)
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <HAL_MspInit+0x44>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	619a      	str	r2, [r3, #24]
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <HAL_MspInit+0x44>)
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <HAL_MspInit+0x44>)
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_MspInit+0x44>)
 8003a6c:	2180      	movs	r1, #128	@ 0x80
 8003a6e:	0549      	lsls	r1, r1, #21
 8003a70:	430a      	orrs	r2, r1
 8003a72:	61da      	str	r2, [r3, #28]
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_MspInit+0x44>)
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	055b      	lsls	r3, r3, #21
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	40021000 	.word	0x40021000

08003a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b08b      	sub	sp, #44	@ 0x2c
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	2414      	movs	r4, #20
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	2314      	movs	r3, #20
 8003aa0:	001a      	movs	r2, r3
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f002 fcae 	bl	8006404 <memset>
  if(hi2c->Instance==I2C1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1c      	ldr	r2, [pc, #112]	@ (8003b20 <HAL_I2C_MspInit+0x90>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d131      	bne.n	8003b16 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <HAL_I2C_MspInit+0x94>)
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_I2C_MspInit+0x94>)
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	02c9      	lsls	r1, r1, #11
 8003abc:	430a      	orrs	r2, r1
 8003abe:	615a      	str	r2, [r3, #20]
 8003ac0:	4b18      	ldr	r3, [pc, #96]	@ (8003b24 <HAL_I2C_MspInit+0x94>)
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	02db      	lsls	r3, r3, #11
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ace:	0021      	movs	r1, r4
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	22c0      	movs	r2, #192	@ 0xc0
 8003ad4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2212      	movs	r2, #18
 8003ada:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	2201      	movs	r2, #1
 8003aec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b28 <HAL_I2C_MspInit+0x98>)
 8003af2:	0019      	movs	r1, r3
 8003af4:	0010      	movs	r0, r2
 8003af6:	f000 fa21 	bl	8003f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_I2C_MspInit+0x94>)
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <HAL_I2C_MspInit+0x94>)
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	0389      	lsls	r1, r1, #14
 8003b04:	430a      	orrs	r2, r1
 8003b06:	61da      	str	r2, [r3, #28]
 8003b08:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <HAL_I2C_MspInit+0x94>)
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	039b      	lsls	r3, r3, #14
 8003b10:	4013      	ands	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b00b      	add	sp, #44	@ 0x2c
 8003b1c:	bd90      	pop	{r4, r7, pc}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	40005400 	.word	0x40005400
 8003b24:	40021000 	.word	0x40021000
 8003b28:	48000400 	.word	0x48000400

08003b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b08b      	sub	sp, #44	@ 0x2c
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	2414      	movs	r4, #20
 8003b36:	193b      	adds	r3, r7, r4
 8003b38:	0018      	movs	r0, r3
 8003b3a:	2314      	movs	r3, #20
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f002 fc60 	bl	8006404 <memset>
  if(huart->Instance==USART2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <HAL_UART_MspInit+0x90>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d132      	bne.n	8003bb4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <HAL_UART_MspInit+0x94>)
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <HAL_UART_MspInit+0x94>)
 8003b54:	2180      	movs	r1, #128	@ 0x80
 8003b56:	0289      	lsls	r1, r1, #10
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	61da      	str	r2, [r3, #28]
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <HAL_UART_MspInit+0x94>)
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	2380      	movs	r3, #128	@ 0x80
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <HAL_UART_MspInit+0x94>)
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <HAL_UART_MspInit+0x94>)
 8003b70:	2180      	movs	r1, #128	@ 0x80
 8003b72:	0289      	lsls	r1, r1, #10
 8003b74:	430a      	orrs	r2, r1
 8003b76:	615a      	str	r2, [r3, #20]
 8003b78:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <HAL_UART_MspInit+0x94>)
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	2380      	movs	r3, #128	@ 0x80
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b86:	0021      	movs	r1, r4
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	2202      	movs	r2, #2
 8003b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba6:	187a      	adds	r2, r7, r1
 8003ba8:	2390      	movs	r3, #144	@ 0x90
 8003baa:	05db      	lsls	r3, r3, #23
 8003bac:	0011      	movs	r1, r2
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 f9c4 	bl	8003f3c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b00b      	add	sp, #44	@ 0x2c
 8003bba:	bd90      	pop	{r4, r7, pc}
 8003bbc:	40004400 	.word	0x40004400
 8003bc0:	40021000 	.word	0x40021000

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bc8:	46c0      	nop			@ (mov r8, r8)
 8003bca:	e7fd      	b.n	8003bc8 <NMI_Handler+0x4>

08003bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	e7fd      	b.n	8003bd0 <HardFault_Handler+0x4>

08003bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bec:	f000 f8b2 	bl	8003d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c00:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <_sbrk+0x5c>)
 8003c02:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <_sbrk+0x60>)
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c0c:	4b13      	ldr	r3, [pc, #76]	@ (8003c5c <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c14:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <_sbrk+0x64>)
 8003c16:	4a12      	ldr	r2, [pc, #72]	@ (8003c60 <_sbrk+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <_sbrk+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	18d3      	adds	r3, r2, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d207      	bcs.n	8003c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c28:	f002 fc08 	bl	800643c <__errno>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	220c      	movs	r2, #12
 8003c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	425b      	negs	r3, r3
 8003c36:	e009      	b.n	8003c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c38:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <_sbrk+0x64>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c3e:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	18d2      	adds	r2, r2, r3
 8003c46:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <_sbrk+0x64>)
 8003c48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20002000 	.word	0x20002000
 8003c58:	00000400 	.word	0x00000400
 8003c5c:	200005b0 	.word	0x200005b0
 8003c60:	20000700 	.word	0x20000700

08003c64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003c68:	46c0      	nop			@ (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c70:	480d      	ldr	r0, [pc, #52]	@ (8003ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c74:	f7ff fff6 	bl	8003c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c78:	480c      	ldr	r0, [pc, #48]	@ (8003cac <LoopForever+0x6>)
  ldr r1, =_edata
 8003c7a:	490d      	ldr	r1, [pc, #52]	@ (8003cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb4 <LoopForever+0xe>)
  movs r3, #0
 8003c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c80:	e002      	b.n	8003c88 <LoopCopyDataInit>

08003c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c86:	3304      	adds	r3, #4

08003c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c8c:	d3f9      	bcc.n	8003c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c90:	4c0a      	ldr	r4, [pc, #40]	@ (8003cbc <LoopForever+0x16>)
  movs r3, #0
 8003c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c94:	e001      	b.n	8003c9a <LoopFillZerobss>

08003c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c98:	3204      	adds	r2, #4

08003c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c9c:	d3fb      	bcc.n	8003c96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003c9e:	f002 fbd3 	bl	8006448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ca2:	f7fd f8ab 	bl	8000dfc <main>

08003ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ca6:	e7fe      	b.n	8003ca6 <LoopForever>
  ldr   r0, =_estack
 8003ca8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cb0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003cb4:	08009af4 	.word	0x08009af4
  ldr r2, =_sbss
 8003cb8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003cbc:	20000700 	.word	0x20000700

08003cc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cc0:	e7fe      	b.n	8003cc0 <ADC1_IRQHandler>
	...

08003cc4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <HAL_Init+0x24>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_Init+0x24>)
 8003cce:	2110      	movs	r1, #16
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003cd4:	2003      	movs	r0, #3
 8003cd6:	f000 f809 	bl	8003cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cda:	f7ff feb5 	bl	8003a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	40022000 	.word	0x40022000

08003cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cec:	b590      	push	{r4, r7, lr}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cf4:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <HAL_InitTick+0x5c>)
 8003cf6:	681c      	ldr	r4, [r3, #0]
 8003cf8:	4b14      	ldr	r3, [pc, #80]	@ (8003d4c <HAL_InitTick+0x60>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	23fa      	movs	r3, #250	@ 0xfa
 8003d00:	0098      	lsls	r0, r3, #2
 8003d02:	f7fc fa0b 	bl	800011c <__udivsi3>
 8003d06:	0003      	movs	r3, r0
 8003d08:	0019      	movs	r1, r3
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	f7fc fa06 	bl	800011c <__udivsi3>
 8003d10:	0003      	movs	r3, r0
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 f905 	bl	8003f22 <HAL_SYSTICK_Config>
 8003d18:	1e03      	subs	r3, r0, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e00f      	b.n	8003d40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d80b      	bhi.n	8003d3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	425b      	negs	r3, r3
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 f8e2 	bl	8003ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_InitTick+0x64>)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b003      	add	sp, #12
 8003d46:	bd90      	pop	{r4, r7, pc}
 8003d48:	20000024 	.word	0x20000024
 8003d4c:	2000002c 	.word	0x2000002c
 8003d50:	20000028 	.word	0x20000028

08003d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_IncTick+0x1c>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_IncTick+0x20>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	18d2      	adds	r2, r2, r3
 8003d64:	4b03      	ldr	r3, [pc, #12]	@ (8003d74 <HAL_IncTick+0x20>)
 8003d66:	601a      	str	r2, [r3, #0]
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	2000002c 	.word	0x2000002c
 8003d74:	200005b4 	.word	0x200005b4

08003d78 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d7c:	4b02      	ldr	r3, [pc, #8]	@ (8003d88 <HAL_GetTick+0x10>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	200005b4 	.word	0x200005b4

08003d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d94:	f7ff fff0 	bl	8003d78 <HAL_GetTick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	d005      	beq.n	8003db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003da6:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <HAL_Delay+0x44>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	001a      	movs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	f7ff ffe0 	bl	8003d78 <HAL_GetTick>
 8003db8:	0002      	movs	r2, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d8f7      	bhi.n	8003db4 <HAL_Delay+0x28>
  {
  }
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	2000002c 	.word	0x2000002c

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	0002      	movs	r2, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003de8:	d828      	bhi.n	8003e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dea:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea8 <__NVIC_SetPriority+0xd4>)
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	33c0      	adds	r3, #192	@ 0xc0
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	589b      	ldr	r3, [r3, r2]
 8003dfa:	1dfa      	adds	r2, r7, #7
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	0011      	movs	r1, r2
 8003e00:	2203      	movs	r2, #3
 8003e02:	400a      	ands	r2, r1
 8003e04:	00d2      	lsls	r2, r2, #3
 8003e06:	21ff      	movs	r1, #255	@ 0xff
 8003e08:	4091      	lsls	r1, r2
 8003e0a:	000a      	movs	r2, r1
 8003e0c:	43d2      	mvns	r2, r2
 8003e0e:	401a      	ands	r2, r3
 8003e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	22ff      	movs	r2, #255	@ 0xff
 8003e18:	401a      	ands	r2, r3
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	2303      	movs	r3, #3
 8003e22:	4003      	ands	r3, r0
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e28:	481f      	ldr	r0, [pc, #124]	@ (8003ea8 <__NVIC_SetPriority+0xd4>)
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	430a      	orrs	r2, r1
 8003e34:	33c0      	adds	r3, #192	@ 0xc0
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e3a:	e031      	b.n	8003ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eac <__NVIC_SetPriority+0xd8>)
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	0019      	movs	r1, r3
 8003e44:	230f      	movs	r3, #15
 8003e46:	400b      	ands	r3, r1
 8003e48:	3b08      	subs	r3, #8
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3306      	adds	r3, #6
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	3304      	adds	r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1dfa      	adds	r2, r7, #7
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	400a      	ands	r2, r1
 8003e60:	00d2      	lsls	r2, r2, #3
 8003e62:	21ff      	movs	r1, #255	@ 0xff
 8003e64:	4091      	lsls	r1, r2
 8003e66:	000a      	movs	r2, r1
 8003e68:	43d2      	mvns	r2, r2
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	22ff      	movs	r2, #255	@ 0xff
 8003e74:	401a      	ands	r2, r3
 8003e76:	1dfb      	adds	r3, r7, #7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	4003      	ands	r3, r0
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e84:	4809      	ldr	r0, [pc, #36]	@ (8003eac <__NVIC_SetPriority+0xd8>)
 8003e86:	1dfb      	adds	r3, r7, #7
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	001c      	movs	r4, r3
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	4023      	ands	r3, r4
 8003e90:	3b08      	subs	r3, #8
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	430a      	orrs	r2, r1
 8003e96:	3306      	adds	r3, #6
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	18c3      	adds	r3, r0, r3
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	601a      	str	r2, [r3, #0]
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	e000e100 	.word	0xe000e100
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	045b      	lsls	r3, r3, #17
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d301      	bcc.n	8003ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e010      	b.n	8003eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <SysTick_Config+0x44>)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	2103      	movs	r1, #3
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff ff7c 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <SysTick_Config+0x44>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <SysTick_Config+0x44>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b002      	add	sp, #8
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	210f      	movs	r1, #15
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	1c02      	adds	r2, r0, #0
 8003f08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff ff5d 	bl	8003dd4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff ffbf 	bl	8003eb0 <SysTick_Config>
 8003f32:	0003      	movs	r3, r0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4a:	e14f      	b.n	80041ec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4091      	lsls	r1, r2
 8003f56:	000a      	movs	r2, r1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d100      	bne.n	8003f64 <HAL_GPIO_Init+0x28>
 8003f62:	e140      	b.n	80041e6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d005      	beq.n	8003f7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2203      	movs	r2, #3
 8003f76:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d130      	bne.n	8003fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	0013      	movs	r3, r2
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	0013      	movs	r3, r2
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	2201      	movs	r2, #1
 8003fca:	401a      	ands	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d017      	beq.n	800401a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	0013      	movs	r3, r2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2203      	movs	r2, #3
 8004020:	4013      	ands	r3, r2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d123      	bne.n	800406e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	08da      	lsrs	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	58d3      	ldr	r3, [r2, r3]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2207      	movs	r2, #7
 8004038:	4013      	ands	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	409a      	lsls	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	43da      	mvns	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2107      	movs	r1, #7
 8004052:	400b      	ands	r3, r1
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	409a      	lsls	r2, r3
 8004058:	0013      	movs	r3, r2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	2203      	movs	r2, #3
 800407a:	409a      	lsls	r2, r3
 800407c:	0013      	movs	r3, r2
 800407e:	43da      	mvns	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2203      	movs	r2, #3
 800408c:	401a      	ands	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	409a      	lsls	r2, r3
 8004094:	0013      	movs	r3, r2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	23c0      	movs	r3, #192	@ 0xc0
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	4013      	ands	r3, r2
 80040ac:	d100      	bne.n	80040b0 <HAL_GPIO_Init+0x174>
 80040ae:	e09a      	b.n	80041e6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b0:	4b54      	ldr	r3, [pc, #336]	@ (8004204 <HAL_GPIO_Init+0x2c8>)
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	4b53      	ldr	r3, [pc, #332]	@ (8004204 <HAL_GPIO_Init+0x2c8>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	619a      	str	r2, [r3, #24]
 80040bc:	4b51      	ldr	r3, [pc, #324]	@ (8004204 <HAL_GPIO_Init+0x2c8>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004208 <HAL_GPIO_Init+0x2cc>)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	3302      	adds	r3, #2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	589b      	ldr	r3, [r3, r2]
 80040d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2203      	movs	r2, #3
 80040da:	4013      	ands	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	220f      	movs	r2, #15
 80040e0:	409a      	lsls	r2, r3
 80040e2:	0013      	movs	r3, r2
 80040e4:	43da      	mvns	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	2390      	movs	r3, #144	@ 0x90
 80040f0:	05db      	lsls	r3, r3, #23
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d013      	beq.n	800411e <HAL_GPIO_Init+0x1e2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a44      	ldr	r2, [pc, #272]	@ (800420c <HAL_GPIO_Init+0x2d0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <HAL_GPIO_Init+0x1de>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a43      	ldr	r2, [pc, #268]	@ (8004210 <HAL_GPIO_Init+0x2d4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <HAL_GPIO_Init+0x1da>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a42      	ldr	r2, [pc, #264]	@ (8004214 <HAL_GPIO_Init+0x2d8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_GPIO_Init+0x1d6>
 800410e:	2303      	movs	r3, #3
 8004110:	e006      	b.n	8004120 <HAL_GPIO_Init+0x1e4>
 8004112:	2305      	movs	r3, #5
 8004114:	e004      	b.n	8004120 <HAL_GPIO_Init+0x1e4>
 8004116:	2302      	movs	r3, #2
 8004118:	e002      	b.n	8004120 <HAL_GPIO_Init+0x1e4>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_GPIO_Init+0x1e4>
 800411e:	2300      	movs	r3, #0
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	2103      	movs	r1, #3
 8004124:	400a      	ands	r2, r1
 8004126:	0092      	lsls	r2, r2, #2
 8004128:	4093      	lsls	r3, r2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004130:	4935      	ldr	r1, [pc, #212]	@ (8004208 <HAL_GPIO_Init+0x2cc>)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	089b      	lsrs	r3, r3, #2
 8004136:	3302      	adds	r3, #2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800413e:	4b36      	ldr	r3, [pc, #216]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43da      	mvns	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	035b      	lsls	r3, r3, #13
 8004156:	4013      	ands	r3, r2
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004162:	4b2d      	ldr	r3, [pc, #180]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004168:	4b2b      	ldr	r3, [pc, #172]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	43da      	mvns	r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	2380      	movs	r3, #128	@ 0x80
 800417e:	039b      	lsls	r3, r3, #14
 8004180:	4013      	ands	r3, r2
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800418c:	4b22      	ldr	r3, [pc, #136]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004192:	4b21      	ldr	r3, [pc, #132]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43da      	mvns	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	4013      	ands	r3, r2
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80041b6:	4b18      	ldr	r3, [pc, #96]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80041bc:	4b16      	ldr	r3, [pc, #88]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	025b      	lsls	r3, r3, #9
 80041d4:	4013      	ands	r3, r2
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80041e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <HAL_GPIO_Init+0x2dc>)
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	3301      	adds	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	40da      	lsrs	r2, r3
 80041f4:	1e13      	subs	r3, r2, #0
 80041f6:	d000      	beq.n	80041fa <HAL_GPIO_Init+0x2be>
 80041f8:	e6a8      	b.n	8003f4c <HAL_GPIO_Init+0x10>
  } 
}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b006      	add	sp, #24
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	40010000 	.word	0x40010000
 800420c:	48000400 	.word	0x48000400
 8004210:	48000800 	.word	0x48000800
 8004214:	48000c00 	.word	0x48000c00
 8004218:	40010400 	.word	0x40010400

0800421c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	000a      	movs	r2, r1
 8004226:	1cbb      	adds	r3, r7, #2
 8004228:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	1cba      	adds	r2, r7, #2
 8004230:	8812      	ldrh	r2, [r2, #0]
 8004232:	4013      	ands	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004236:	230f      	movs	r3, #15
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e003      	b.n	8004248 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004240:	230f      	movs	r3, #15
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004248:	230f      	movs	r3, #15
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	781b      	ldrb	r3, [r3, #0]
  }
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b004      	add	sp, #16
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	0008      	movs	r0, r1
 8004260:	0011      	movs	r1, r2
 8004262:	1cbb      	adds	r3, r7, #2
 8004264:	1c02      	adds	r2, r0, #0
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	1c7b      	adds	r3, r7, #1
 800426a:	1c0a      	adds	r2, r1, #0
 800426c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800426e:	1c7b      	adds	r3, r7, #1
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004276:	1cbb      	adds	r3, r7, #2
 8004278:	881a      	ldrh	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800427e:	e003      	b.n	8004288 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004280:	1cbb      	adds	r3, r7, #2
 8004282:	881a      	ldrh	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004288:	46c0      	nop			@ (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e08f      	b.n	80043c2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2241      	movs	r2, #65	@ 0x41
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d107      	bne.n	80042be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2240      	movs	r2, #64	@ 0x40
 80042b2:	2100      	movs	r1, #0
 80042b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff fbe9 	bl	8003a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2241      	movs	r2, #65	@ 0x41
 80042c2:	2124      	movs	r1, #36	@ 0x24
 80042c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	438a      	bics	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	493b      	ldr	r1, [pc, #236]	@ (80043cc <HAL_I2C_Init+0x13c>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4938      	ldr	r1, [pc, #224]	@ (80043d0 <HAL_I2C_Init+0x140>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d108      	bne.n	800430e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2180      	movs	r1, #128	@ 0x80
 8004306:	0209      	lsls	r1, r1, #8
 8004308:	430a      	orrs	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	e007      	b.n	800431e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2184      	movs	r1, #132	@ 0x84
 8004318:	0209      	lsls	r1, r1, #8
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d109      	bne.n	800433a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2180      	movs	r1, #128	@ 0x80
 8004332:	0109      	lsls	r1, r1, #4
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	e007      	b.n	800434a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4923      	ldr	r1, [pc, #140]	@ (80043d4 <HAL_I2C_Init+0x144>)
 8004346:	400a      	ands	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4920      	ldr	r1, [pc, #128]	@ (80043d8 <HAL_I2C_Init+0x148>)
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	491a      	ldr	r1, [pc, #104]	@ (80043d0 <HAL_I2C_Init+0x140>)
 8004366:	400a      	ands	r2, r1
 8004368:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	431a      	orrs	r2, r3
 8004374:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69d9      	ldr	r1, [r3, #28]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2101      	movs	r1, #1
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2241      	movs	r2, #65	@ 0x41
 80043ae:	2120      	movs	r1, #32
 80043b0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2242      	movs	r2, #66	@ 0x42
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b002      	add	sp, #8
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	f0ffffff 	.word	0xf0ffffff
 80043d0:	ffff7fff 	.word	0xffff7fff
 80043d4:	fffff7ff 	.word	0xfffff7ff
 80043d8:	02008000 	.word	0x02008000

080043dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b089      	sub	sp, #36	@ 0x24
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	0008      	movs	r0, r1
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	0019      	movs	r1, r3
 80043ea:	230a      	movs	r3, #10
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	1c02      	adds	r2, r0, #0
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	2308      	movs	r3, #8
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	1c0a      	adds	r2, r1, #0
 80043f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2241      	movs	r2, #65	@ 0x41
 80043fe:	5c9b      	ldrb	r3, [r3, r2]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b20      	cmp	r3, #32
 8004404:	d000      	beq.n	8004408 <HAL_I2C_Master_Transmit+0x2c>
 8004406:	e10a      	b.n	800461e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2240      	movs	r2, #64	@ 0x40
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_I2C_Master_Transmit+0x3a>
 8004412:	2302      	movs	r3, #2
 8004414:	e104      	b.n	8004620 <HAL_I2C_Master_Transmit+0x244>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	2101      	movs	r1, #1
 800441c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800441e:	f7ff fcab 	bl	8003d78 <HAL_GetTick>
 8004422:	0003      	movs	r3, r0
 8004424:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004426:	2380      	movs	r3, #128	@ 0x80
 8004428:	0219      	lsls	r1, r3, #8
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2319      	movs	r3, #25
 8004432:	2201      	movs	r2, #1
 8004434:	f000 fa1a 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8004438:	1e03      	subs	r3, r0, #0
 800443a:	d001      	beq.n	8004440 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0ef      	b.n	8004620 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2241      	movs	r2, #65	@ 0x41
 8004444:	2121      	movs	r1, #33	@ 0x21
 8004446:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2242      	movs	r2, #66	@ 0x42
 800444c:	2110      	movs	r1, #16
 800444e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2208      	movs	r2, #8
 8004460:	18ba      	adds	r2, r7, r2
 8004462:	8812      	ldrh	r2, [r2, #0]
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2bff      	cmp	r3, #255	@ 0xff
 8004474:	d906      	bls.n	8004484 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	22ff      	movs	r2, #255	@ 0xff
 800447a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800447c:	2380      	movs	r3, #128	@ 0x80
 800447e:	045b      	lsls	r3, r3, #17
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e007      	b.n	8004494 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	049b      	lsls	r3, r3, #18
 8004492:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d027      	beq.n	80044ec <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	3301      	adds	r3, #1
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	697c      	ldr	r4, [r7, #20]
 80044d8:	230a      	movs	r3, #10
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	8819      	ldrh	r1, [r3, #0]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	4b51      	ldr	r3, [pc, #324]	@ (8004628 <HAL_I2C_Master_Transmit+0x24c>)
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	0023      	movs	r3, r4
 80044e6:	f000 fb9b 	bl	8004c20 <I2C_TransferConfig>
 80044ea:	e06f      	b.n	80045cc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	697c      	ldr	r4, [r7, #20]
 80044f4:	230a      	movs	r3, #10
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	8819      	ldrh	r1, [r3, #0]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004628 <HAL_I2C_Master_Transmit+0x24c>)
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	0023      	movs	r3, r4
 8004502:	f000 fb8d 	bl	8004c20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004506:	e061      	b.n	80045cc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 fa04 	bl	800491c <I2C_WaitOnTXISFlagUntilTimeout>
 8004514:	1e03      	subs	r3, r0, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e081      	b.n	8004620 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d03a      	beq.n	80045cc <HAL_I2C_Master_Transmit+0x1f0>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d136      	bne.n	80045cc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800455e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	0013      	movs	r3, r2
 8004568:	2200      	movs	r2, #0
 800456a:	2180      	movs	r1, #128	@ 0x80
 800456c:	f000 f97e 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e053      	b.n	8004620 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2bff      	cmp	r3, #255	@ 0xff
 8004580:	d911      	bls.n	80045a6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	22ff      	movs	r2, #255	@ 0xff
 8004586:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	b2da      	uxtb	r2, r3
 800458e:	2380      	movs	r3, #128	@ 0x80
 8004590:	045c      	lsls	r4, r3, #17
 8004592:	230a      	movs	r3, #10
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	8819      	ldrh	r1, [r3, #0]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	2300      	movs	r3, #0
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	0023      	movs	r3, r4
 80045a0:	f000 fb3e 	bl	8004c20 <I2C_TransferConfig>
 80045a4:	e012      	b.n	80045cc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	2380      	movs	r3, #128	@ 0x80
 80045b8:	049c      	lsls	r4, r3, #18
 80045ba:	230a      	movs	r3, #10
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	8819      	ldrh	r1, [r3, #0]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	2300      	movs	r3, #0
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	0023      	movs	r3, r4
 80045c8:	f000 fb2a 	bl	8004c20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d198      	bne.n	8004508 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	0018      	movs	r0, r3
 80045de:	f000 f9e3 	bl	80049a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045e2:	1e03      	subs	r3, r0, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e01a      	b.n	8004620 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2220      	movs	r2, #32
 80045f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	490b      	ldr	r1, [pc, #44]	@ (800462c <HAL_I2C_Master_Transmit+0x250>)
 80045fe:	400a      	ands	r2, r1
 8004600:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2241      	movs	r2, #65	@ 0x41
 8004606:	2120      	movs	r1, #32
 8004608:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2242      	movs	r2, #66	@ 0x42
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2240      	movs	r2, #64	@ 0x40
 8004616:	2100      	movs	r1, #0
 8004618:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b007      	add	sp, #28
 8004626:	bd90      	pop	{r4, r7, pc}
 8004628:	80002000 	.word	0x80002000
 800462c:	fe00e800 	.word	0xfe00e800

08004630 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	230a      	movs	r3, #10
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	1c0a      	adds	r2, r1, #0
 8004642:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2241      	movs	r2, #65	@ 0x41
 800464c:	5c9b      	ldrb	r3, [r3, r2]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b20      	cmp	r3, #32
 8004652:	d000      	beq.n	8004656 <HAL_I2C_IsDeviceReady+0x26>
 8004654:	e0df      	b.n	8004816 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	2380      	movs	r3, #128	@ 0x80
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	401a      	ands	r2, r3
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	429a      	cmp	r2, r3
 8004668:	d101      	bne.n	800466e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	e0d4      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2240      	movs	r2, #64	@ 0x40
 8004672:	5c9b      	ldrb	r3, [r3, r2]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_I2C_IsDeviceReady+0x4c>
 8004678:	2302      	movs	r3, #2
 800467a:	e0cd      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x1e8>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2240      	movs	r2, #64	@ 0x40
 8004680:	2101      	movs	r1, #1
 8004682:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2241      	movs	r2, #65	@ 0x41
 8004688:	2124      	movs	r1, #36	@ 0x24
 800468a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d107      	bne.n	80046aa <HAL_I2C_IsDeviceReady+0x7a>
 800469a:	230a      	movs	r3, #10
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	059b      	lsls	r3, r3, #22
 80046a2:	0d9b      	lsrs	r3, r3, #22
 80046a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004820 <HAL_I2C_IsDeviceReady+0x1f0>)
 80046a6:	431a      	orrs	r2, r3
 80046a8:	e006      	b.n	80046b8 <HAL_I2C_IsDeviceReady+0x88>
 80046aa:	230a      	movs	r3, #10
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	059b      	lsls	r3, r3, #22
 80046b2:	0d9b      	lsrs	r3, r3, #22
 80046b4:	4a5b      	ldr	r2, [pc, #364]	@ (8004824 <HAL_I2C_IsDeviceReady+0x1f4>)
 80046b6:	431a      	orrs	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80046be:	f7ff fb5b 	bl	8003d78 <HAL_GetTick>
 80046c2:	0003      	movs	r3, r0
 80046c4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2220      	movs	r2, #32
 80046ce:	4013      	ands	r3, r2
 80046d0:	3b20      	subs	r3, #32
 80046d2:	425a      	negs	r2, r3
 80046d4:	4153      	adcs	r3, r2
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	231f      	movs	r3, #31
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2210      	movs	r2, #16
 80046e6:	4013      	ands	r3, r2
 80046e8:	3b10      	subs	r3, #16
 80046ea:	425a      	negs	r2, r3
 80046ec:	4153      	adcs	r3, r2
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	231e      	movs	r3, #30
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80046f6:	e035      	b.n	8004764 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	d01a      	beq.n	8004734 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7ff fb3b 	bl	8003d78 <HAL_GetTick>
 8004702:	0002      	movs	r2, r0
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <HAL_I2C_IsDeviceReady+0xe4>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10f      	bne.n	8004734 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2241      	movs	r2, #65	@ 0x41
 8004718:	2120      	movs	r1, #32
 800471a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004720:	2220      	movs	r2, #32
 8004722:	431a      	orrs	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2240      	movs	r2, #64	@ 0x40
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e071      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2220      	movs	r2, #32
 800473c:	4013      	ands	r3, r2
 800473e:	3b20      	subs	r3, #32
 8004740:	425a      	negs	r2, r3
 8004742:	4153      	adcs	r3, r2
 8004744:	b2da      	uxtb	r2, r3
 8004746:	231f      	movs	r3, #31
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2210      	movs	r2, #16
 8004754:	4013      	ands	r3, r2
 8004756:	3b10      	subs	r3, #16
 8004758:	425a      	negs	r2, r3
 800475a:	4153      	adcs	r3, r2
 800475c:	b2da      	uxtb	r2, r3
 800475e:	231e      	movs	r3, #30
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004764:	231f      	movs	r3, #31
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_I2C_IsDeviceReady+0x148>
 800476e:	231e      	movs	r3, #30
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0bf      	beq.n	80046f8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	2210      	movs	r2, #16
 8004780:	4013      	ands	r3, r2
 8004782:	2b10      	cmp	r3, #16
 8004784:	d01a      	beq.n	80047bc <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	0013      	movs	r3, r2
 8004790:	2200      	movs	r2, #0
 8004792:	2120      	movs	r1, #32
 8004794:	f000 f86a 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e03b      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2220      	movs	r2, #32
 80047a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2241      	movs	r2, #65	@ 0x41
 80047ac:	2120      	movs	r1, #32
 80047ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2240      	movs	r2, #64	@ 0x40
 80047b4:	2100      	movs	r1, #0
 80047b6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e02d      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	0013      	movs	r3, r2
 80047c6:	2200      	movs	r2, #0
 80047c8:	2120      	movs	r1, #32
 80047ca:	f000 f84f 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 80047ce:	1e03      	subs	r3, r0, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e020      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2210      	movs	r2, #16
 80047dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2220      	movs	r2, #32
 80047e4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d900      	bls.n	80047f6 <HAL_I2C_IsDeviceReady+0x1c6>
 80047f4:	e74d      	b.n	8004692 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2241      	movs	r2, #65	@ 0x41
 80047fa:	2120      	movs	r1, #32
 80047fc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	2220      	movs	r2, #32
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2240      	movs	r2, #64	@ 0x40
 800480e:	2100      	movs	r1, #0
 8004810:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	b008      	add	sp, #32
 800481e:	bd80      	pop	{r7, pc}
 8004820:	02002000 	.word	0x02002000
 8004824:	02002800 	.word	0x02002800

08004828 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2202      	movs	r2, #2
 8004838:	4013      	ands	r3, r2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d103      	bne.n	8004846 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2201      	movs	r2, #1
 800484e:	4013      	ands	r3, r2
 8004850:	2b01      	cmp	r3, #1
 8004852:	d007      	beq.n	8004864 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2101      	movs	r1, #1
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]
  }
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	1dfb      	adds	r3, r7, #7
 800487a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487c:	e03a      	b.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	0018      	movs	r0, r3
 8004886:	f000 f8d3 	bl	8004a30 <I2C_IsErrorOccurred>
 800488a:	1e03      	subs	r3, r0, #0
 800488c:	d001      	beq.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e040      	b.n	8004914 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	d02d      	beq.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004898:	f7ff fa6e 	bl	8003d78 <HAL_GetTick>
 800489c:	0002      	movs	r2, r0
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d302      	bcc.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x42>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d122      	bne.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	425a      	negs	r2, r3
 80048be:	4153      	adcs	r3, r2
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	001a      	movs	r2, r3
 80048c4:	1dfb      	adds	r3, r7, #7
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d113      	bne.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	2220      	movs	r2, #32
 80048d2:	431a      	orrs	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2241      	movs	r2, #65	@ 0x41
 80048dc:	2120      	movs	r1, #32
 80048de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2242      	movs	r2, #66	@ 0x42
 80048e4:	2100      	movs	r1, #0
 80048e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2240      	movs	r2, #64	@ 0x40
 80048ec:	2100      	movs	r1, #0
 80048ee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e00f      	b.n	8004914 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	425a      	negs	r2, r3
 8004904:	4153      	adcs	r3, r2
 8004906:	b2db      	uxtb	r3, r3
 8004908:	001a      	movs	r2, r3
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d0b5      	beq.n	800487e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	b004      	add	sp, #16
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004928:	e032      	b.n	8004990 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f87d 	bl	8004a30 <I2C_IsErrorOccurred>
 8004936:	1e03      	subs	r3, r0, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e030      	b.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3301      	adds	r3, #1
 8004942:	d025      	beq.n	8004990 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7ff fa18 	bl	8003d78 <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11a      	bne.n	8004990 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2202      	movs	r2, #2
 8004962:	4013      	ands	r3, r2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d013      	beq.n	8004990 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496c:	2220      	movs	r2, #32
 800496e:	431a      	orrs	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2241      	movs	r2, #65	@ 0x41
 8004978:	2120      	movs	r1, #32
 800497a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2242      	movs	r2, #66	@ 0x42
 8004980:	2100      	movs	r1, #0
 8004982:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2240      	movs	r2, #64	@ 0x40
 8004988:	2100      	movs	r1, #0
 800498a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e007      	b.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d1c5      	bne.n	800492a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	0018      	movs	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b004      	add	sp, #16
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b4:	e02f      	b.n	8004a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 f837 	bl	8004a30 <I2C_IsErrorOccurred>
 80049c2:	1e03      	subs	r3, r0, #0
 80049c4:	d001      	beq.n	80049ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e02d      	b.n	8004a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7ff f9d5 	bl	8003d78 <HAL_GetTick>
 80049ce:	0002      	movs	r2, r0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11a      	bne.n	8004a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2220      	movs	r2, #32
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d013      	beq.n	8004a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	2220      	movs	r2, #32
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2241      	movs	r2, #65	@ 0x41
 80049fe:	2120      	movs	r1, #32
 8004a00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2242      	movs	r2, #66	@ 0x42
 8004a06:	2100      	movs	r1, #0
 8004a08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2240      	movs	r2, #64	@ 0x40
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e007      	b.n	8004a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d1c8      	bne.n	80049b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b004      	add	sp, #16
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2327      	movs	r3, #39	@ 0x27
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2210      	movs	r2, #16
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <I2C_IsErrorOccurred+0x2e>
 8004a5c:	e079      	b.n	8004b52 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2210      	movs	r2, #16
 8004a64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a66:	e057      	b.n	8004b18 <I2C_IsErrorOccurred+0xe8>
 8004a68:	2227      	movs	r2, #39	@ 0x27
 8004a6a:	18bb      	adds	r3, r7, r2
 8004a6c:	18ba      	adds	r2, r7, r2
 8004a6e:	7812      	ldrb	r2, [r2, #0]
 8004a70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	3301      	adds	r3, #1
 8004a76:	d04f      	beq.n	8004b18 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a78:	f7ff f97e 	bl	8003d78 <HAL_GetTick>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <I2C_IsErrorOccurred+0x5e>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d144      	bne.n	8004b18 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	4013      	ands	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a9c:	2013      	movs	r0, #19
 8004a9e:	183b      	adds	r3, r7, r0
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	2142      	movs	r1, #66	@ 0x42
 8004aa4:	5c52      	ldrb	r2, [r2, r1]
 8004aa6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d126      	bne.n	8004b0a <I2C_IsErrorOccurred+0xda>
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d021      	beq.n	8004b0a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004ac6:	183b      	adds	r3, r7, r0
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d01d      	beq.n	8004b0a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2180      	movs	r1, #128	@ 0x80
 8004ada:	01c9      	lsls	r1, r1, #7
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ae0:	f7ff f94a 	bl	8003d78 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ae8:	e00f      	b.n	8004b0a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004aea:	f7ff f945 	bl	8003d78 <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b19      	cmp	r3, #25
 8004af6:	d908      	bls.n	8004b0a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	2220      	movs	r2, #32
 8004afc:	4313      	orrs	r3, r2
 8004afe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b00:	2327      	movs	r3, #39	@ 0x27
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]

              break;
 8004b08:	e006      	b.n	8004b18 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2220      	movs	r2, #32
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d1e8      	bne.n	8004aea <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d004      	beq.n	8004b30 <I2C_IsErrorOccurred+0x100>
 8004b26:	2327      	movs	r3, #39	@ 0x27
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d09b      	beq.n	8004a68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b30:	2327      	movs	r3, #39	@ 0x27
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	2204      	movs	r2, #4
 8004b46:	4313      	orrs	r3, r2
 8004b48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b4a:	2327      	movs	r3, #39	@ 0x27
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4013      	ands	r3, r2
 8004b62:	d00c      	beq.n	8004b7e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2280      	movs	r2, #128	@ 0x80
 8004b72:	0052      	lsls	r2, r2, #1
 8004b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b76:	2327      	movs	r3, #39	@ 0x27
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4013      	ands	r3, r2
 8004b86:	d00c      	beq.n	8004ba2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2280      	movs	r2, #128	@ 0x80
 8004b96:	00d2      	lsls	r2, r2, #3
 8004b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b9a:	2327      	movs	r3, #39	@ 0x27
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d00c      	beq.n	8004bc6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2280      	movs	r2, #128	@ 0x80
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bbe:	2327      	movs	r3, #39	@ 0x27
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004bc6:	2327      	movs	r3, #39	@ 0x27
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01d      	beq.n	8004c0c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7ff fe28 	bl	8004828 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	490e      	ldr	r1, [pc, #56]	@ (8004c1c <I2C_IsErrorOccurred+0x1ec>)
 8004be4:	400a      	ands	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2241      	movs	r2, #65	@ 0x41
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2242      	movs	r2, #66	@ 0x42
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2240      	movs	r2, #64	@ 0x40
 8004c08:	2100      	movs	r1, #0
 8004c0a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004c0c:	2327      	movs	r3, #39	@ 0x27
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	781b      	ldrb	r3, [r3, #0]
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b00a      	add	sp, #40	@ 0x28
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	fe00e800 	.word	0xfe00e800

08004c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	0008      	movs	r0, r1
 8004c2a:	0011      	movs	r1, r2
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	240a      	movs	r4, #10
 8004c30:	193b      	adds	r3, r7, r4
 8004c32:	1c02      	adds	r2, r0, #0
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	2009      	movs	r0, #9
 8004c38:	183b      	adds	r3, r7, r0
 8004c3a:	1c0a      	adds	r2, r1, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c3e:	193b      	adds	r3, r7, r4
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	059b      	lsls	r3, r3, #22
 8004c44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c46:	183b      	adds	r3, r7, r0
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	0419      	lsls	r1, r3, #16
 8004c4c:	23ff      	movs	r3, #255	@ 0xff
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c6a:	0d51      	lsrs	r1, r2, #21
 8004c6c:	2280      	movs	r2, #128	@ 0x80
 8004c6e:	00d2      	lsls	r2, r2, #3
 8004c70:	400a      	ands	r2, r1
 8004c72:	4907      	ldr	r1, [pc, #28]	@ (8004c90 <I2C_TransferConfig+0x70>)
 8004c74:	430a      	orrs	r2, r1
 8004c76:	43d2      	mvns	r2, r2
 8004c78:	401a      	ands	r2, r3
 8004c7a:	0011      	movs	r1, r2
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b007      	add	sp, #28
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	03ff63ff 	.word	0x03ff63ff

08004c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2241      	movs	r2, #65	@ 0x41
 8004ca2:	5c9b      	ldrb	r3, [r3, r2]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d138      	bne.n	8004d1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2240      	movs	r2, #64	@ 0x40
 8004cae:	5c9b      	ldrb	r3, [r3, r2]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e032      	b.n	8004d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2240      	movs	r2, #64	@ 0x40
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2241      	movs	r2, #65	@ 0x41
 8004cc4:	2124      	movs	r1, #36	@ 0x24
 8004cc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	438a      	bics	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4911      	ldr	r1, [pc, #68]	@ (8004d28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2101      	movs	r1, #1
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2241      	movs	r2, #65	@ 0x41
 8004d0c:	2120      	movs	r1, #32
 8004d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2240      	movs	r2, #64	@ 0x40
 8004d14:	2100      	movs	r1, #0
 8004d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	0018      	movs	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b002      	add	sp, #8
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	ffffefff 	.word	0xffffefff

08004d2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2241      	movs	r2, #65	@ 0x41
 8004d3a:	5c9b      	ldrb	r3, [r3, r2]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d139      	bne.n	8004db6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2240      	movs	r2, #64	@ 0x40
 8004d46:	5c9b      	ldrb	r3, [r3, r2]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e033      	b.n	8004db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	2101      	movs	r1, #1
 8004d56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2241      	movs	r2, #65	@ 0x41
 8004d5c:	2124      	movs	r1, #36	@ 0x24
 8004d5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2241      	movs	r2, #65	@ 0x41
 8004da6:	2120      	movs	r1, #32
 8004da8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2240      	movs	r2, #64	@ 0x40
 8004dae:	2100      	movs	r1, #0
 8004db0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b004      	add	sp, #16
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	fffff0ff 	.word	0xfffff0ff

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e301      	b.n	80053da <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d100      	bne.n	8004de2 <HAL_RCC_OscConfig+0x1e>
 8004de0:	e08d      	b.n	8004efe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004de2:	4bc3      	ldr	r3, [pc, #780]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	220c      	movs	r2, #12
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d00e      	beq.n	8004e0c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dee:	4bc0      	ldr	r3, [pc, #768]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	220c      	movs	r2, #12
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d116      	bne.n	8004e28 <HAL_RCC_OscConfig+0x64>
 8004dfa:	4bbd      	ldr	r3, [pc, #756]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	2380      	movs	r3, #128	@ 0x80
 8004e00:	025b      	lsls	r3, r3, #9
 8004e02:	401a      	ands	r2, r3
 8004e04:	2380      	movs	r3, #128	@ 0x80
 8004e06:	025b      	lsls	r3, r3, #9
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d10d      	bne.n	8004e28 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	4bb8      	ldr	r3, [pc, #736]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	4013      	ands	r3, r2
 8004e16:	d100      	bne.n	8004e1a <HAL_RCC_OscConfig+0x56>
 8004e18:	e070      	b.n	8004efc <HAL_RCC_OscConfig+0x138>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d000      	beq.n	8004e24 <HAL_RCC_OscConfig+0x60>
 8004e22:	e06b      	b.n	8004efc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e2d8      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_OscConfig+0x7c>
 8004e30:	4baf      	ldr	r3, [pc, #700]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4bae      	ldr	r3, [pc, #696]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e36:	2180      	movs	r1, #128	@ 0x80
 8004e38:	0249      	lsls	r1, r1, #9
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e02f      	b.n	8004ea0 <HAL_RCC_OscConfig+0xdc>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x9e>
 8004e48:	4ba9      	ldr	r3, [pc, #676]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4ba8      	ldr	r3, [pc, #672]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e4e:	49a9      	ldr	r1, [pc, #676]	@ (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	4ba6      	ldr	r3, [pc, #664]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4ba5      	ldr	r3, [pc, #660]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e5a:	49a7      	ldr	r1, [pc, #668]	@ (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e01e      	b.n	8004ea0 <HAL_RCC_OscConfig+0xdc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d10e      	bne.n	8004e88 <HAL_RCC_OscConfig+0xc4>
 8004e6a:	4ba1      	ldr	r3, [pc, #644]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4ba0      	ldr	r3, [pc, #640]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e70:	2180      	movs	r1, #128	@ 0x80
 8004e72:	02c9      	lsls	r1, r1, #11
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	4b9d      	ldr	r3, [pc, #628]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e7e:	2180      	movs	r1, #128	@ 0x80
 8004e80:	0249      	lsls	r1, r1, #9
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e00b      	b.n	8004ea0 <HAL_RCC_OscConfig+0xdc>
 8004e88:	4b99      	ldr	r3, [pc, #612]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4b98      	ldr	r3, [pc, #608]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e8e:	4999      	ldr	r1, [pc, #612]	@ (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	4b96      	ldr	r3, [pc, #600]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b95      	ldr	r3, [pc, #596]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004e9a:	4997      	ldr	r1, [pc, #604]	@ (80050f8 <HAL_RCC_OscConfig+0x334>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d014      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fe ff66 	bl	8003d78 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb2:	f7fe ff61 	bl	8003d78 <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b64      	cmp	r3, #100	@ 0x64
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e28a      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	029b      	lsls	r3, r3, #10
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0xee>
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fe ff51 	bl	8003d78 <HAL_GetTick>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe ff4c 	bl	8003d78 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e275      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	4b80      	ldr	r3, [pc, #512]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x118>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d100      	bne.n	8004f0a <HAL_RCC_OscConfig+0x146>
 8004f08:	e069      	b.n	8004fde <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f0a:	4b79      	ldr	r3, [pc, #484]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	220c      	movs	r2, #12
 8004f10:	4013      	ands	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f14:	4b76      	ldr	r3, [pc, #472]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	220c      	movs	r2, #12
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d11c      	bne.n	8004f5a <HAL_RCC_OscConfig+0x196>
 8004f20:	4b73      	ldr	r3, [pc, #460]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	2380      	movs	r3, #128	@ 0x80
 8004f26:	025b      	lsls	r3, r3, #9
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d116      	bne.n	8004f5a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2c:	4b70      	ldr	r3, [pc, #448]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2202      	movs	r2, #2
 8004f32:	4013      	ands	r3, r2
 8004f34:	d005      	beq.n	8004f42 <HAL_RCC_OscConfig+0x17e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e24b      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b6b      	ldr	r3, [pc, #428]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	22f8      	movs	r2, #248	@ 0xf8
 8004f48:	4393      	bics	r3, r2
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	00da      	lsls	r2, r3, #3
 8004f52:	4b67      	ldr	r3, [pc, #412]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f58:	e041      	b.n	8004fde <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d024      	beq.n	8004fac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f62:	4b63      	ldr	r3, [pc, #396]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b62      	ldr	r3, [pc, #392]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f68:	2101      	movs	r1, #1
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7fe ff03 	bl	8003d78 <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f78:	f7fe fefe 	bl	8003d78 <HAL_GetTick>
 8004f7c:	0002      	movs	r2, r0
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e227      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8a:	4b59      	ldr	r3, [pc, #356]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	4013      	ands	r3, r2
 8004f92:	d0f1      	beq.n	8004f78 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f94:	4b56      	ldr	r3, [pc, #344]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	22f8      	movs	r2, #248	@ 0xf8
 8004f9a:	4393      	bics	r3, r2
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00da      	lsls	r2, r3, #3
 8004fa4:	4b52      	ldr	r3, [pc, #328]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e018      	b.n	8004fde <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fac:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fe fede 	bl	8003d78 <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc2:	f7fe fed9 	bl	8003d78 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e202      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd4:	4b46      	ldr	r3, [pc, #280]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d1f1      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d036      	beq.n	8005056 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d019      	beq.n	8005024 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffc:	f7fe febc 	bl	8003d78 <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005006:	f7fe feb7 	bl	8003d78 <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1e0      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005018:	4b35      	ldr	r3, [pc, #212]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	2202      	movs	r2, #2
 800501e:	4013      	ands	r3, r2
 8005020:	d0f1      	beq.n	8005006 <HAL_RCC_OscConfig+0x242>
 8005022:	e018      	b.n	8005056 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005024:	4b32      	ldr	r3, [pc, #200]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8005026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005028:	4b31      	ldr	r3, [pc, #196]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 800502a:	2101      	movs	r1, #1
 800502c:	438a      	bics	r2, r1
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005030:	f7fe fea2 	bl	8003d78 <HAL_GetTick>
 8005034:	0003      	movs	r3, r0
 8005036:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503a:	f7fe fe9d 	bl	8003d78 <HAL_GetTick>
 800503e:	0002      	movs	r2, r0
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e1c6      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	2202      	movs	r2, #2
 8005052:	4013      	ands	r3, r2
 8005054:	d1f1      	bne.n	800503a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2204      	movs	r2, #4
 800505c:	4013      	ands	r3, r2
 800505e:	d100      	bne.n	8005062 <HAL_RCC_OscConfig+0x29e>
 8005060:	e0b4      	b.n	80051cc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	201f      	movs	r0, #31
 8005064:	183b      	adds	r3, r7, r0
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	055b      	lsls	r3, r3, #21
 8005072:	4013      	ands	r3, r2
 8005074:	d110      	bne.n	8005098 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005076:	4b1e      	ldr	r3, [pc, #120]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 800507c:	2180      	movs	r1, #128	@ 0x80
 800507e:	0549      	lsls	r1, r1, #21
 8005080:	430a      	orrs	r2, r1
 8005082:	61da      	str	r2, [r3, #28]
 8005084:	4b1a      	ldr	r3, [pc, #104]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	055b      	lsls	r3, r3, #21
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005092:	183b      	adds	r3, r7, r0
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005098:	4b18      	ldr	r3, [pc, #96]	@ (80050fc <HAL_RCC_OscConfig+0x338>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	2380      	movs	r3, #128	@ 0x80
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4013      	ands	r3, r2
 80050a2:	d11a      	bne.n	80050da <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a4:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <HAL_RCC_OscConfig+0x338>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b14      	ldr	r3, [pc, #80]	@ (80050fc <HAL_RCC_OscConfig+0x338>)
 80050aa:	2180      	movs	r1, #128	@ 0x80
 80050ac:	0049      	lsls	r1, r1, #1
 80050ae:	430a      	orrs	r2, r1
 80050b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b2:	f7fe fe61 	bl	8003d78 <HAL_GetTick>
 80050b6:	0003      	movs	r3, r0
 80050b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050bc:	f7fe fe5c 	bl	8003d78 <HAL_GetTick>
 80050c0:	0002      	movs	r2, r0
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	@ 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e185      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <HAL_RCC_OscConfig+0x338>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	2380      	movs	r3, #128	@ 0x80
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4013      	ands	r3, r2
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10e      	bne.n	8005100 <HAL_RCC_OscConfig+0x33c>
 80050e2:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	4b02      	ldr	r3, [pc, #8]	@ (80050f0 <HAL_RCC_OscConfig+0x32c>)
 80050e8:	2101      	movs	r1, #1
 80050ea:	430a      	orrs	r2, r1
 80050ec:	621a      	str	r2, [r3, #32]
 80050ee:	e035      	b.n	800515c <HAL_RCC_OscConfig+0x398>
 80050f0:	40021000 	.word	0x40021000
 80050f4:	fffeffff 	.word	0xfffeffff
 80050f8:	fffbffff 	.word	0xfffbffff
 80050fc:	40007000 	.word	0x40007000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10c      	bne.n	8005122 <HAL_RCC_OscConfig+0x35e>
 8005108:	4bb6      	ldr	r3, [pc, #728]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	4bb5      	ldr	r3, [pc, #724]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800510e:	2101      	movs	r1, #1
 8005110:	438a      	bics	r2, r1
 8005112:	621a      	str	r2, [r3, #32]
 8005114:	4bb3      	ldr	r3, [pc, #716]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	4bb2      	ldr	r3, [pc, #712]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800511a:	2104      	movs	r1, #4
 800511c:	438a      	bics	r2, r1
 800511e:	621a      	str	r2, [r3, #32]
 8005120:	e01c      	b.n	800515c <HAL_RCC_OscConfig+0x398>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b05      	cmp	r3, #5
 8005128:	d10c      	bne.n	8005144 <HAL_RCC_OscConfig+0x380>
 800512a:	4bae      	ldr	r3, [pc, #696]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	4bad      	ldr	r3, [pc, #692]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005130:	2104      	movs	r1, #4
 8005132:	430a      	orrs	r2, r1
 8005134:	621a      	str	r2, [r3, #32]
 8005136:	4bab      	ldr	r3, [pc, #684]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	4baa      	ldr	r3, [pc, #680]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800513c:	2101      	movs	r1, #1
 800513e:	430a      	orrs	r2, r1
 8005140:	621a      	str	r2, [r3, #32]
 8005142:	e00b      	b.n	800515c <HAL_RCC_OscConfig+0x398>
 8005144:	4ba7      	ldr	r3, [pc, #668]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	4ba6      	ldr	r3, [pc, #664]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800514a:	2101      	movs	r1, #1
 800514c:	438a      	bics	r2, r1
 800514e:	621a      	str	r2, [r3, #32]
 8005150:	4ba4      	ldr	r3, [pc, #656]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	4ba3      	ldr	r3, [pc, #652]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005156:	2104      	movs	r1, #4
 8005158:	438a      	bics	r2, r1
 800515a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d014      	beq.n	800518e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005164:	f7fe fe08 	bl	8003d78 <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516c:	e009      	b.n	8005182 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fe fe03 	bl	8003d78 <HAL_GetTick>
 8005172:	0002      	movs	r2, r0
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	4a9b      	ldr	r2, [pc, #620]	@ (80053e8 <HAL_RCC_OscConfig+0x624>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e12b      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005182:	4b98      	ldr	r3, [pc, #608]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	2202      	movs	r2, #2
 8005188:	4013      	ands	r3, r2
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x3aa>
 800518c:	e013      	b.n	80051b6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7fe fdf3 	bl	8003d78 <HAL_GetTick>
 8005192:	0003      	movs	r3, r0
 8005194:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005196:	e009      	b.n	80051ac <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fe fdee 	bl	8003d78 <HAL_GetTick>
 800519c:	0002      	movs	r2, r0
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	4a91      	ldr	r2, [pc, #580]	@ (80053e8 <HAL_RCC_OscConfig+0x624>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e116      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ac:	4b8d      	ldr	r3, [pc, #564]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	2202      	movs	r2, #2
 80051b2:	4013      	ands	r3, r2
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051b6:	231f      	movs	r3, #31
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b88      	ldr	r3, [pc, #544]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	4b87      	ldr	r3, [pc, #540]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80051c6:	4989      	ldr	r1, [pc, #548]	@ (80053ec <HAL_RCC_OscConfig+0x628>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2210      	movs	r2, #16
 80051d2:	4013      	ands	r3, r2
 80051d4:	d063      	beq.n	800529e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d12a      	bne.n	8005234 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80051de:	4b81      	ldr	r3, [pc, #516]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80051e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e2:	4b80      	ldr	r3, [pc, #512]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80051e4:	2104      	movs	r1, #4
 80051e6:	430a      	orrs	r2, r1
 80051e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80051ea:	4b7e      	ldr	r3, [pc, #504]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80051ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ee:	4b7d      	ldr	r3, [pc, #500]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80051f0:	2101      	movs	r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f6:	f7fe fdbf 	bl	8003d78 <HAL_GetTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005200:	f7fe fdba 	bl	8003d78 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e0e3      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005212:	4b74      	ldr	r3, [pc, #464]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005216:	2202      	movs	r2, #2
 8005218:	4013      	ands	r3, r2
 800521a:	d0f1      	beq.n	8005200 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800521c:	4b71      	ldr	r3, [pc, #452]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800521e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005220:	22f8      	movs	r2, #248	@ 0xf8
 8005222:	4393      	bics	r3, r2
 8005224:	0019      	movs	r1, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	00da      	lsls	r2, r3, #3
 800522c:	4b6d      	ldr	r3, [pc, #436]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800522e:	430a      	orrs	r2, r1
 8005230:	635a      	str	r2, [r3, #52]	@ 0x34
 8005232:	e034      	b.n	800529e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	3305      	adds	r3, #5
 800523a:	d111      	bne.n	8005260 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800523c:	4b69      	ldr	r3, [pc, #420]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800523e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005240:	4b68      	ldr	r3, [pc, #416]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005242:	2104      	movs	r1, #4
 8005244:	438a      	bics	r2, r1
 8005246:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005248:	4b66      	ldr	r3, [pc, #408]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800524a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524c:	22f8      	movs	r2, #248	@ 0xf8
 800524e:	4393      	bics	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	4b62      	ldr	r3, [pc, #392]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800525a:	430a      	orrs	r2, r1
 800525c:	635a      	str	r2, [r3, #52]	@ 0x34
 800525e:	e01e      	b.n	800529e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005260:	4b60      	ldr	r3, [pc, #384]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005264:	4b5f      	ldr	r3, [pc, #380]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005266:	2104      	movs	r1, #4
 8005268:	430a      	orrs	r2, r1
 800526a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800526c:	4b5d      	ldr	r3, [pc, #372]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800526e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005270:	4b5c      	ldr	r3, [pc, #368]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005272:	2101      	movs	r1, #1
 8005274:	438a      	bics	r2, r1
 8005276:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005278:	f7fe fd7e 	bl	8003d78 <HAL_GetTick>
 800527c:	0003      	movs	r3, r0
 800527e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005282:	f7fe fd79 	bl	8003d78 <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0a2      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005294:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005298:	2202      	movs	r2, #2
 800529a:	4013      	ands	r3, r2
 800529c:	d1f1      	bne.n	8005282 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d100      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4e4>
 80052a6:	e097      	b.n	80053d8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052a8:	4b4e      	ldr	r3, [pc, #312]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	220c      	movs	r2, #12
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d100      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4f2>
 80052b4:	e06b      	b.n	800538e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d14c      	bne.n	8005358 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b49      	ldr	r3, [pc, #292]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b48      	ldr	r3, [pc, #288]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80052c4:	494a      	ldr	r1, [pc, #296]	@ (80053f0 <HAL_RCC_OscConfig+0x62c>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ca:	f7fe fd55 	bl	8003d78 <HAL_GetTick>
 80052ce:	0003      	movs	r3, r0
 80052d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fe fd50 	bl	8003d78 <HAL_GetTick>
 80052d8:	0002      	movs	r2, r0
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e079      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052e6:	4b3f      	ldr	r3, [pc, #252]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	2380      	movs	r3, #128	@ 0x80
 80052ec:	049b      	lsls	r3, r3, #18
 80052ee:	4013      	ands	r3, r2
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f2:	4b3c      	ldr	r3, [pc, #240]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f6:	220f      	movs	r2, #15
 80052f8:	4393      	bics	r3, r2
 80052fa:	0019      	movs	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005300:	4b38      	ldr	r3, [pc, #224]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005302:	430a      	orrs	r2, r1
 8005304:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005306:	4b37      	ldr	r3, [pc, #220]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4a3a      	ldr	r2, [pc, #232]	@ (80053f4 <HAL_RCC_OscConfig+0x630>)
 800530c:	4013      	ands	r3, r2
 800530e:	0019      	movs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	431a      	orrs	r2, r3
 800531a:	4b32      	ldr	r3, [pc, #200]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005320:	4b30      	ldr	r3, [pc, #192]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b2f      	ldr	r3, [pc, #188]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005326:	2180      	movs	r1, #128	@ 0x80
 8005328:	0449      	lsls	r1, r1, #17
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532e:	f7fe fd23 	bl	8003d78 <HAL_GetTick>
 8005332:	0003      	movs	r3, r0
 8005334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005338:	f7fe fd1e 	bl	8003d78 <HAL_GetTick>
 800533c:	0002      	movs	r2, r0
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e047      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800534a:	4b26      	ldr	r3, [pc, #152]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	2380      	movs	r3, #128	@ 0x80
 8005350:	049b      	lsls	r3, r3, #18
 8005352:	4013      	ands	r3, r2
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0x574>
 8005356:	e03f      	b.n	80053d8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005358:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b21      	ldr	r3, [pc, #132]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800535e:	4924      	ldr	r1, [pc, #144]	@ (80053f0 <HAL_RCC_OscConfig+0x62c>)
 8005360:	400a      	ands	r2, r1
 8005362:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fe fd08 	bl	8003d78 <HAL_GetTick>
 8005368:	0003      	movs	r3, r0
 800536a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536e:	f7fe fd03 	bl	8003d78 <HAL_GetTick>
 8005372:	0002      	movs	r2, r0
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e02c      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005380:	4b18      	ldr	r3, [pc, #96]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	2380      	movs	r3, #128	@ 0x80
 8005386:	049b      	lsls	r3, r3, #18
 8005388:	4013      	ands	r3, r2
 800538a:	d1f0      	bne.n	800536e <HAL_RCC_OscConfig+0x5aa>
 800538c:	e024      	b.n	80053d8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e01f      	b.n	80053da <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800539a:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80053a0:	4b10      	ldr	r3, [pc, #64]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	025b      	lsls	r3, r3, #9
 80053ac:	401a      	ands	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d10e      	bne.n	80053d4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	220f      	movs	r2, #15
 80053ba:	401a      	ands	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	23f0      	movs	r3, #240	@ 0xf0
 80053c8:	039b      	lsls	r3, r3, #14
 80053ca:	401a      	ands	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b008      	add	sp, #32
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	40021000 	.word	0x40021000
 80053e8:	00001388 	.word	0x00001388
 80053ec:	efffffff 	.word	0xefffffff
 80053f0:	feffffff 	.word	0xfeffffff
 80053f4:	ffc2ffff 	.word	0xffc2ffff

080053f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0b3      	b.n	8005574 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800540c:	4b5b      	ldr	r3, [pc, #364]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2201      	movs	r2, #1
 8005412:	4013      	ands	r3, r2
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d911      	bls.n	800543e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541a:	4b58      	ldr	r3, [pc, #352]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	4393      	bics	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	4b55      	ldr	r3, [pc, #340]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542c:	4b53      	ldr	r3, [pc, #332]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2201      	movs	r2, #1
 8005432:	4013      	ands	r3, r2
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d001      	beq.n	800543e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e09a      	b.n	8005574 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2202      	movs	r2, #2
 8005444:	4013      	ands	r3, r2
 8005446:	d015      	beq.n	8005474 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2204      	movs	r2, #4
 800544e:	4013      	ands	r3, r2
 8005450:	d006      	beq.n	8005460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005452:	4b4b      	ldr	r3, [pc, #300]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	4b4a      	ldr	r3, [pc, #296]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 8005458:	21e0      	movs	r1, #224	@ 0xe0
 800545a:	00c9      	lsls	r1, r1, #3
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005460:	4b47      	ldr	r3, [pc, #284]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	22f0      	movs	r2, #240	@ 0xf0
 8005466:	4393      	bics	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	4b44      	ldr	r3, [pc, #272]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2201      	movs	r2, #1
 800547a:	4013      	ands	r3, r2
 800547c:	d040      	beq.n	8005500 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	029b      	lsls	r3, r3, #10
 800548e:	4013      	ands	r3, r2
 8005490:	d114      	bne.n	80054bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e06e      	b.n	8005574 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d107      	bne.n	80054ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800549e:	4b38      	ldr	r3, [pc, #224]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	2380      	movs	r3, #128	@ 0x80
 80054a4:	049b      	lsls	r3, r3, #18
 80054a6:	4013      	ands	r3, r2
 80054a8:	d108      	bne.n	80054bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e062      	b.n	8005574 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ae:	4b34      	ldr	r3, [pc, #208]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e05b      	b.n	8005574 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054bc:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2203      	movs	r2, #3
 80054c2:	4393      	bics	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054d0:	f7fe fc52 	bl	8003d78 <HAL_GetTick>
 80054d4:	0003      	movs	r3, r0
 80054d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d8:	e009      	b.n	80054ee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054da:	f7fe fc4d 	bl	8003d78 <HAL_GetTick>
 80054de:	0002      	movs	r2, r0
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	4a27      	ldr	r2, [pc, #156]	@ (8005584 <HAL_RCC_ClockConfig+0x18c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e042      	b.n	8005574 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ee:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	220c      	movs	r2, #12
 80054f4:	401a      	ands	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d1ec      	bne.n	80054da <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005500:	4b1e      	ldr	r3, [pc, #120]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2201      	movs	r2, #1
 8005506:	4013      	ands	r3, r2
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d211      	bcs.n	8005532 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550e:	4b1b      	ldr	r3, [pc, #108]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2201      	movs	r2, #1
 8005514:	4393      	bics	r3, r2
 8005516:	0019      	movs	r1, r3
 8005518:	4b18      	ldr	r3, [pc, #96]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005520:	4b16      	ldr	r3, [pc, #88]	@ (800557c <HAL_RCC_ClockConfig+0x184>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	4013      	ands	r3, r2
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d001      	beq.n	8005532 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e020      	b.n	8005574 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2204      	movs	r2, #4
 8005538:	4013      	ands	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800553c:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <HAL_RCC_ClockConfig+0x190>)
 8005542:	4013      	ands	r3, r2
 8005544:	0019      	movs	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005550:	f000 f820 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005554:	0001      	movs	r1, r0
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <HAL_RCC_ClockConfig+0x188>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	220f      	movs	r2, #15
 800555e:	4013      	ands	r3, r2
 8005560:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <HAL_RCC_ClockConfig+0x194>)
 8005562:	5cd3      	ldrb	r3, [r2, r3]
 8005564:	000a      	movs	r2, r1
 8005566:	40da      	lsrs	r2, r3
 8005568:	4b09      	ldr	r3, [pc, #36]	@ (8005590 <HAL_RCC_ClockConfig+0x198>)
 800556a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800556c:	2003      	movs	r0, #3
 800556e:	f7fe fbbd 	bl	8003cec <HAL_InitTick>
  
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	b004      	add	sp, #16
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40022000 	.word	0x40022000
 8005580:	40021000 	.word	0x40021000
 8005584:	00001388 	.word	0x00001388
 8005588:	fffff8ff 	.word	0xfffff8ff
 800558c:	08009980 	.word	0x08009980
 8005590:	20000024 	.word	0x20000024

08005594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80055ae:	4b20      	ldr	r3, [pc, #128]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x9c>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	220c      	movs	r2, #12
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d002      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0x30>
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_GetSysClockFreq+0x36>
 80055c2:	e02c      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005634 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055c6:	613b      	str	r3, [r7, #16]
      break;
 80055c8:	e02c      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	0c9b      	lsrs	r3, r3, #18
 80055ce:	220f      	movs	r2, #15
 80055d0:	4013      	ands	r3, r2
 80055d2:	4a19      	ldr	r2, [pc, #100]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055d4:	5cd3      	ldrb	r3, [r2, r3]
 80055d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80055d8:	4b15      	ldr	r3, [pc, #84]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x9c>)
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	220f      	movs	r2, #15
 80055de:	4013      	ands	r3, r2
 80055e0:	4a16      	ldr	r2, [pc, #88]	@ (800563c <HAL_RCC_GetSysClockFreq+0xa8>)
 80055e2:	5cd3      	ldrb	r3, [r2, r3]
 80055e4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	2380      	movs	r3, #128	@ 0x80
 80055ea:	025b      	lsls	r3, r3, #9
 80055ec:	4013      	ands	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	4810      	ldr	r0, [pc, #64]	@ (8005634 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055f4:	f7fa fd92 	bl	800011c <__udivsi3>
 80055f8:	0003      	movs	r3, r0
 80055fa:	001a      	movs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4353      	muls	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e009      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	000a      	movs	r2, r1
 8005608:	0152      	lsls	r2, r2, #5
 800560a:	1a52      	subs	r2, r2, r1
 800560c:	0193      	lsls	r3, r2, #6
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	185b      	adds	r3, r3, r1
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	613b      	str	r3, [r7, #16]
      break;
 800561c:	e002      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800561e:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005620:	613b      	str	r3, [r7, #16]
      break;
 8005622:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005624:	693b      	ldr	r3, [r7, #16]
}
 8005626:	0018      	movs	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	b006      	add	sp, #24
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	40021000 	.word	0x40021000
 8005634:	007a1200 	.word	0x007a1200
 8005638:	08009998 	.word	0x08009998
 800563c:	080099a8 	.word	0x080099a8

08005640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005644:	4b02      	ldr	r3, [pc, #8]	@ (8005650 <HAL_RCC_GetHCLKFreq+0x10>)
 8005646:	681b      	ldr	r3, [r3, #0]
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	20000024 	.word	0x20000024

08005654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005658:	f7ff fff2 	bl	8005640 <HAL_RCC_GetHCLKFreq>
 800565c:	0001      	movs	r1, r0
 800565e:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	2207      	movs	r2, #7
 8005666:	4013      	ands	r3, r2
 8005668:	4a04      	ldr	r2, [pc, #16]	@ (800567c <HAL_RCC_GetPCLK1Freq+0x28>)
 800566a:	5cd3      	ldrb	r3, [r2, r3]
 800566c:	40d9      	lsrs	r1, r3
 800566e:	000b      	movs	r3, r1
}    
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	40021000 	.word	0x40021000
 800567c:	08009990 	.word	0x08009990

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	025b      	lsls	r3, r3, #9
 8005698:	4013      	ands	r3, r2
 800569a:	d100      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800569c:	e08e      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800569e:	2017      	movs	r0, #23
 80056a0:	183b      	adds	r3, r7, r0
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b57      	ldr	r3, [pc, #348]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	2380      	movs	r3, #128	@ 0x80
 80056ac:	055b      	lsls	r3, r3, #21
 80056ae:	4013      	ands	r3, r2
 80056b0:	d110      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	4b54      	ldr	r3, [pc, #336]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	4b53      	ldr	r3, [pc, #332]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056b8:	2180      	movs	r1, #128	@ 0x80
 80056ba:	0549      	lsls	r1, r1, #21
 80056bc:	430a      	orrs	r2, r1
 80056be:	61da      	str	r2, [r3, #28]
 80056c0:	4b50      	ldr	r3, [pc, #320]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	2380      	movs	r3, #128	@ 0x80
 80056c6:	055b      	lsls	r3, r3, #21
 80056c8:	4013      	ands	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ce:	183b      	adds	r3, r7, r0
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	2380      	movs	r3, #128	@ 0x80
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4013      	ands	r3, r2
 80056de:	d11a      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056e0:	4b49      	ldr	r3, [pc, #292]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b48      	ldr	r3, [pc, #288]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056e6:	2180      	movs	r1, #128	@ 0x80
 80056e8:	0049      	lsls	r1, r1, #1
 80056ea:	430a      	orrs	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ee:	f7fe fb43 	bl	8003d78 <HAL_GetTick>
 80056f2:	0003      	movs	r3, r0
 80056f4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f6:	e008      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f8:	f7fe fb3e 	bl	8003d78 <HAL_GetTick>
 80056fc:	0002      	movs	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	@ 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e077      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570a:	4b3f      	ldr	r3, [pc, #252]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4013      	ands	r3, r2
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005716:	4b3b      	ldr	r3, [pc, #236]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	23c0      	movs	r3, #192	@ 0xc0
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4013      	ands	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d034      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	23c0      	movs	r3, #192	@ 0xc0
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4013      	ands	r3, r2
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	429a      	cmp	r2, r3
 8005736:	d02c      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005738:	4b32      	ldr	r3, [pc, #200]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	4a33      	ldr	r2, [pc, #204]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800573e:	4013      	ands	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005742:	4b30      	ldr	r3, [pc, #192]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	4b2f      	ldr	r3, [pc, #188]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005748:	2180      	movs	r1, #128	@ 0x80
 800574a:	0249      	lsls	r1, r1, #9
 800574c:	430a      	orrs	r2, r1
 800574e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005750:	4b2c      	ldr	r3, [pc, #176]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005752:	6a1a      	ldr	r2, [r3, #32]
 8005754:	4b2b      	ldr	r3, [pc, #172]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005756:	492e      	ldr	r1, [pc, #184]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005758:	400a      	ands	r2, r1
 800575a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800575c:	4b29      	ldr	r3, [pc, #164]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	4013      	ands	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576a:	f7fe fb05 	bl	8003d78 <HAL_GetTick>
 800576e:	0003      	movs	r3, r0
 8005770:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005772:	e009      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005774:	f7fe fb00 	bl	8003d78 <HAL_GetTick>
 8005778:	0002      	movs	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	4a25      	ldr	r2, [pc, #148]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d901      	bls.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e038      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005788:	4b1e      	ldr	r3, [pc, #120]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	2202      	movs	r2, #2
 800578e:	4013      	ands	r3, r2
 8005790:	d0f0      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005792:	4b1c      	ldr	r3, [pc, #112]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	4a1d      	ldr	r2, [pc, #116]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005798:	4013      	ands	r3, r2
 800579a:	0019      	movs	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b18      	ldr	r3, [pc, #96]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057a2:	430a      	orrs	r2, r1
 80057a4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057a6:	2317      	movs	r3, #23
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d105      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b0:	4b14      	ldr	r3, [pc, #80]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	4b13      	ldr	r3, [pc, #76]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057b6:	4918      	ldr	r1, [pc, #96]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80057b8:	400a      	ands	r2, r1
 80057ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	2203      	movs	r2, #3
 80057cc:	4393      	bics	r3, r2
 80057ce:	0019      	movs	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057d6:	430a      	orrs	r2, r1
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2220      	movs	r2, #32
 80057e0:	4013      	ands	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057e4:	4b07      	ldr	r3, [pc, #28]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e8:	2210      	movs	r2, #16
 80057ea:	4393      	bics	r3, r2
 80057ec:	0019      	movs	r1, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b006      	add	sp, #24
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	40021000 	.word	0x40021000
 8005808:	40007000 	.word	0x40007000
 800580c:	fffffcff 	.word	0xfffffcff
 8005810:	fffeffff 	.word	0xfffeffff
 8005814:	00001388 	.word	0x00001388
 8005818:	efffffff 	.word	0xefffffff

0800581c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e044      	b.n	80058b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2278      	movs	r2, #120	@ 0x78
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0018      	movs	r0, r3
 8005842:	f7fe f973 	bl	8003b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2224      	movs	r2, #36	@ 0x24
 800584a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2101      	movs	r1, #1
 8005858:	438a      	bics	r2, r1
 800585a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f000 fae0 	bl	8005e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 f99c 	bl	8005bac <UART_SetConfig>
 8005874:	0003      	movs	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e01c      	b.n	80058b8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	490d      	ldr	r1, [pc, #52]	@ (80058c0 <HAL_UART_Init+0xa4>)
 800588a:	400a      	ands	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2108      	movs	r1, #8
 800589a:	438a      	bics	r2, r1
 800589c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2101      	movs	r1, #1
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	0018      	movs	r0, r3
 80058b2:	f000 fb6f 	bl	8005f94 <UART_CheckIdleState>
 80058b6:	0003      	movs	r3, r0
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b002      	add	sp, #8
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	fffff7ff 	.word	0xfffff7ff

080058c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	1dbb      	adds	r3, r7, #6
 80058d2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d000      	beq.n	80058de <HAL_UART_Transmit+0x1a>
 80058dc:	e08c      	b.n	80059f8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_UART_Transmit+0x28>
 80058e4:	1dbb      	adds	r3, r7, #6
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e084      	b.n	80059fa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	2380      	movs	r3, #128	@ 0x80
 80058f6:	015b      	lsls	r3, r3, #5
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d109      	bne.n	8005910 <HAL_UART_Transmit+0x4c>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2201      	movs	r2, #1
 8005908:	4013      	ands	r3, r2
 800590a:	d001      	beq.n	8005910 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e074      	b.n	80059fa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2284      	movs	r2, #132	@ 0x84
 8005914:	2100      	movs	r1, #0
 8005916:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2221      	movs	r2, #33	@ 0x21
 800591c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800591e:	f7fe fa2b 	bl	8003d78 <HAL_GetTick>
 8005922:	0003      	movs	r3, r0
 8005924:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1dba      	adds	r2, r7, #6
 800592a:	2150      	movs	r1, #80	@ 0x50
 800592c:	8812      	ldrh	r2, [r2, #0]
 800592e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1dba      	adds	r2, r7, #6
 8005934:	2152      	movs	r1, #82	@ 0x52
 8005936:	8812      	ldrh	r2, [r2, #0]
 8005938:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	2380      	movs	r3, #128	@ 0x80
 8005940:	015b      	lsls	r3, r3, #5
 8005942:	429a      	cmp	r2, r3
 8005944:	d108      	bne.n	8005958 <HAL_UART_Transmit+0x94>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e003      	b.n	8005960 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005960:	e02f      	b.n	80059c2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	0013      	movs	r3, r2
 800596c:	2200      	movs	r2, #0
 800596e:	2180      	movs	r1, #128	@ 0x80
 8005970:	f000 fbb8 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 8005974:	1e03      	subs	r3, r0, #0
 8005976:	d004      	beq.n	8005982 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e03b      	b.n	80059fa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	05d2      	lsls	r2, r2, #23
 8005992:	0dd2      	lsrs	r2, r2, #23
 8005994:	b292      	uxth	r2, r2
 8005996:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	3302      	adds	r3, #2
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e007      	b.n	80059b0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3301      	adds	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2252      	movs	r2, #82	@ 0x52
 80059b4:	5a9b      	ldrh	r3, [r3, r2]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b299      	uxth	r1, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2252      	movs	r2, #82	@ 0x52
 80059c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2252      	movs	r2, #82	@ 0x52
 80059c6:	5a9b      	ldrh	r3, [r3, r2]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1c9      	bne.n	8005962 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	0013      	movs	r3, r2
 80059d8:	2200      	movs	r2, #0
 80059da:	2140      	movs	r1, #64	@ 0x40
 80059dc:	f000 fb82 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d004      	beq.n	80059ee <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e005      	b.n	80059fa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b008      	add	sp, #32
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	@ 0x28
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	1dbb      	adds	r3, r7, #6
 8005a12:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2280      	movs	r2, #128	@ 0x80
 8005a18:	589b      	ldr	r3, [r3, r2]
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d000      	beq.n	8005a20 <HAL_UART_Receive+0x1c>
 8005a1e:	e0bd      	b.n	8005b9c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_Receive+0x2a>
 8005a26:	1dbb      	adds	r3, r7, #6
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e0b5      	b.n	8005b9e <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	015b      	lsls	r3, r3, #5
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d109      	bne.n	8005a52 <HAL_UART_Receive+0x4e>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d001      	beq.n	8005a52 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0a5      	b.n	8005b9e <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2284      	movs	r2, #132	@ 0x84
 8005a56:	2100      	movs	r1, #0
 8005a58:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2280      	movs	r2, #128	@ 0x80
 8005a5e:	2122      	movs	r1, #34	@ 0x22
 8005a60:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a68:	f7fe f986 	bl	8003d78 <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1dba      	adds	r2, r7, #6
 8005a74:	2158      	movs	r1, #88	@ 0x58
 8005a76:	8812      	ldrh	r2, [r2, #0]
 8005a78:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1dba      	adds	r2, r7, #6
 8005a7e:	215a      	movs	r1, #90	@ 0x5a
 8005a80:	8812      	ldrh	r2, [r2, #0]
 8005a82:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	015b      	lsls	r3, r3, #5
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d10d      	bne.n	8005aac <HAL_UART_Receive+0xa8>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <HAL_UART_Receive+0x9e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	225c      	movs	r2, #92	@ 0x5c
 8005a9c:	4942      	ldr	r1, [pc, #264]	@ (8005ba8 <HAL_UART_Receive+0x1a4>)
 8005a9e:	5299      	strh	r1, [r3, r2]
 8005aa0:	e01a      	b.n	8005ad8 <HAL_UART_Receive+0xd4>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	225c      	movs	r2, #92	@ 0x5c
 8005aa6:	21ff      	movs	r1, #255	@ 0xff
 8005aa8:	5299      	strh	r1, [r3, r2]
 8005aaa:	e015      	b.n	8005ad8 <HAL_UART_Receive+0xd4>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10d      	bne.n	8005ad0 <HAL_UART_Receive+0xcc>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <HAL_UART_Receive+0xc2>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	225c      	movs	r2, #92	@ 0x5c
 8005ac0:	21ff      	movs	r1, #255	@ 0xff
 8005ac2:	5299      	strh	r1, [r3, r2]
 8005ac4:	e008      	b.n	8005ad8 <HAL_UART_Receive+0xd4>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	225c      	movs	r2, #92	@ 0x5c
 8005aca:	217f      	movs	r1, #127	@ 0x7f
 8005acc:	5299      	strh	r1, [r3, r2]
 8005ace:	e003      	b.n	8005ad8 <HAL_UART_Receive+0xd4>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	225c      	movs	r2, #92	@ 0x5c
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005ad8:	2312      	movs	r3, #18
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	215c      	movs	r1, #92	@ 0x5c
 8005ae0:	5a52      	ldrh	r2, [r2, r1]
 8005ae2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	2380      	movs	r3, #128	@ 0x80
 8005aea:	015b      	lsls	r3, r3, #5
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d108      	bne.n	8005b02 <HAL_UART_Receive+0xfe>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e003      	b.n	8005b0a <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b0a:	e03b      	b.n	8005b84 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	0013      	movs	r3, r2
 8005b16:	2200      	movs	r2, #0
 8005b18:	2120      	movs	r1, #32
 8005b1a:	f000 fae3 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 8005b1e:	1e03      	subs	r3, r0, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2280      	movs	r2, #128	@ 0x80
 8005b26:	2120      	movs	r1, #32
 8005b28:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e037      	b.n	8005b9e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2212      	movs	r2, #18
 8005b3e:	18ba      	adds	r2, r7, r2
 8005b40:	8812      	ldrh	r2, [r2, #0]
 8005b42:	4013      	ands	r3, r2
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e00f      	b.n	8005b72 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2212      	movs	r2, #18
 8005b5e:	18ba      	adds	r2, r7, r2
 8005b60:	8812      	ldrh	r2, [r2, #0]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	4013      	ands	r3, r2
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	225a      	movs	r2, #90	@ 0x5a
 8005b76:	5a9b      	ldrh	r3, [r3, r2]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b299      	uxth	r1, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	225a      	movs	r2, #90	@ 0x5a
 8005b82:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	225a      	movs	r2, #90	@ 0x5a
 8005b88:	5a9b      	ldrh	r3, [r3, r2]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1bd      	bne.n	8005b0c <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2280      	movs	r2, #128	@ 0x80
 8005b94:	2120      	movs	r1, #32
 8005b96:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b008      	add	sp, #32
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	000001ff 	.word	0x000001ff

08005bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb4:	231e      	movs	r3, #30
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a8d      	ldr	r2, [pc, #564]	@ (8005e10 <UART_SetConfig+0x264>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	0019      	movs	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a88      	ldr	r2, [pc, #544]	@ (8005e14 <UART_SetConfig+0x268>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a7f      	ldr	r2, [pc, #508]	@ (8005e18 <UART_SetConfig+0x26c>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a7b      	ldr	r2, [pc, #492]	@ (8005e1c <UART_SetConfig+0x270>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d127      	bne.n	8005c82 <UART_SetConfig+0xd6>
 8005c32:	4b7b      	ldr	r3, [pc, #492]	@ (8005e20 <UART_SetConfig+0x274>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c36:	2203      	movs	r2, #3
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d00d      	beq.n	8005c5a <UART_SetConfig+0xae>
 8005c3e:	d81b      	bhi.n	8005c78 <UART_SetConfig+0xcc>
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d014      	beq.n	8005c6e <UART_SetConfig+0xc2>
 8005c44:	d818      	bhi.n	8005c78 <UART_SetConfig+0xcc>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <UART_SetConfig+0xa4>
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d00a      	beq.n	8005c64 <UART_SetConfig+0xb8>
 8005c4e:	e013      	b.n	8005c78 <UART_SetConfig+0xcc>
 8005c50:	231f      	movs	r3, #31
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e021      	b.n	8005c9e <UART_SetConfig+0xf2>
 8005c5a:	231f      	movs	r3, #31
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	2202      	movs	r2, #2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e01c      	b.n	8005c9e <UART_SetConfig+0xf2>
 8005c64:	231f      	movs	r3, #31
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2204      	movs	r2, #4
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e017      	b.n	8005c9e <UART_SetConfig+0xf2>
 8005c6e:	231f      	movs	r3, #31
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2208      	movs	r2, #8
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	e012      	b.n	8005c9e <UART_SetConfig+0xf2>
 8005c78:	231f      	movs	r3, #31
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	e00d      	b.n	8005c9e <UART_SetConfig+0xf2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a67      	ldr	r2, [pc, #412]	@ (8005e24 <UART_SetConfig+0x278>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d104      	bne.n	8005c96 <UART_SetConfig+0xea>
 8005c8c:	231f      	movs	r3, #31
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e003      	b.n	8005c9e <UART_SetConfig+0xf2>
 8005c96:	231f      	movs	r3, #31
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d15c      	bne.n	8005d64 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005caa:	231f      	movs	r3, #31
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d015      	beq.n	8005ce0 <UART_SetConfig+0x134>
 8005cb4:	dc18      	bgt.n	8005ce8 <UART_SetConfig+0x13c>
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d00d      	beq.n	8005cd6 <UART_SetConfig+0x12a>
 8005cba:	dc15      	bgt.n	8005ce8 <UART_SetConfig+0x13c>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <UART_SetConfig+0x11a>
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d005      	beq.n	8005cd0 <UART_SetConfig+0x124>
 8005cc4:	e010      	b.n	8005ce8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc6:	f7ff fcc5 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8005cca:	0003      	movs	r3, r0
 8005ccc:	61bb      	str	r3, [r7, #24]
        break;
 8005cce:	e012      	b.n	8005cf6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b55      	ldr	r3, [pc, #340]	@ (8005e28 <UART_SetConfig+0x27c>)
 8005cd2:	61bb      	str	r3, [r7, #24]
        break;
 8005cd4:	e00f      	b.n	8005cf6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7ff fc5d 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	61bb      	str	r3, [r7, #24]
        break;
 8005cde:	e00a      	b.n	8005cf6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	61bb      	str	r3, [r7, #24]
        break;
 8005ce6:	e006      	b.n	8005cf6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cec:	231e      	movs	r3, #30
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	701a      	strb	r2, [r3, #0]
        break;
 8005cf4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d100      	bne.n	8005cfe <UART_SetConfig+0x152>
 8005cfc:	e07a      	b.n	8005df4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	005a      	lsls	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	18d2      	adds	r2, r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	0019      	movs	r1, r3
 8005d10:	0010      	movs	r0, r2
 8005d12:	f7fa fa03 	bl	800011c <__udivsi3>
 8005d16:	0003      	movs	r3, r0
 8005d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d91c      	bls.n	8005d5a <UART_SetConfig+0x1ae>
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	025b      	lsls	r3, r3, #9
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d217      	bcs.n	8005d5a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	200e      	movs	r0, #14
 8005d30:	183b      	adds	r3, r7, r0
 8005d32:	210f      	movs	r1, #15
 8005d34:	438a      	bics	r2, r1
 8005d36:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2207      	movs	r2, #7
 8005d40:	4013      	ands	r3, r2
 8005d42:	b299      	uxth	r1, r3
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	183a      	adds	r2, r7, r0
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	183a      	adds	r2, r7, r0
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	60da      	str	r2, [r3, #12]
 8005d58:	e04c      	b.n	8005df4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005d5a:	231e      	movs	r3, #30
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e047      	b.n	8005df4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d64:	231f      	movs	r3, #31
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d015      	beq.n	8005d9a <UART_SetConfig+0x1ee>
 8005d6e:	dc18      	bgt.n	8005da2 <UART_SetConfig+0x1f6>
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d00d      	beq.n	8005d90 <UART_SetConfig+0x1e4>
 8005d74:	dc15      	bgt.n	8005da2 <UART_SetConfig+0x1f6>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <UART_SetConfig+0x1d4>
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d005      	beq.n	8005d8a <UART_SetConfig+0x1de>
 8005d7e:	e010      	b.n	8005da2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d80:	f7ff fc68 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8005d84:	0003      	movs	r3, r0
 8005d86:	61bb      	str	r3, [r7, #24]
        break;
 8005d88:	e012      	b.n	8005db0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d8a:	4b27      	ldr	r3, [pc, #156]	@ (8005e28 <UART_SetConfig+0x27c>)
 8005d8c:	61bb      	str	r3, [r7, #24]
        break;
 8005d8e:	e00f      	b.n	8005db0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d90:	f7ff fc00 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005d94:	0003      	movs	r3, r0
 8005d96:	61bb      	str	r3, [r7, #24]
        break;
 8005d98:	e00a      	b.n	8005db0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	2380      	movs	r3, #128	@ 0x80
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	61bb      	str	r3, [r7, #24]
        break;
 8005da0:	e006      	b.n	8005db0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005da6:	231e      	movs	r3, #30
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
        break;
 8005dae:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01e      	beq.n	8005df4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	085a      	lsrs	r2, r3, #1
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	18d2      	adds	r2, r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	0010      	movs	r0, r2
 8005dc8:	f7fa f9a8 	bl	800011c <__udivsi3>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b0f      	cmp	r3, #15
 8005dd4:	d90a      	bls.n	8005dec <UART_SetConfig+0x240>
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	2380      	movs	r3, #128	@ 0x80
 8005dda:	025b      	lsls	r3, r3, #9
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d205      	bcs.n	8005dec <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	e003      	b.n	8005df4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005dec:	231e      	movs	r3, #30
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e00:	231e      	movs	r3, #30
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	781b      	ldrb	r3, [r3, #0]
}
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b008      	add	sp, #32
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	ffff69f3 	.word	0xffff69f3
 8005e14:	ffffcfff 	.word	0xffffcfff
 8005e18:	fffff4ff 	.word	0xfffff4ff
 8005e1c:	40013800 	.word	0x40013800
 8005e20:	40021000 	.word	0x40021000
 8005e24:	40004400 	.word	0x40004400
 8005e28:	007a1200 	.word	0x007a1200

08005e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	2208      	movs	r2, #8
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d00b      	beq.n	8005e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4a4a      	ldr	r2, [pc, #296]	@ (8005f70 <UART_AdvFeatureConfig+0x144>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4a43      	ldr	r2, [pc, #268]	@ (8005f74 <UART_AdvFeatureConfig+0x148>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a3b      	ldr	r2, [pc, #236]	@ (8005f78 <UART_AdvFeatureConfig+0x14c>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d00b      	beq.n	8005ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4a34      	ldr	r2, [pc, #208]	@ (8005f7c <UART_AdvFeatureConfig+0x150>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	0019      	movs	r1, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8005f80 <UART_AdvFeatureConfig+0x154>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	4a25      	ldr	r2, [pc, #148]	@ (8005f84 <UART_AdvFeatureConfig+0x158>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	2240      	movs	r2, #64	@ 0x40
 8005f06:	4013      	ands	r3, r2
 8005f08:	d01d      	beq.n	8005f46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a1d      	ldr	r2, [pc, #116]	@ (8005f88 <UART_AdvFeatureConfig+0x15c>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f26:	2380      	movs	r3, #128	@ 0x80
 8005f28:	035b      	lsls	r3, r3, #13
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d10b      	bne.n	8005f46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <UART_AdvFeatureConfig+0x160>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	0019      	movs	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	2280      	movs	r2, #128	@ 0x80
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d00b      	beq.n	8005f68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4a0e      	ldr	r2, [pc, #56]	@ (8005f90 <UART_AdvFeatureConfig+0x164>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	46c0      	nop			@ (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	ffff7fff 	.word	0xffff7fff
 8005f74:	fffdffff 	.word	0xfffdffff
 8005f78:	fffeffff 	.word	0xfffeffff
 8005f7c:	fffbffff 	.word	0xfffbffff
 8005f80:	ffffefff 	.word	0xffffefff
 8005f84:	ffffdfff 	.word	0xffffdfff
 8005f88:	ffefffff 	.word	0xffefffff
 8005f8c:	ff9fffff 	.word	0xff9fffff
 8005f90:	fff7ffff 	.word	0xfff7ffff

08005f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b092      	sub	sp, #72	@ 0x48
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2284      	movs	r2, #132	@ 0x84
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fa4:	f7fd fee8 	bl	8003d78 <HAL_GetTick>
 8005fa8:	0003      	movs	r3, r0
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d12c      	bne.n	8006014 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fbc:	2280      	movs	r2, #128	@ 0x80
 8005fbe:	0391      	lsls	r1, r2, #14
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4a46      	ldr	r2, [pc, #280]	@ (80060dc <UART_CheckIdleState+0x148>)
 8005fc4:	9200      	str	r2, [sp, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f000 f88c 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 8005fcc:	1e03      	subs	r3, r0, #0
 8005fce:	d021      	beq.n	8006014 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fda:	2301      	movs	r3, #1
 8005fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	f383 8810 	msr	PRIMASK, r3
}
 8005fe4:	46c0      	nop			@ (mov r8, r8)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2180      	movs	r1, #128	@ 0x80
 8005ff2:	438a      	bics	r2, r1
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	f383 8810 	msr	PRIMASK, r3
}
 8006000:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2278      	movs	r2, #120	@ 0x78
 800600c:	2100      	movs	r1, #0
 800600e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e05f      	b.n	80060d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2204      	movs	r2, #4
 800601c:	4013      	ands	r3, r2
 800601e:	2b04      	cmp	r3, #4
 8006020:	d146      	bne.n	80060b0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006024:	2280      	movs	r2, #128	@ 0x80
 8006026:	03d1      	lsls	r1, r2, #15
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4a2c      	ldr	r2, [pc, #176]	@ (80060dc <UART_CheckIdleState+0x148>)
 800602c:	9200      	str	r2, [sp, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	f000 f858 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 8006034:	1e03      	subs	r3, r0, #0
 8006036:	d03b      	beq.n	80060b0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006038:	f3ef 8310 	mrs	r3, PRIMASK
 800603c:	60fb      	str	r3, [r7, #12]
  return(result);
 800603e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006040:	637b      	str	r3, [r7, #52]	@ 0x34
 8006042:	2301      	movs	r3, #1
 8006044:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f383 8810 	msr	PRIMASK, r3
}
 800604c:	46c0      	nop			@ (mov r8, r8)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4921      	ldr	r1, [pc, #132]	@ (80060e0 <UART_CheckIdleState+0x14c>)
 800605a:	400a      	ands	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006060:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f383 8810 	msr	PRIMASK, r3
}
 8006068:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800606a:	f3ef 8310 	mrs	r3, PRIMASK
 800606e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006070:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	633b      	str	r3, [r7, #48]	@ 0x30
 8006074:	2301      	movs	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f383 8810 	msr	PRIMASK, r3
}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2101      	movs	r1, #1
 800608c:	438a      	bics	r2, r1
 800608e:	609a      	str	r2, [r3, #8]
 8006090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006092:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	f383 8810 	msr	PRIMASK, r3
}
 800609a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2280      	movs	r2, #128	@ 0x80
 80060a0:	2120      	movs	r1, #32
 80060a2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2278      	movs	r2, #120	@ 0x78
 80060a8:	2100      	movs	r1, #0
 80060aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e011      	b.n	80060d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2220      	movs	r2, #32
 80060b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2280      	movs	r2, #128	@ 0x80
 80060ba:	2120      	movs	r1, #32
 80060bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2278      	movs	r2, #120	@ 0x78
 80060ce:	2100      	movs	r1, #0
 80060d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	0018      	movs	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b010      	add	sp, #64	@ 0x40
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	01ffffff 	.word	0x01ffffff
 80060e0:	fffffedf 	.word	0xfffffedf

080060e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	1dfb      	adds	r3, r7, #7
 80060f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f4:	e051      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	3301      	adds	r3, #1
 80060fa:	d04e      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fc:	f7fd fe3c 	bl	8003d78 <HAL_GetTick>
 8006100:	0002      	movs	r2, r0
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	429a      	cmp	r2, r3
 800610a:	d302      	bcc.n	8006112 <UART_WaitOnFlagUntilTimeout+0x2e>
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e051      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2204      	movs	r2, #4
 800611e:	4013      	ands	r3, r2
 8006120:	d03b      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b80      	cmp	r3, #128	@ 0x80
 8006126:	d038      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b40      	cmp	r3, #64	@ 0x40
 800612c:	d035      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	2208      	movs	r2, #8
 8006136:	4013      	ands	r3, r2
 8006138:	2b08      	cmp	r3, #8
 800613a:	d111      	bne.n	8006160 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2208      	movs	r2, #8
 8006142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	0018      	movs	r0, r3
 8006148:	f000 f83c 	bl	80061c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2284      	movs	r2, #132	@ 0x84
 8006150:	2108      	movs	r1, #8
 8006152:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2278      	movs	r2, #120	@ 0x78
 8006158:	2100      	movs	r1, #0
 800615a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e02c      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	2380      	movs	r3, #128	@ 0x80
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	401a      	ands	r2, r3
 800616c:	2380      	movs	r3, #128	@ 0x80
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	429a      	cmp	r2, r3
 8006172:	d112      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2280      	movs	r2, #128	@ 0x80
 800617a:	0112      	lsls	r2, r2, #4
 800617c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	0018      	movs	r0, r3
 8006182:	f000 f81f 	bl	80061c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2284      	movs	r2, #132	@ 0x84
 800618a:	2120      	movs	r1, #32
 800618c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2278      	movs	r2, #120	@ 0x78
 8006192:	2100      	movs	r1, #0
 8006194:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e00f      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	4013      	ands	r3, r2
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	425a      	negs	r2, r3
 80061aa:	4153      	adcs	r3, r2
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	001a      	movs	r2, r3
 80061b0:	1dfb      	adds	r3, r7, #7
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d09e      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	0018      	movs	r0, r3
 80061bc:	46bd      	mov	sp, r7
 80061be:	b004      	add	sp, #16
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08e      	sub	sp, #56	@ 0x38
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061cc:	f3ef 8310 	mrs	r3, PRIMASK
 80061d0:	617b      	str	r3, [r7, #20]
  return(result);
 80061d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d6:	2301      	movs	r3, #1
 80061d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f383 8810 	msr	PRIMASK, r3
}
 80061e0:	46c0      	nop			@ (mov r8, r8)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4926      	ldr	r1, [pc, #152]	@ (8006288 <UART_EndRxTransfer+0xc4>)
 80061ee:	400a      	ands	r2, r1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f383 8810 	msr	PRIMASK, r3
}
 80061fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006202:	623b      	str	r3, [r7, #32]
  return(result);
 8006204:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	633b      	str	r3, [r7, #48]	@ 0x30
 8006208:	2301      	movs	r3, #1
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	f383 8810 	msr	PRIMASK, r3
}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2101      	movs	r1, #1
 8006220:	438a      	bics	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	f383 8810 	msr	PRIMASK, r3
}
 800622e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006234:	2b01      	cmp	r3, #1
 8006236:	d118      	bne.n	800626a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006238:	f3ef 8310 	mrs	r3, PRIMASK
 800623c:	60bb      	str	r3, [r7, #8]
  return(result);
 800623e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006242:	2301      	movs	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f383 8810 	msr	PRIMASK, r3
}
 800624c:	46c0      	nop			@ (mov r8, r8)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2110      	movs	r1, #16
 800625a:	438a      	bics	r2, r1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f383 8810 	msr	PRIMASK, r3
}
 8006268:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2280      	movs	r2, #128	@ 0x80
 800626e:	2120      	movs	r1, #32
 8006270:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800627e:	46c0      	nop			@ (mov r8, r8)
 8006280:	46bd      	mov	sp, r7
 8006282:	b00e      	add	sp, #56	@ 0x38
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	fffffedf 	.word	0xfffffedf

0800628c <atoi>:
 800628c:	b510      	push	{r4, lr}
 800628e:	220a      	movs	r2, #10
 8006290:	2100      	movs	r1, #0
 8006292:	f000 f88b 	bl	80063ac <strtol>
 8006296:	bd10      	pop	{r4, pc}

08006298 <_strtol_l.constprop.0>:
 8006298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629a:	b085      	sub	sp, #20
 800629c:	0017      	movs	r7, r2
 800629e:	001e      	movs	r6, r3
 80062a0:	9003      	str	r0, [sp, #12]
 80062a2:	9101      	str	r1, [sp, #4]
 80062a4:	2b24      	cmp	r3, #36	@ 0x24
 80062a6:	d844      	bhi.n	8006332 <_strtol_l.constprop.0+0x9a>
 80062a8:	000c      	movs	r4, r1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d041      	beq.n	8006332 <_strtol_l.constprop.0+0x9a>
 80062ae:	4b3d      	ldr	r3, [pc, #244]	@ (80063a4 <_strtol_l.constprop.0+0x10c>)
 80062b0:	2208      	movs	r2, #8
 80062b2:	469c      	mov	ip, r3
 80062b4:	0023      	movs	r3, r4
 80062b6:	4661      	mov	r1, ip
 80062b8:	781d      	ldrb	r5, [r3, #0]
 80062ba:	3401      	adds	r4, #1
 80062bc:	5d48      	ldrb	r0, [r1, r5]
 80062be:	0001      	movs	r1, r0
 80062c0:	4011      	ands	r1, r2
 80062c2:	4210      	tst	r0, r2
 80062c4:	d1f6      	bne.n	80062b4 <_strtol_l.constprop.0+0x1c>
 80062c6:	2d2d      	cmp	r5, #45	@ 0x2d
 80062c8:	d13a      	bne.n	8006340 <_strtol_l.constprop.0+0xa8>
 80062ca:	7825      	ldrb	r5, [r4, #0]
 80062cc:	1c9c      	adds	r4, r3, #2
 80062ce:	2301      	movs	r3, #1
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	2210      	movs	r2, #16
 80062d4:	0033      	movs	r3, r6
 80062d6:	4393      	bics	r3, r2
 80062d8:	d109      	bne.n	80062ee <_strtol_l.constprop.0+0x56>
 80062da:	2d30      	cmp	r5, #48	@ 0x30
 80062dc:	d136      	bne.n	800634c <_strtol_l.constprop.0+0xb4>
 80062de:	2120      	movs	r1, #32
 80062e0:	7823      	ldrb	r3, [r4, #0]
 80062e2:	438b      	bics	r3, r1
 80062e4:	2b58      	cmp	r3, #88	@ 0x58
 80062e6:	d131      	bne.n	800634c <_strtol_l.constprop.0+0xb4>
 80062e8:	0016      	movs	r6, r2
 80062ea:	7865      	ldrb	r5, [r4, #1]
 80062ec:	3402      	adds	r4, #2
 80062ee:	4a2e      	ldr	r2, [pc, #184]	@ (80063a8 <_strtol_l.constprop.0+0x110>)
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	4694      	mov	ip, r2
 80062f4:	4463      	add	r3, ip
 80062f6:	0031      	movs	r1, r6
 80062f8:	0018      	movs	r0, r3
 80062fa:	9302      	str	r3, [sp, #8]
 80062fc:	f7f9 ff94 	bl	8000228 <__aeabi_uidivmod>
 8006300:	2200      	movs	r2, #0
 8006302:	4684      	mov	ip, r0
 8006304:	0010      	movs	r0, r2
 8006306:	002b      	movs	r3, r5
 8006308:	3b30      	subs	r3, #48	@ 0x30
 800630a:	2b09      	cmp	r3, #9
 800630c:	d825      	bhi.n	800635a <_strtol_l.constprop.0+0xc2>
 800630e:	001d      	movs	r5, r3
 8006310:	42ae      	cmp	r6, r5
 8006312:	dd31      	ble.n	8006378 <_strtol_l.constprop.0+0xe0>
 8006314:	1c53      	adds	r3, r2, #1
 8006316:	d009      	beq.n	800632c <_strtol_l.constprop.0+0x94>
 8006318:	2201      	movs	r2, #1
 800631a:	4252      	negs	r2, r2
 800631c:	4584      	cmp	ip, r0
 800631e:	d305      	bcc.n	800632c <_strtol_l.constprop.0+0x94>
 8006320:	d101      	bne.n	8006326 <_strtol_l.constprop.0+0x8e>
 8006322:	42a9      	cmp	r1, r5
 8006324:	db25      	blt.n	8006372 <_strtol_l.constprop.0+0xda>
 8006326:	2201      	movs	r2, #1
 8006328:	4370      	muls	r0, r6
 800632a:	1828      	adds	r0, r5, r0
 800632c:	7825      	ldrb	r5, [r4, #0]
 800632e:	3401      	adds	r4, #1
 8006330:	e7e9      	b.n	8006306 <_strtol_l.constprop.0+0x6e>
 8006332:	f000 f883 	bl	800643c <__errno>
 8006336:	2316      	movs	r3, #22
 8006338:	6003      	str	r3, [r0, #0]
 800633a:	2000      	movs	r0, #0
 800633c:	b005      	add	sp, #20
 800633e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006340:	9100      	str	r1, [sp, #0]
 8006342:	2d2b      	cmp	r5, #43	@ 0x2b
 8006344:	d1c5      	bne.n	80062d2 <_strtol_l.constprop.0+0x3a>
 8006346:	7825      	ldrb	r5, [r4, #0]
 8006348:	1c9c      	adds	r4, r3, #2
 800634a:	e7c2      	b.n	80062d2 <_strtol_l.constprop.0+0x3a>
 800634c:	2e00      	cmp	r6, #0
 800634e:	d1ce      	bne.n	80062ee <_strtol_l.constprop.0+0x56>
 8006350:	3608      	adds	r6, #8
 8006352:	2d30      	cmp	r5, #48	@ 0x30
 8006354:	d0cb      	beq.n	80062ee <_strtol_l.constprop.0+0x56>
 8006356:	3602      	adds	r6, #2
 8006358:	e7c9      	b.n	80062ee <_strtol_l.constprop.0+0x56>
 800635a:	002b      	movs	r3, r5
 800635c:	3b41      	subs	r3, #65	@ 0x41
 800635e:	2b19      	cmp	r3, #25
 8006360:	d801      	bhi.n	8006366 <_strtol_l.constprop.0+0xce>
 8006362:	3d37      	subs	r5, #55	@ 0x37
 8006364:	e7d4      	b.n	8006310 <_strtol_l.constprop.0+0x78>
 8006366:	002b      	movs	r3, r5
 8006368:	3b61      	subs	r3, #97	@ 0x61
 800636a:	2b19      	cmp	r3, #25
 800636c:	d804      	bhi.n	8006378 <_strtol_l.constprop.0+0xe0>
 800636e:	3d57      	subs	r5, #87	@ 0x57
 8006370:	e7ce      	b.n	8006310 <_strtol_l.constprop.0+0x78>
 8006372:	2201      	movs	r2, #1
 8006374:	4252      	negs	r2, r2
 8006376:	e7d9      	b.n	800632c <_strtol_l.constprop.0+0x94>
 8006378:	1c53      	adds	r3, r2, #1
 800637a:	d108      	bne.n	800638e <_strtol_l.constprop.0+0xf6>
 800637c:	2322      	movs	r3, #34	@ 0x22
 800637e:	9a03      	ldr	r2, [sp, #12]
 8006380:	9802      	ldr	r0, [sp, #8]
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	2f00      	cmp	r7, #0
 8006386:	d0d9      	beq.n	800633c <_strtol_l.constprop.0+0xa4>
 8006388:	1e63      	subs	r3, r4, #1
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	e007      	b.n	800639e <_strtol_l.constprop.0+0x106>
 800638e:	9b00      	ldr	r3, [sp, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d000      	beq.n	8006396 <_strtol_l.constprop.0+0xfe>
 8006394:	4240      	negs	r0, r0
 8006396:	2f00      	cmp	r7, #0
 8006398:	d0d0      	beq.n	800633c <_strtol_l.constprop.0+0xa4>
 800639a:	2a00      	cmp	r2, #0
 800639c:	d1f4      	bne.n	8006388 <_strtol_l.constprop.0+0xf0>
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	e7cb      	b.n	800633c <_strtol_l.constprop.0+0xa4>
 80063a4:	080099b9 	.word	0x080099b9
 80063a8:	7fffffff 	.word	0x7fffffff

080063ac <strtol>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4c04      	ldr	r4, [pc, #16]	@ (80063c0 <strtol+0x14>)
 80063b0:	0013      	movs	r3, r2
 80063b2:	000a      	movs	r2, r1
 80063b4:	0001      	movs	r1, r0
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	f7ff ff6e 	bl	8006298 <_strtol_l.constprop.0>
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	20000030 	.word	0x20000030

080063c4 <siprintf>:
 80063c4:	b40e      	push	{r1, r2, r3}
 80063c6:	b500      	push	{lr}
 80063c8:	490b      	ldr	r1, [pc, #44]	@ (80063f8 <siprintf+0x34>)
 80063ca:	b09c      	sub	sp, #112	@ 0x70
 80063cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80063ce:	9002      	str	r0, [sp, #8]
 80063d0:	9006      	str	r0, [sp, #24]
 80063d2:	9107      	str	r1, [sp, #28]
 80063d4:	9104      	str	r1, [sp, #16]
 80063d6:	4809      	ldr	r0, [pc, #36]	@ (80063fc <siprintf+0x38>)
 80063d8:	4909      	ldr	r1, [pc, #36]	@ (8006400 <siprintf+0x3c>)
 80063da:	cb04      	ldmia	r3!, {r2}
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	a902      	add	r1, sp, #8
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	f000 f9b2 	bl	800674c <_svfiprintf_r>
 80063e8:	2200      	movs	r2, #0
 80063ea:	9b02      	ldr	r3, [sp, #8]
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	b01c      	add	sp, #112	@ 0x70
 80063f0:	bc08      	pop	{r3}
 80063f2:	b003      	add	sp, #12
 80063f4:	4718      	bx	r3
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	7fffffff 	.word	0x7fffffff
 80063fc:	20000030 	.word	0x20000030
 8006400:	ffff0208 	.word	0xffff0208

08006404 <memset>:
 8006404:	0003      	movs	r3, r0
 8006406:	1882      	adds	r2, r0, r2
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	7019      	strb	r1, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <strncpy>:
 8006414:	0003      	movs	r3, r0
 8006416:	b530      	push	{r4, r5, lr}
 8006418:	001d      	movs	r5, r3
 800641a:	2a00      	cmp	r2, #0
 800641c:	d006      	beq.n	800642c <strncpy+0x18>
 800641e:	780c      	ldrb	r4, [r1, #0]
 8006420:	3a01      	subs	r2, #1
 8006422:	3301      	adds	r3, #1
 8006424:	702c      	strb	r4, [r5, #0]
 8006426:	3101      	adds	r1, #1
 8006428:	2c00      	cmp	r4, #0
 800642a:	d1f5      	bne.n	8006418 <strncpy+0x4>
 800642c:	2100      	movs	r1, #0
 800642e:	189a      	adds	r2, r3, r2
 8006430:	4293      	cmp	r3, r2
 8006432:	d100      	bne.n	8006436 <strncpy+0x22>
 8006434:	bd30      	pop	{r4, r5, pc}
 8006436:	7019      	strb	r1, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	e7f9      	b.n	8006430 <strncpy+0x1c>

0800643c <__errno>:
 800643c:	4b01      	ldr	r3, [pc, #4]	@ (8006444 <__errno+0x8>)
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	4770      	bx	lr
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	20000030 	.word	0x20000030

08006448 <__libc_init_array>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	2600      	movs	r6, #0
 800644c:	4c0c      	ldr	r4, [pc, #48]	@ (8006480 <__libc_init_array+0x38>)
 800644e:	4d0d      	ldr	r5, [pc, #52]	@ (8006484 <__libc_init_array+0x3c>)
 8006450:	1b64      	subs	r4, r4, r5
 8006452:	10a4      	asrs	r4, r4, #2
 8006454:	42a6      	cmp	r6, r4
 8006456:	d109      	bne.n	800646c <__libc_init_array+0x24>
 8006458:	2600      	movs	r6, #0
 800645a:	f000 fcad 	bl	8006db8 <_init>
 800645e:	4c0a      	ldr	r4, [pc, #40]	@ (8006488 <__libc_init_array+0x40>)
 8006460:	4d0a      	ldr	r5, [pc, #40]	@ (800648c <__libc_init_array+0x44>)
 8006462:	1b64      	subs	r4, r4, r5
 8006464:	10a4      	asrs	r4, r4, #2
 8006466:	42a6      	cmp	r6, r4
 8006468:	d105      	bne.n	8006476 <__libc_init_array+0x2e>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	00b3      	lsls	r3, r6, #2
 800646e:	58eb      	ldr	r3, [r5, r3]
 8006470:	4798      	blx	r3
 8006472:	3601      	adds	r6, #1
 8006474:	e7ee      	b.n	8006454 <__libc_init_array+0xc>
 8006476:	00b3      	lsls	r3, r6, #2
 8006478:	58eb      	ldr	r3, [r5, r3]
 800647a:	4798      	blx	r3
 800647c:	3601      	adds	r6, #1
 800647e:	e7f2      	b.n	8006466 <__libc_init_array+0x1e>
 8006480:	08009aec 	.word	0x08009aec
 8006484:	08009aec 	.word	0x08009aec
 8006488:	08009af0 	.word	0x08009af0
 800648c:	08009aec 	.word	0x08009aec

08006490 <__retarget_lock_acquire_recursive>:
 8006490:	4770      	bx	lr

08006492 <__retarget_lock_release_recursive>:
 8006492:	4770      	bx	lr

08006494 <_free_r>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	0005      	movs	r5, r0
 8006498:	1e0c      	subs	r4, r1, #0
 800649a:	d010      	beq.n	80064be <_free_r+0x2a>
 800649c:	3c04      	subs	r4, #4
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	da00      	bge.n	80064a6 <_free_r+0x12>
 80064a4:	18e4      	adds	r4, r4, r3
 80064a6:	0028      	movs	r0, r5
 80064a8:	f000 f8e0 	bl	800666c <__malloc_lock>
 80064ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <_free_r+0x90>)
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <_free_r+0x2c>
 80064b4:	6063      	str	r3, [r4, #4]
 80064b6:	6014      	str	r4, [r2, #0]
 80064b8:	0028      	movs	r0, r5
 80064ba:	f000 f8df 	bl	800667c <__malloc_unlock>
 80064be:	bd70      	pop	{r4, r5, r6, pc}
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d908      	bls.n	80064d6 <_free_r+0x42>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	1821      	adds	r1, r4, r0
 80064c8:	428b      	cmp	r3, r1
 80064ca:	d1f3      	bne.n	80064b4 <_free_r+0x20>
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	1809      	adds	r1, r1, r0
 80064d2:	6021      	str	r1, [r4, #0]
 80064d4:	e7ee      	b.n	80064b4 <_free_r+0x20>
 80064d6:	001a      	movs	r2, r3
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <_free_r+0x4e>
 80064de:	42a3      	cmp	r3, r4
 80064e0:	d9f9      	bls.n	80064d6 <_free_r+0x42>
 80064e2:	6811      	ldr	r1, [r2, #0]
 80064e4:	1850      	adds	r0, r2, r1
 80064e6:	42a0      	cmp	r0, r4
 80064e8:	d10b      	bne.n	8006502 <_free_r+0x6e>
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	1809      	adds	r1, r1, r0
 80064ee:	1850      	adds	r0, r2, r1
 80064f0:	6011      	str	r1, [r2, #0]
 80064f2:	4283      	cmp	r3, r0
 80064f4:	d1e0      	bne.n	80064b8 <_free_r+0x24>
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	1841      	adds	r1, r0, r1
 80064fc:	6011      	str	r1, [r2, #0]
 80064fe:	6053      	str	r3, [r2, #4]
 8006500:	e7da      	b.n	80064b8 <_free_r+0x24>
 8006502:	42a0      	cmp	r0, r4
 8006504:	d902      	bls.n	800650c <_free_r+0x78>
 8006506:	230c      	movs	r3, #12
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	e7d5      	b.n	80064b8 <_free_r+0x24>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	1821      	adds	r1, r4, r0
 8006510:	428b      	cmp	r3, r1
 8006512:	d103      	bne.n	800651c <_free_r+0x88>
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	1809      	adds	r1, r1, r0
 800651a:	6021      	str	r1, [r4, #0]
 800651c:	6063      	str	r3, [r4, #4]
 800651e:	6054      	str	r4, [r2, #4]
 8006520:	e7ca      	b.n	80064b8 <_free_r+0x24>
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	200006fc 	.word	0x200006fc

08006528 <sbrk_aligned>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	4e0f      	ldr	r6, [pc, #60]	@ (8006568 <sbrk_aligned+0x40>)
 800652c:	000d      	movs	r5, r1
 800652e:	6831      	ldr	r1, [r6, #0]
 8006530:	0004      	movs	r4, r0
 8006532:	2900      	cmp	r1, #0
 8006534:	d102      	bne.n	800653c <sbrk_aligned+0x14>
 8006536:	f000 fb99 	bl	8006c6c <_sbrk_r>
 800653a:	6030      	str	r0, [r6, #0]
 800653c:	0029      	movs	r1, r5
 800653e:	0020      	movs	r0, r4
 8006540:	f000 fb94 	bl	8006c6c <_sbrk_r>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d103      	bne.n	8006550 <sbrk_aligned+0x28>
 8006548:	2501      	movs	r5, #1
 800654a:	426d      	negs	r5, r5
 800654c:	0028      	movs	r0, r5
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	2303      	movs	r3, #3
 8006552:	1cc5      	adds	r5, r0, #3
 8006554:	439d      	bics	r5, r3
 8006556:	42a8      	cmp	r0, r5
 8006558:	d0f8      	beq.n	800654c <sbrk_aligned+0x24>
 800655a:	1a29      	subs	r1, r5, r0
 800655c:	0020      	movs	r0, r4
 800655e:	f000 fb85 	bl	8006c6c <_sbrk_r>
 8006562:	3001      	adds	r0, #1
 8006564:	d1f2      	bne.n	800654c <sbrk_aligned+0x24>
 8006566:	e7ef      	b.n	8006548 <sbrk_aligned+0x20>
 8006568:	200006f8 	.word	0x200006f8

0800656c <_malloc_r>:
 800656c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800656e:	2203      	movs	r2, #3
 8006570:	1ccb      	adds	r3, r1, #3
 8006572:	4393      	bics	r3, r2
 8006574:	3308      	adds	r3, #8
 8006576:	0005      	movs	r5, r0
 8006578:	001f      	movs	r7, r3
 800657a:	2b0c      	cmp	r3, #12
 800657c:	d234      	bcs.n	80065e8 <_malloc_r+0x7c>
 800657e:	270c      	movs	r7, #12
 8006580:	42b9      	cmp	r1, r7
 8006582:	d833      	bhi.n	80065ec <_malloc_r+0x80>
 8006584:	0028      	movs	r0, r5
 8006586:	f000 f871 	bl	800666c <__malloc_lock>
 800658a:	4e37      	ldr	r6, [pc, #220]	@ (8006668 <_malloc_r+0xfc>)
 800658c:	6833      	ldr	r3, [r6, #0]
 800658e:	001c      	movs	r4, r3
 8006590:	2c00      	cmp	r4, #0
 8006592:	d12f      	bne.n	80065f4 <_malloc_r+0x88>
 8006594:	0039      	movs	r1, r7
 8006596:	0028      	movs	r0, r5
 8006598:	f7ff ffc6 	bl	8006528 <sbrk_aligned>
 800659c:	0004      	movs	r4, r0
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	d15f      	bne.n	8006662 <_malloc_r+0xf6>
 80065a2:	6834      	ldr	r4, [r6, #0]
 80065a4:	9400      	str	r4, [sp, #0]
 80065a6:	9b00      	ldr	r3, [sp, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d14a      	bne.n	8006642 <_malloc_r+0xd6>
 80065ac:	2c00      	cmp	r4, #0
 80065ae:	d052      	beq.n	8006656 <_malloc_r+0xea>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	0028      	movs	r0, r5
 80065b4:	18e3      	adds	r3, r4, r3
 80065b6:	9900      	ldr	r1, [sp, #0]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	f000 fb57 	bl	8006c6c <_sbrk_r>
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	4283      	cmp	r3, r0
 80065c2:	d148      	bne.n	8006656 <_malloc_r+0xea>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	0028      	movs	r0, r5
 80065c8:	1aff      	subs	r7, r7, r3
 80065ca:	0039      	movs	r1, r7
 80065cc:	f7ff ffac 	bl	8006528 <sbrk_aligned>
 80065d0:	3001      	adds	r0, #1
 80065d2:	d040      	beq.n	8006656 <_malloc_r+0xea>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	19db      	adds	r3, r3, r7
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	6833      	ldr	r3, [r6, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	2a00      	cmp	r2, #0
 80065e0:	d133      	bne.n	800664a <_malloc_r+0xde>
 80065e2:	9b00      	ldr	r3, [sp, #0]
 80065e4:	6033      	str	r3, [r6, #0]
 80065e6:	e019      	b.n	800661c <_malloc_r+0xb0>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	dac9      	bge.n	8006580 <_malloc_r+0x14>
 80065ec:	230c      	movs	r3, #12
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	2000      	movs	r0, #0
 80065f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065f4:	6821      	ldr	r1, [r4, #0]
 80065f6:	1bc9      	subs	r1, r1, r7
 80065f8:	d420      	bmi.n	800663c <_malloc_r+0xd0>
 80065fa:	290b      	cmp	r1, #11
 80065fc:	d90a      	bls.n	8006614 <_malloc_r+0xa8>
 80065fe:	19e2      	adds	r2, r4, r7
 8006600:	6027      	str	r7, [r4, #0]
 8006602:	42a3      	cmp	r3, r4
 8006604:	d104      	bne.n	8006610 <_malloc_r+0xa4>
 8006606:	6032      	str	r2, [r6, #0]
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	6011      	str	r1, [r2, #0]
 800660c:	6053      	str	r3, [r2, #4]
 800660e:	e005      	b.n	800661c <_malloc_r+0xb0>
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	e7f9      	b.n	8006608 <_malloc_r+0x9c>
 8006614:	6862      	ldr	r2, [r4, #4]
 8006616:	42a3      	cmp	r3, r4
 8006618:	d10e      	bne.n	8006638 <_malloc_r+0xcc>
 800661a:	6032      	str	r2, [r6, #0]
 800661c:	0028      	movs	r0, r5
 800661e:	f000 f82d 	bl	800667c <__malloc_unlock>
 8006622:	0020      	movs	r0, r4
 8006624:	2207      	movs	r2, #7
 8006626:	300b      	adds	r0, #11
 8006628:	1d23      	adds	r3, r4, #4
 800662a:	4390      	bics	r0, r2
 800662c:	1ac2      	subs	r2, r0, r3
 800662e:	4298      	cmp	r0, r3
 8006630:	d0df      	beq.n	80065f2 <_malloc_r+0x86>
 8006632:	1a1b      	subs	r3, r3, r0
 8006634:	50a3      	str	r3, [r4, r2]
 8006636:	e7dc      	b.n	80065f2 <_malloc_r+0x86>
 8006638:	605a      	str	r2, [r3, #4]
 800663a:	e7ef      	b.n	800661c <_malloc_r+0xb0>
 800663c:	0023      	movs	r3, r4
 800663e:	6864      	ldr	r4, [r4, #4]
 8006640:	e7a6      	b.n	8006590 <_malloc_r+0x24>
 8006642:	9c00      	ldr	r4, [sp, #0]
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	e7ad      	b.n	80065a6 <_malloc_r+0x3a>
 800664a:	001a      	movs	r2, r3
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	42a3      	cmp	r3, r4
 8006650:	d1fb      	bne.n	800664a <_malloc_r+0xde>
 8006652:	2300      	movs	r3, #0
 8006654:	e7da      	b.n	800660c <_malloc_r+0xa0>
 8006656:	230c      	movs	r3, #12
 8006658:	0028      	movs	r0, r5
 800665a:	602b      	str	r3, [r5, #0]
 800665c:	f000 f80e 	bl	800667c <__malloc_unlock>
 8006660:	e7c6      	b.n	80065f0 <_malloc_r+0x84>
 8006662:	6007      	str	r7, [r0, #0]
 8006664:	e7da      	b.n	800661c <_malloc_r+0xb0>
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	200006fc 	.word	0x200006fc

0800666c <__malloc_lock>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4802      	ldr	r0, [pc, #8]	@ (8006678 <__malloc_lock+0xc>)
 8006670:	f7ff ff0e 	bl	8006490 <__retarget_lock_acquire_recursive>
 8006674:	bd10      	pop	{r4, pc}
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	200006f4 	.word	0x200006f4

0800667c <__malloc_unlock>:
 800667c:	b510      	push	{r4, lr}
 800667e:	4802      	ldr	r0, [pc, #8]	@ (8006688 <__malloc_unlock+0xc>)
 8006680:	f7ff ff07 	bl	8006492 <__retarget_lock_release_recursive>
 8006684:	bd10      	pop	{r4, pc}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	200006f4 	.word	0x200006f4

0800668c <__ssputs_r>:
 800668c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800668e:	688e      	ldr	r6, [r1, #8]
 8006690:	b085      	sub	sp, #20
 8006692:	001f      	movs	r7, r3
 8006694:	000c      	movs	r4, r1
 8006696:	680b      	ldr	r3, [r1, #0]
 8006698:	9002      	str	r0, [sp, #8]
 800669a:	9203      	str	r2, [sp, #12]
 800669c:	42be      	cmp	r6, r7
 800669e:	d830      	bhi.n	8006702 <__ssputs_r+0x76>
 80066a0:	210c      	movs	r1, #12
 80066a2:	5e62      	ldrsh	r2, [r4, r1]
 80066a4:	2190      	movs	r1, #144	@ 0x90
 80066a6:	00c9      	lsls	r1, r1, #3
 80066a8:	420a      	tst	r2, r1
 80066aa:	d028      	beq.n	80066fe <__ssputs_r+0x72>
 80066ac:	2003      	movs	r0, #3
 80066ae:	6921      	ldr	r1, [r4, #16]
 80066b0:	1a5b      	subs	r3, r3, r1
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	6963      	ldr	r3, [r4, #20]
 80066b6:	4343      	muls	r3, r0
 80066b8:	9801      	ldr	r0, [sp, #4]
 80066ba:	0fdd      	lsrs	r5, r3, #31
 80066bc:	18ed      	adds	r5, r5, r3
 80066be:	1c7b      	adds	r3, r7, #1
 80066c0:	181b      	adds	r3, r3, r0
 80066c2:	106d      	asrs	r5, r5, #1
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	d900      	bls.n	80066ca <__ssputs_r+0x3e>
 80066c8:	001d      	movs	r5, r3
 80066ca:	0552      	lsls	r2, r2, #21
 80066cc:	d528      	bpl.n	8006720 <__ssputs_r+0x94>
 80066ce:	0029      	movs	r1, r5
 80066d0:	9802      	ldr	r0, [sp, #8]
 80066d2:	f7ff ff4b 	bl	800656c <_malloc_r>
 80066d6:	1e06      	subs	r6, r0, #0
 80066d8:	d02c      	beq.n	8006734 <__ssputs_r+0xa8>
 80066da:	9a01      	ldr	r2, [sp, #4]
 80066dc:	6921      	ldr	r1, [r4, #16]
 80066de:	f000 fae2 	bl	8006ca6 <memcpy>
 80066e2:	89a2      	ldrh	r2, [r4, #12]
 80066e4:	4b18      	ldr	r3, [pc, #96]	@ (8006748 <__ssputs_r+0xbc>)
 80066e6:	401a      	ands	r2, r3
 80066e8:	2380      	movs	r3, #128	@ 0x80
 80066ea:	4313      	orrs	r3, r2
 80066ec:	81a3      	strh	r3, [r4, #12]
 80066ee:	9b01      	ldr	r3, [sp, #4]
 80066f0:	6126      	str	r6, [r4, #16]
 80066f2:	18f6      	adds	r6, r6, r3
 80066f4:	6026      	str	r6, [r4, #0]
 80066f6:	003e      	movs	r6, r7
 80066f8:	6165      	str	r5, [r4, #20]
 80066fa:	1aed      	subs	r5, r5, r3
 80066fc:	60a5      	str	r5, [r4, #8]
 80066fe:	42be      	cmp	r6, r7
 8006700:	d900      	bls.n	8006704 <__ssputs_r+0x78>
 8006702:	003e      	movs	r6, r7
 8006704:	0032      	movs	r2, r6
 8006706:	9903      	ldr	r1, [sp, #12]
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	f000 fa9b 	bl	8006c44 <memmove>
 800670e:	2000      	movs	r0, #0
 8006710:	68a3      	ldr	r3, [r4, #8]
 8006712:	1b9b      	subs	r3, r3, r6
 8006714:	60a3      	str	r3, [r4, #8]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	199b      	adds	r3, r3, r6
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	b005      	add	sp, #20
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006720:	002a      	movs	r2, r5
 8006722:	9802      	ldr	r0, [sp, #8]
 8006724:	f000 fac8 	bl	8006cb8 <_realloc_r>
 8006728:	1e06      	subs	r6, r0, #0
 800672a:	d1e0      	bne.n	80066ee <__ssputs_r+0x62>
 800672c:	6921      	ldr	r1, [r4, #16]
 800672e:	9802      	ldr	r0, [sp, #8]
 8006730:	f7ff feb0 	bl	8006494 <_free_r>
 8006734:	230c      	movs	r3, #12
 8006736:	2001      	movs	r0, #1
 8006738:	9a02      	ldr	r2, [sp, #8]
 800673a:	4240      	negs	r0, r0
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	89a2      	ldrh	r2, [r4, #12]
 8006740:	3334      	adds	r3, #52	@ 0x34
 8006742:	4313      	orrs	r3, r2
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	e7e9      	b.n	800671c <__ssputs_r+0x90>
 8006748:	fffffb7f 	.word	0xfffffb7f

0800674c <_svfiprintf_r>:
 800674c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674e:	b0a1      	sub	sp, #132	@ 0x84
 8006750:	9003      	str	r0, [sp, #12]
 8006752:	001d      	movs	r5, r3
 8006754:	898b      	ldrh	r3, [r1, #12]
 8006756:	000f      	movs	r7, r1
 8006758:	0016      	movs	r6, r2
 800675a:	061b      	lsls	r3, r3, #24
 800675c:	d511      	bpl.n	8006782 <_svfiprintf_r+0x36>
 800675e:	690b      	ldr	r3, [r1, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10e      	bne.n	8006782 <_svfiprintf_r+0x36>
 8006764:	2140      	movs	r1, #64	@ 0x40
 8006766:	f7ff ff01 	bl	800656c <_malloc_r>
 800676a:	6038      	str	r0, [r7, #0]
 800676c:	6138      	str	r0, [r7, #16]
 800676e:	2800      	cmp	r0, #0
 8006770:	d105      	bne.n	800677e <_svfiprintf_r+0x32>
 8006772:	230c      	movs	r3, #12
 8006774:	9a03      	ldr	r2, [sp, #12]
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	2001      	movs	r0, #1
 800677a:	4240      	negs	r0, r0
 800677c:	e0cf      	b.n	800691e <_svfiprintf_r+0x1d2>
 800677e:	2340      	movs	r3, #64	@ 0x40
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	2300      	movs	r3, #0
 8006784:	ac08      	add	r4, sp, #32
 8006786:	6163      	str	r3, [r4, #20]
 8006788:	3320      	adds	r3, #32
 800678a:	7663      	strb	r3, [r4, #25]
 800678c:	3310      	adds	r3, #16
 800678e:	76a3      	strb	r3, [r4, #26]
 8006790:	9507      	str	r5, [sp, #28]
 8006792:	0035      	movs	r5, r6
 8006794:	782b      	ldrb	r3, [r5, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <_svfiprintf_r+0x52>
 800679a:	2b25      	cmp	r3, #37	@ 0x25
 800679c:	d148      	bne.n	8006830 <_svfiprintf_r+0xe4>
 800679e:	1bab      	subs	r3, r5, r6
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	42b5      	cmp	r5, r6
 80067a4:	d00b      	beq.n	80067be <_svfiprintf_r+0x72>
 80067a6:	0032      	movs	r2, r6
 80067a8:	0039      	movs	r1, r7
 80067aa:	9803      	ldr	r0, [sp, #12]
 80067ac:	f7ff ff6e 	bl	800668c <__ssputs_r>
 80067b0:	3001      	adds	r0, #1
 80067b2:	d100      	bne.n	80067b6 <_svfiprintf_r+0x6a>
 80067b4:	e0ae      	b.n	8006914 <_svfiprintf_r+0x1c8>
 80067b6:	6963      	ldr	r3, [r4, #20]
 80067b8:	9a05      	ldr	r2, [sp, #20]
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	6163      	str	r3, [r4, #20]
 80067be:	782b      	ldrb	r3, [r5, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d100      	bne.n	80067c6 <_svfiprintf_r+0x7a>
 80067c4:	e0a6      	b.n	8006914 <_svfiprintf_r+0x1c8>
 80067c6:	2201      	movs	r2, #1
 80067c8:	2300      	movs	r3, #0
 80067ca:	4252      	negs	r2, r2
 80067cc:	6062      	str	r2, [r4, #4]
 80067ce:	a904      	add	r1, sp, #16
 80067d0:	3254      	adds	r2, #84	@ 0x54
 80067d2:	1852      	adds	r2, r2, r1
 80067d4:	1c6e      	adds	r6, r5, #1
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	60e3      	str	r3, [r4, #12]
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	7013      	strb	r3, [r2, #0]
 80067de:	65a3      	str	r3, [r4, #88]	@ 0x58
 80067e0:	4b54      	ldr	r3, [pc, #336]	@ (8006934 <_svfiprintf_r+0x1e8>)
 80067e2:	2205      	movs	r2, #5
 80067e4:	0018      	movs	r0, r3
 80067e6:	7831      	ldrb	r1, [r6, #0]
 80067e8:	9305      	str	r3, [sp, #20]
 80067ea:	f000 fa51 	bl	8006c90 <memchr>
 80067ee:	1c75      	adds	r5, r6, #1
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d11f      	bne.n	8006834 <_svfiprintf_r+0xe8>
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	06d3      	lsls	r3, r2, #27
 80067f8:	d504      	bpl.n	8006804 <_svfiprintf_r+0xb8>
 80067fa:	2353      	movs	r3, #83	@ 0x53
 80067fc:	a904      	add	r1, sp, #16
 80067fe:	185b      	adds	r3, r3, r1
 8006800:	2120      	movs	r1, #32
 8006802:	7019      	strb	r1, [r3, #0]
 8006804:	0713      	lsls	r3, r2, #28
 8006806:	d504      	bpl.n	8006812 <_svfiprintf_r+0xc6>
 8006808:	2353      	movs	r3, #83	@ 0x53
 800680a:	a904      	add	r1, sp, #16
 800680c:	185b      	adds	r3, r3, r1
 800680e:	212b      	movs	r1, #43	@ 0x2b
 8006810:	7019      	strb	r1, [r3, #0]
 8006812:	7833      	ldrb	r3, [r6, #0]
 8006814:	2b2a      	cmp	r3, #42	@ 0x2a
 8006816:	d016      	beq.n	8006846 <_svfiprintf_r+0xfa>
 8006818:	0035      	movs	r5, r6
 800681a:	2100      	movs	r1, #0
 800681c:	200a      	movs	r0, #10
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	782a      	ldrb	r2, [r5, #0]
 8006822:	1c6e      	adds	r6, r5, #1
 8006824:	3a30      	subs	r2, #48	@ 0x30
 8006826:	2a09      	cmp	r2, #9
 8006828:	d950      	bls.n	80068cc <_svfiprintf_r+0x180>
 800682a:	2900      	cmp	r1, #0
 800682c:	d111      	bne.n	8006852 <_svfiprintf_r+0x106>
 800682e:	e017      	b.n	8006860 <_svfiprintf_r+0x114>
 8006830:	3501      	adds	r5, #1
 8006832:	e7af      	b.n	8006794 <_svfiprintf_r+0x48>
 8006834:	9b05      	ldr	r3, [sp, #20]
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	1ac0      	subs	r0, r0, r3
 800683a:	2301      	movs	r3, #1
 800683c:	4083      	lsls	r3, r0
 800683e:	4313      	orrs	r3, r2
 8006840:	002e      	movs	r6, r5
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	e7cc      	b.n	80067e0 <_svfiprintf_r+0x94>
 8006846:	9b07      	ldr	r3, [sp, #28]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	9107      	str	r1, [sp, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db01      	blt.n	8006856 <_svfiprintf_r+0x10a>
 8006852:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006854:	e004      	b.n	8006860 <_svfiprintf_r+0x114>
 8006856:	425b      	negs	r3, r3
 8006858:	60e3      	str	r3, [r4, #12]
 800685a:	2302      	movs	r3, #2
 800685c:	4313      	orrs	r3, r2
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	782b      	ldrb	r3, [r5, #0]
 8006862:	2b2e      	cmp	r3, #46	@ 0x2e
 8006864:	d10c      	bne.n	8006880 <_svfiprintf_r+0x134>
 8006866:	786b      	ldrb	r3, [r5, #1]
 8006868:	2b2a      	cmp	r3, #42	@ 0x2a
 800686a:	d134      	bne.n	80068d6 <_svfiprintf_r+0x18a>
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	3502      	adds	r5, #2
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	9207      	str	r2, [sp, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	da01      	bge.n	800687e <_svfiprintf_r+0x132>
 800687a:	2301      	movs	r3, #1
 800687c:	425b      	negs	r3, r3
 800687e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006880:	4e2d      	ldr	r6, [pc, #180]	@ (8006938 <_svfiprintf_r+0x1ec>)
 8006882:	2203      	movs	r2, #3
 8006884:	0030      	movs	r0, r6
 8006886:	7829      	ldrb	r1, [r5, #0]
 8006888:	f000 fa02 	bl	8006c90 <memchr>
 800688c:	2800      	cmp	r0, #0
 800688e:	d006      	beq.n	800689e <_svfiprintf_r+0x152>
 8006890:	2340      	movs	r3, #64	@ 0x40
 8006892:	1b80      	subs	r0, r0, r6
 8006894:	4083      	lsls	r3, r0
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	3501      	adds	r5, #1
 800689a:	4313      	orrs	r3, r2
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	7829      	ldrb	r1, [r5, #0]
 80068a0:	2206      	movs	r2, #6
 80068a2:	4826      	ldr	r0, [pc, #152]	@ (800693c <_svfiprintf_r+0x1f0>)
 80068a4:	1c6e      	adds	r6, r5, #1
 80068a6:	7621      	strb	r1, [r4, #24]
 80068a8:	f000 f9f2 	bl	8006c90 <memchr>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d038      	beq.n	8006922 <_svfiprintf_r+0x1d6>
 80068b0:	4b23      	ldr	r3, [pc, #140]	@ (8006940 <_svfiprintf_r+0x1f4>)
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d122      	bne.n	80068fc <_svfiprintf_r+0x1b0>
 80068b6:	2207      	movs	r2, #7
 80068b8:	9b07      	ldr	r3, [sp, #28]
 80068ba:	3307      	adds	r3, #7
 80068bc:	4393      	bics	r3, r2
 80068be:	3308      	adds	r3, #8
 80068c0:	9307      	str	r3, [sp, #28]
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	9a04      	ldr	r2, [sp, #16]
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	6163      	str	r3, [r4, #20]
 80068ca:	e762      	b.n	8006792 <_svfiprintf_r+0x46>
 80068cc:	4343      	muls	r3, r0
 80068ce:	0035      	movs	r5, r6
 80068d0:	2101      	movs	r1, #1
 80068d2:	189b      	adds	r3, r3, r2
 80068d4:	e7a4      	b.n	8006820 <_svfiprintf_r+0xd4>
 80068d6:	2300      	movs	r3, #0
 80068d8:	200a      	movs	r0, #10
 80068da:	0019      	movs	r1, r3
 80068dc:	3501      	adds	r5, #1
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	782a      	ldrb	r2, [r5, #0]
 80068e2:	1c6e      	adds	r6, r5, #1
 80068e4:	3a30      	subs	r2, #48	@ 0x30
 80068e6:	2a09      	cmp	r2, #9
 80068e8:	d903      	bls.n	80068f2 <_svfiprintf_r+0x1a6>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0c8      	beq.n	8006880 <_svfiprintf_r+0x134>
 80068ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80068f0:	e7c6      	b.n	8006880 <_svfiprintf_r+0x134>
 80068f2:	4341      	muls	r1, r0
 80068f4:	0035      	movs	r5, r6
 80068f6:	2301      	movs	r3, #1
 80068f8:	1889      	adds	r1, r1, r2
 80068fa:	e7f1      	b.n	80068e0 <_svfiprintf_r+0x194>
 80068fc:	aa07      	add	r2, sp, #28
 80068fe:	9200      	str	r2, [sp, #0]
 8006900:	0021      	movs	r1, r4
 8006902:	003a      	movs	r2, r7
 8006904:	4b0f      	ldr	r3, [pc, #60]	@ (8006944 <_svfiprintf_r+0x1f8>)
 8006906:	9803      	ldr	r0, [sp, #12]
 8006908:	e000      	b.n	800690c <_svfiprintf_r+0x1c0>
 800690a:	bf00      	nop
 800690c:	9004      	str	r0, [sp, #16]
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	3301      	adds	r3, #1
 8006912:	d1d6      	bne.n	80068c2 <_svfiprintf_r+0x176>
 8006914:	89bb      	ldrh	r3, [r7, #12]
 8006916:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006918:	065b      	lsls	r3, r3, #25
 800691a:	d500      	bpl.n	800691e <_svfiprintf_r+0x1d2>
 800691c:	e72c      	b.n	8006778 <_svfiprintf_r+0x2c>
 800691e:	b021      	add	sp, #132	@ 0x84
 8006920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006922:	aa07      	add	r2, sp, #28
 8006924:	9200      	str	r2, [sp, #0]
 8006926:	0021      	movs	r1, r4
 8006928:	003a      	movs	r2, r7
 800692a:	4b06      	ldr	r3, [pc, #24]	@ (8006944 <_svfiprintf_r+0x1f8>)
 800692c:	9803      	ldr	r0, [sp, #12]
 800692e:	f000 f87b 	bl	8006a28 <_printf_i>
 8006932:	e7eb      	b.n	800690c <_svfiprintf_r+0x1c0>
 8006934:	08009ab9 	.word	0x08009ab9
 8006938:	08009abf 	.word	0x08009abf
 800693c:	08009ac3 	.word	0x08009ac3
 8006940:	00000000 	.word	0x00000000
 8006944:	0800668d 	.word	0x0800668d

08006948 <_printf_common>:
 8006948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694a:	0016      	movs	r6, r2
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	688a      	ldr	r2, [r1, #8]
 8006950:	690b      	ldr	r3, [r1, #16]
 8006952:	000c      	movs	r4, r1
 8006954:	9000      	str	r0, [sp, #0]
 8006956:	4293      	cmp	r3, r2
 8006958:	da00      	bge.n	800695c <_printf_common+0x14>
 800695a:	0013      	movs	r3, r2
 800695c:	0022      	movs	r2, r4
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	3243      	adds	r2, #67	@ 0x43
 8006962:	7812      	ldrb	r2, [r2, #0]
 8006964:	2a00      	cmp	r2, #0
 8006966:	d001      	beq.n	800696c <_printf_common+0x24>
 8006968:	3301      	adds	r3, #1
 800696a:	6033      	str	r3, [r6, #0]
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	069b      	lsls	r3, r3, #26
 8006970:	d502      	bpl.n	8006978 <_printf_common+0x30>
 8006972:	6833      	ldr	r3, [r6, #0]
 8006974:	3302      	adds	r3, #2
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	6822      	ldr	r2, [r4, #0]
 800697a:	2306      	movs	r3, #6
 800697c:	0015      	movs	r5, r2
 800697e:	401d      	ands	r5, r3
 8006980:	421a      	tst	r2, r3
 8006982:	d027      	beq.n	80069d4 <_printf_common+0x8c>
 8006984:	0023      	movs	r3, r4
 8006986:	3343      	adds	r3, #67	@ 0x43
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	1e5a      	subs	r2, r3, #1
 800698c:	4193      	sbcs	r3, r2
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	0692      	lsls	r2, r2, #26
 8006992:	d430      	bmi.n	80069f6 <_printf_common+0xae>
 8006994:	0022      	movs	r2, r4
 8006996:	9901      	ldr	r1, [sp, #4]
 8006998:	9800      	ldr	r0, [sp, #0]
 800699a:	9d08      	ldr	r5, [sp, #32]
 800699c:	3243      	adds	r2, #67	@ 0x43
 800699e:	47a8      	blx	r5
 80069a0:	3001      	adds	r0, #1
 80069a2:	d025      	beq.n	80069f0 <_printf_common+0xa8>
 80069a4:	2206      	movs	r2, #6
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	2500      	movs	r5, #0
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d105      	bne.n	80069bc <_printf_common+0x74>
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	68e5      	ldr	r5, [r4, #12]
 80069b4:	1aed      	subs	r5, r5, r3
 80069b6:	43eb      	mvns	r3, r5
 80069b8:	17db      	asrs	r3, r3, #31
 80069ba:	401d      	ands	r5, r3
 80069bc:	68a3      	ldr	r3, [r4, #8]
 80069be:	6922      	ldr	r2, [r4, #16]
 80069c0:	4293      	cmp	r3, r2
 80069c2:	dd01      	ble.n	80069c8 <_printf_common+0x80>
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	18ed      	adds	r5, r5, r3
 80069c8:	2600      	movs	r6, #0
 80069ca:	42b5      	cmp	r5, r6
 80069cc:	d120      	bne.n	8006a10 <_printf_common+0xc8>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e010      	b.n	80069f4 <_printf_common+0xac>
 80069d2:	3501      	adds	r5, #1
 80069d4:	68e3      	ldr	r3, [r4, #12]
 80069d6:	6832      	ldr	r2, [r6, #0]
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	42ab      	cmp	r3, r5
 80069dc:	ddd2      	ble.n	8006984 <_printf_common+0x3c>
 80069de:	0022      	movs	r2, r4
 80069e0:	2301      	movs	r3, #1
 80069e2:	9901      	ldr	r1, [sp, #4]
 80069e4:	9800      	ldr	r0, [sp, #0]
 80069e6:	9f08      	ldr	r7, [sp, #32]
 80069e8:	3219      	adds	r2, #25
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	d1f0      	bne.n	80069d2 <_printf_common+0x8a>
 80069f0:	2001      	movs	r0, #1
 80069f2:	4240      	negs	r0, r0
 80069f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069f6:	2030      	movs	r0, #48	@ 0x30
 80069f8:	18e1      	adds	r1, r4, r3
 80069fa:	3143      	adds	r1, #67	@ 0x43
 80069fc:	7008      	strb	r0, [r1, #0]
 80069fe:	0021      	movs	r1, r4
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	3145      	adds	r1, #69	@ 0x45
 8006a04:	7809      	ldrb	r1, [r1, #0]
 8006a06:	18a2      	adds	r2, r4, r2
 8006a08:	3243      	adds	r2, #67	@ 0x43
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	7011      	strb	r1, [r2, #0]
 8006a0e:	e7c1      	b.n	8006994 <_printf_common+0x4c>
 8006a10:	0022      	movs	r2, r4
 8006a12:	2301      	movs	r3, #1
 8006a14:	9901      	ldr	r1, [sp, #4]
 8006a16:	9800      	ldr	r0, [sp, #0]
 8006a18:	9f08      	ldr	r7, [sp, #32]
 8006a1a:	321a      	adds	r2, #26
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa8>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d1      	b.n	80069ca <_printf_common+0x82>
	...

08006a28 <_printf_i>:
 8006a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2a:	b08b      	sub	sp, #44	@ 0x2c
 8006a2c:	9206      	str	r2, [sp, #24]
 8006a2e:	000a      	movs	r2, r1
 8006a30:	3243      	adds	r2, #67	@ 0x43
 8006a32:	9307      	str	r3, [sp, #28]
 8006a34:	9005      	str	r0, [sp, #20]
 8006a36:	9203      	str	r2, [sp, #12]
 8006a38:	7e0a      	ldrb	r2, [r1, #24]
 8006a3a:	000c      	movs	r4, r1
 8006a3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a3e:	2a78      	cmp	r2, #120	@ 0x78
 8006a40:	d809      	bhi.n	8006a56 <_printf_i+0x2e>
 8006a42:	2a62      	cmp	r2, #98	@ 0x62
 8006a44:	d80b      	bhi.n	8006a5e <_printf_i+0x36>
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	d100      	bne.n	8006a4c <_printf_i+0x24>
 8006a4a:	e0bc      	b.n	8006bc6 <_printf_i+0x19e>
 8006a4c:	497b      	ldr	r1, [pc, #492]	@ (8006c3c <_printf_i+0x214>)
 8006a4e:	9104      	str	r1, [sp, #16]
 8006a50:	2a58      	cmp	r2, #88	@ 0x58
 8006a52:	d100      	bne.n	8006a56 <_printf_i+0x2e>
 8006a54:	e090      	b.n	8006b78 <_printf_i+0x150>
 8006a56:	0025      	movs	r5, r4
 8006a58:	3542      	adds	r5, #66	@ 0x42
 8006a5a:	702a      	strb	r2, [r5, #0]
 8006a5c:	e022      	b.n	8006aa4 <_printf_i+0x7c>
 8006a5e:	0010      	movs	r0, r2
 8006a60:	3863      	subs	r0, #99	@ 0x63
 8006a62:	2815      	cmp	r0, #21
 8006a64:	d8f7      	bhi.n	8006a56 <_printf_i+0x2e>
 8006a66:	f7f9 fb4f 	bl	8000108 <__gnu_thumb1_case_shi>
 8006a6a:	0016      	.short	0x0016
 8006a6c:	fff6001f 	.word	0xfff6001f
 8006a70:	fff6fff6 	.word	0xfff6fff6
 8006a74:	001ffff6 	.word	0x001ffff6
 8006a78:	fff6fff6 	.word	0xfff6fff6
 8006a7c:	fff6fff6 	.word	0xfff6fff6
 8006a80:	003600a1 	.word	0x003600a1
 8006a84:	fff60080 	.word	0xfff60080
 8006a88:	00b2fff6 	.word	0x00b2fff6
 8006a8c:	0036fff6 	.word	0x0036fff6
 8006a90:	fff6fff6 	.word	0xfff6fff6
 8006a94:	0084      	.short	0x0084
 8006a96:	0025      	movs	r5, r4
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	3542      	adds	r5, #66	@ 0x42
 8006a9c:	1d11      	adds	r1, r2, #4
 8006a9e:	6019      	str	r1, [r3, #0]
 8006aa0:	6813      	ldr	r3, [r2, #0]
 8006aa2:	702b      	strb	r3, [r5, #0]
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0a0      	b.n	8006bea <_printf_i+0x1c2>
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	6809      	ldr	r1, [r1, #0]
 8006aac:	1d02      	adds	r2, r0, #4
 8006aae:	060d      	lsls	r5, r1, #24
 8006ab0:	d50b      	bpl.n	8006aca <_printf_i+0xa2>
 8006ab2:	6806      	ldr	r6, [r0, #0]
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	da03      	bge.n	8006ac2 <_printf_i+0x9a>
 8006aba:	232d      	movs	r3, #45	@ 0x2d
 8006abc:	9a03      	ldr	r2, [sp, #12]
 8006abe:	4276      	negs	r6, r6
 8006ac0:	7013      	strb	r3, [r2, #0]
 8006ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8006c3c <_printf_i+0x214>)
 8006ac4:	270a      	movs	r7, #10
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	e018      	b.n	8006afc <_printf_i+0xd4>
 8006aca:	6806      	ldr	r6, [r0, #0]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	0649      	lsls	r1, r1, #25
 8006ad0:	d5f1      	bpl.n	8006ab6 <_printf_i+0x8e>
 8006ad2:	b236      	sxth	r6, r6
 8006ad4:	e7ef      	b.n	8006ab6 <_printf_i+0x8e>
 8006ad6:	6808      	ldr	r0, [r1, #0]
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	c940      	ldmia	r1!, {r6}
 8006adc:	0605      	lsls	r5, r0, #24
 8006ade:	d402      	bmi.n	8006ae6 <_printf_i+0xbe>
 8006ae0:	0640      	lsls	r0, r0, #25
 8006ae2:	d500      	bpl.n	8006ae6 <_printf_i+0xbe>
 8006ae4:	b2b6      	uxth	r6, r6
 8006ae6:	6019      	str	r1, [r3, #0]
 8006ae8:	4b54      	ldr	r3, [pc, #336]	@ (8006c3c <_printf_i+0x214>)
 8006aea:	270a      	movs	r7, #10
 8006aec:	9304      	str	r3, [sp, #16]
 8006aee:	2a6f      	cmp	r2, #111	@ 0x6f
 8006af0:	d100      	bne.n	8006af4 <_printf_i+0xcc>
 8006af2:	3f02      	subs	r7, #2
 8006af4:	0023      	movs	r3, r4
 8006af6:	2200      	movs	r2, #0
 8006af8:	3343      	adds	r3, #67	@ 0x43
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	60a3      	str	r3, [r4, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db03      	blt.n	8006b0c <_printf_i+0xe4>
 8006b04:	2104      	movs	r1, #4
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	438a      	bics	r2, r1
 8006b0a:	6022      	str	r2, [r4, #0]
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	d102      	bne.n	8006b16 <_printf_i+0xee>
 8006b10:	9d03      	ldr	r5, [sp, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <_printf_i+0x108>
 8006b16:	9d03      	ldr	r5, [sp, #12]
 8006b18:	0030      	movs	r0, r6
 8006b1a:	0039      	movs	r1, r7
 8006b1c:	f7f9 fb84 	bl	8000228 <__aeabi_uidivmod>
 8006b20:	9b04      	ldr	r3, [sp, #16]
 8006b22:	3d01      	subs	r5, #1
 8006b24:	5c5b      	ldrb	r3, [r3, r1]
 8006b26:	702b      	strb	r3, [r5, #0]
 8006b28:	0033      	movs	r3, r6
 8006b2a:	0006      	movs	r6, r0
 8006b2c:	429f      	cmp	r7, r3
 8006b2e:	d9f3      	bls.n	8006b18 <_printf_i+0xf0>
 8006b30:	2f08      	cmp	r7, #8
 8006b32:	d109      	bne.n	8006b48 <_printf_i+0x120>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07db      	lsls	r3, r3, #31
 8006b38:	d506      	bpl.n	8006b48 <_printf_i+0x120>
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	dc02      	bgt.n	8006b48 <_printf_i+0x120>
 8006b42:	2330      	movs	r3, #48	@ 0x30
 8006b44:	3d01      	subs	r5, #1
 8006b46:	702b      	strb	r3, [r5, #0]
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1b5b      	subs	r3, r3, r5
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	9b07      	ldr	r3, [sp, #28]
 8006b50:	0021      	movs	r1, r4
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	9805      	ldr	r0, [sp, #20]
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	aa09      	add	r2, sp, #36	@ 0x24
 8006b5a:	f7ff fef5 	bl	8006948 <_printf_common>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d148      	bne.n	8006bf4 <_printf_i+0x1cc>
 8006b62:	2001      	movs	r0, #1
 8006b64:	4240      	negs	r0, r0
 8006b66:	b00b      	add	sp, #44	@ 0x2c
 8006b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	6809      	ldr	r1, [r1, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	2278      	movs	r2, #120	@ 0x78
 8006b74:	4932      	ldr	r1, [pc, #200]	@ (8006c40 <_printf_i+0x218>)
 8006b76:	9104      	str	r1, [sp, #16]
 8006b78:	0021      	movs	r1, r4
 8006b7a:	3145      	adds	r1, #69	@ 0x45
 8006b7c:	700a      	strb	r2, [r1, #0]
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	c940      	ldmia	r1!, {r6}
 8006b84:	0610      	lsls	r0, r2, #24
 8006b86:	d402      	bmi.n	8006b8e <_printf_i+0x166>
 8006b88:	0650      	lsls	r0, r2, #25
 8006b8a:	d500      	bpl.n	8006b8e <_printf_i+0x166>
 8006b8c:	b2b6      	uxth	r6, r6
 8006b8e:	6019      	str	r1, [r3, #0]
 8006b90:	07d3      	lsls	r3, r2, #31
 8006b92:	d502      	bpl.n	8006b9a <_printf_i+0x172>
 8006b94:	2320      	movs	r3, #32
 8006b96:	4313      	orrs	r3, r2
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	d001      	beq.n	8006ba2 <_printf_i+0x17a>
 8006b9e:	2710      	movs	r7, #16
 8006ba0:	e7a8      	b.n	8006af4 <_printf_i+0xcc>
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	4393      	bics	r3, r2
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	e7f8      	b.n	8006b9e <_printf_i+0x176>
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	680d      	ldr	r5, [r1, #0]
 8006bb0:	1d10      	adds	r0, r2, #4
 8006bb2:	6949      	ldr	r1, [r1, #20]
 8006bb4:	6018      	str	r0, [r3, #0]
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	062e      	lsls	r6, r5, #24
 8006bba:	d501      	bpl.n	8006bc0 <_printf_i+0x198>
 8006bbc:	6019      	str	r1, [r3, #0]
 8006bbe:	e002      	b.n	8006bc6 <_printf_i+0x19e>
 8006bc0:	066d      	lsls	r5, r5, #25
 8006bc2:	d5fb      	bpl.n	8006bbc <_printf_i+0x194>
 8006bc4:	8019      	strh	r1, [r3, #0]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9d03      	ldr	r5, [sp, #12]
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	e7bf      	b.n	8006b4e <_printf_i+0x126>
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	1d11      	adds	r1, r2, #4
 8006bd2:	6019      	str	r1, [r3, #0]
 8006bd4:	6815      	ldr	r5, [r2, #0]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	0028      	movs	r0, r5
 8006bda:	6862      	ldr	r2, [r4, #4]
 8006bdc:	f000 f858 	bl	8006c90 <memchr>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d001      	beq.n	8006be8 <_printf_i+0x1c0>
 8006be4:	1b40      	subs	r0, r0, r5
 8006be6:	6060      	str	r0, [r4, #4]
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	2300      	movs	r3, #0
 8006bee:	9a03      	ldr	r2, [sp, #12]
 8006bf0:	7013      	strb	r3, [r2, #0]
 8006bf2:	e7ac      	b.n	8006b4e <_printf_i+0x126>
 8006bf4:	002a      	movs	r2, r5
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	9906      	ldr	r1, [sp, #24]
 8006bfa:	9805      	ldr	r0, [sp, #20]
 8006bfc:	9d07      	ldr	r5, [sp, #28]
 8006bfe:	47a8      	blx	r5
 8006c00:	3001      	adds	r0, #1
 8006c02:	d0ae      	beq.n	8006b62 <_printf_i+0x13a>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	079b      	lsls	r3, r3, #30
 8006c08:	d415      	bmi.n	8006c36 <_printf_i+0x20e>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0c:	68e0      	ldr	r0, [r4, #12]
 8006c0e:	4298      	cmp	r0, r3
 8006c10:	daa9      	bge.n	8006b66 <_printf_i+0x13e>
 8006c12:	0018      	movs	r0, r3
 8006c14:	e7a7      	b.n	8006b66 <_printf_i+0x13e>
 8006c16:	0022      	movs	r2, r4
 8006c18:	2301      	movs	r3, #1
 8006c1a:	9906      	ldr	r1, [sp, #24]
 8006c1c:	9805      	ldr	r0, [sp, #20]
 8006c1e:	9e07      	ldr	r6, [sp, #28]
 8006c20:	3219      	adds	r2, #25
 8006c22:	47b0      	blx	r6
 8006c24:	3001      	adds	r0, #1
 8006c26:	d09c      	beq.n	8006b62 <_printf_i+0x13a>
 8006c28:	3501      	adds	r5, #1
 8006c2a:	68e3      	ldr	r3, [r4, #12]
 8006c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	42ab      	cmp	r3, r5
 8006c32:	dcf0      	bgt.n	8006c16 <_printf_i+0x1ee>
 8006c34:	e7e9      	b.n	8006c0a <_printf_i+0x1e2>
 8006c36:	2500      	movs	r5, #0
 8006c38:	e7f7      	b.n	8006c2a <_printf_i+0x202>
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	08009aca 	.word	0x08009aca
 8006c40:	08009adb 	.word	0x08009adb

08006c44 <memmove>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	4288      	cmp	r0, r1
 8006c48:	d806      	bhi.n	8006c58 <memmove+0x14>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d008      	beq.n	8006c62 <memmove+0x1e>
 8006c50:	5ccc      	ldrb	r4, [r1, r3]
 8006c52:	54c4      	strb	r4, [r0, r3]
 8006c54:	3301      	adds	r3, #1
 8006c56:	e7f9      	b.n	8006c4c <memmove+0x8>
 8006c58:	188b      	adds	r3, r1, r2
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	d2f5      	bcs.n	8006c4a <memmove+0x6>
 8006c5e:	3a01      	subs	r2, #1
 8006c60:	d200      	bcs.n	8006c64 <memmove+0x20>
 8006c62:	bd10      	pop	{r4, pc}
 8006c64:	5c8b      	ldrb	r3, [r1, r2]
 8006c66:	5483      	strb	r3, [r0, r2]
 8006c68:	e7f9      	b.n	8006c5e <memmove+0x1a>
	...

08006c6c <_sbrk_r>:
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	4d06      	ldr	r5, [pc, #24]	@ (8006c8c <_sbrk_r+0x20>)
 8006c72:	0004      	movs	r4, r0
 8006c74:	0008      	movs	r0, r1
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7fc ffbe 	bl	8003bf8 <_sbrk>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d103      	bne.n	8006c88 <_sbrk_r+0x1c>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d000      	beq.n	8006c88 <_sbrk_r+0x1c>
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	bd70      	pop	{r4, r5, r6, pc}
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	200006f0 	.word	0x200006f0

08006c90 <memchr>:
 8006c90:	b2c9      	uxtb	r1, r1
 8006c92:	1882      	adds	r2, r0, r2
 8006c94:	4290      	cmp	r0, r2
 8006c96:	d101      	bne.n	8006c9c <memchr+0xc>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	4770      	bx	lr
 8006c9c:	7803      	ldrb	r3, [r0, #0]
 8006c9e:	428b      	cmp	r3, r1
 8006ca0:	d0fb      	beq.n	8006c9a <memchr+0xa>
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	e7f6      	b.n	8006c94 <memchr+0x4>

08006ca6 <memcpy>:
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d100      	bne.n	8006cb0 <memcpy+0xa>
 8006cae:	bd10      	pop	{r4, pc}
 8006cb0:	5ccc      	ldrb	r4, [r1, r3]
 8006cb2:	54c4      	strb	r4, [r0, r3]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	e7f8      	b.n	8006caa <memcpy+0x4>

08006cb8 <_realloc_r>:
 8006cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cba:	0006      	movs	r6, r0
 8006cbc:	000c      	movs	r4, r1
 8006cbe:	0015      	movs	r5, r2
 8006cc0:	2900      	cmp	r1, #0
 8006cc2:	d105      	bne.n	8006cd0 <_realloc_r+0x18>
 8006cc4:	0011      	movs	r1, r2
 8006cc6:	f7ff fc51 	bl	800656c <_malloc_r>
 8006cca:	0004      	movs	r4, r0
 8006ccc:	0020      	movs	r0, r4
 8006cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d103      	bne.n	8006cdc <_realloc_r+0x24>
 8006cd4:	f7ff fbde 	bl	8006494 <_free_r>
 8006cd8:	2400      	movs	r4, #0
 8006cda:	e7f7      	b.n	8006ccc <_realloc_r+0x14>
 8006cdc:	f000 f81b 	bl	8006d16 <_malloc_usable_size_r>
 8006ce0:	0007      	movs	r7, r0
 8006ce2:	4285      	cmp	r5, r0
 8006ce4:	d802      	bhi.n	8006cec <_realloc_r+0x34>
 8006ce6:	0843      	lsrs	r3, r0, #1
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	d3ef      	bcc.n	8006ccc <_realloc_r+0x14>
 8006cec:	0029      	movs	r1, r5
 8006cee:	0030      	movs	r0, r6
 8006cf0:	f7ff fc3c 	bl	800656c <_malloc_r>
 8006cf4:	9001      	str	r0, [sp, #4]
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d0ee      	beq.n	8006cd8 <_realloc_r+0x20>
 8006cfa:	002a      	movs	r2, r5
 8006cfc:	42bd      	cmp	r5, r7
 8006cfe:	d900      	bls.n	8006d02 <_realloc_r+0x4a>
 8006d00:	003a      	movs	r2, r7
 8006d02:	0021      	movs	r1, r4
 8006d04:	9801      	ldr	r0, [sp, #4]
 8006d06:	f7ff ffce 	bl	8006ca6 <memcpy>
 8006d0a:	0021      	movs	r1, r4
 8006d0c:	0030      	movs	r0, r6
 8006d0e:	f7ff fbc1 	bl	8006494 <_free_r>
 8006d12:	9c01      	ldr	r4, [sp, #4]
 8006d14:	e7da      	b.n	8006ccc <_realloc_r+0x14>

08006d16 <_malloc_usable_size_r>:
 8006d16:	1f0b      	subs	r3, r1, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	1f18      	subs	r0, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da01      	bge.n	8006d24 <_malloc_usable_size_r+0xe>
 8006d20:	580b      	ldr	r3, [r1, r0]
 8006d22:	18c0      	adds	r0, r0, r3
 8006d24:	4770      	bx	lr
	...

08006d28 <round>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006da8 <round+0x80>)
 8006d2c:	004d      	lsls	r5, r1, #1
 8006d2e:	0d6d      	lsrs	r5, r5, #21
 8006d30:	18eb      	adds	r3, r5, r3
 8006d32:	000a      	movs	r2, r1
 8006d34:	0004      	movs	r4, r0
 8006d36:	2b13      	cmp	r3, #19
 8006d38:	dc18      	bgt.n	8006d6c <round+0x44>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da0a      	bge.n	8006d54 <round+0x2c>
 8006d3e:	0fc9      	lsrs	r1, r1, #31
 8006d40:	07c9      	lsls	r1, r1, #31
 8006d42:	000a      	movs	r2, r1
 8006d44:	3301      	adds	r3, #1
 8006d46:	d101      	bne.n	8006d4c <round+0x24>
 8006d48:	4a18      	ldr	r2, [pc, #96]	@ (8006dac <round+0x84>)
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	0011      	movs	r1, r2
 8006d50:	0018      	movs	r0, r3
 8006d52:	e015      	b.n	8006d80 <round+0x58>
 8006d54:	4d16      	ldr	r5, [pc, #88]	@ (8006db0 <round+0x88>)
 8006d56:	000e      	movs	r6, r1
 8006d58:	411d      	asrs	r5, r3
 8006d5a:	402e      	ands	r6, r5
 8006d5c:	4334      	orrs	r4, r6
 8006d5e:	d00f      	beq.n	8006d80 <round+0x58>
 8006d60:	2180      	movs	r1, #128	@ 0x80
 8006d62:	0309      	lsls	r1, r1, #12
 8006d64:	4119      	asrs	r1, r3
 8006d66:	188a      	adds	r2, r1, r2
 8006d68:	43aa      	bics	r2, r5
 8006d6a:	e7ef      	b.n	8006d4c <round+0x24>
 8006d6c:	2b33      	cmp	r3, #51	@ 0x33
 8006d6e:	dd08      	ble.n	8006d82 <round+0x5a>
 8006d70:	2280      	movs	r2, #128	@ 0x80
 8006d72:	00d2      	lsls	r2, r2, #3
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d103      	bne.n	8006d80 <round+0x58>
 8006d78:	0002      	movs	r2, r0
 8006d7a:	000b      	movs	r3, r1
 8006d7c:	f7f9 fbc6 	bl	800050c <__aeabi_dadd>
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	4e0c      	ldr	r6, [pc, #48]	@ (8006db4 <round+0x8c>)
 8006d84:	19ae      	adds	r6, r5, r6
 8006d86:	2501      	movs	r5, #1
 8006d88:	426d      	negs	r5, r5
 8006d8a:	40f5      	lsrs	r5, r6
 8006d8c:	4228      	tst	r0, r5
 8006d8e:	d0f7      	beq.n	8006d80 <round+0x58>
 8006d90:	2133      	movs	r1, #51	@ 0x33
 8006d92:	1ac9      	subs	r1, r1, r3
 8006d94:	2301      	movs	r3, #1
 8006d96:	408b      	lsls	r3, r1
 8006d98:	181b      	adds	r3, r3, r0
 8006d9a:	4283      	cmp	r3, r0
 8006d9c:	41a4      	sbcs	r4, r4
 8006d9e:	4264      	negs	r4, r4
 8006da0:	1912      	adds	r2, r2, r4
 8006da2:	43ab      	bics	r3, r5
 8006da4:	e7d3      	b.n	8006d4e <round+0x26>
 8006da6:	46c0      	nop			@ (mov r8, r8)
 8006da8:	fffffc01 	.word	0xfffffc01
 8006dac:	3ff00000 	.word	0x3ff00000
 8006db0:	000fffff 	.word	0x000fffff
 8006db4:	fffffbed 	.word	0xfffffbed

08006db8 <_init>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

08006dc4 <_fini>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	46c0      	nop			@ (mov r8, r8)
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr
